<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ImageProcessor.Web</name>
    </assembly>
    <members>
        <member name="T:ImageProcessor.Web.Caching.CachedImageHelper">
            <summary>
            Provides helper methods to generate cached file names and paths.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Caching.CachedImageHelper.GetCachedImageFileName(System.String)">
            <summary>
            Gets the cached file name from the given path.
            </summary>
            <param name="path">The path to the image. This can be the full path plus querystring.</param>
            <returns>The <see cref="T:System.String"/></returns>
        </member>
        <member name="M:ImageProcessor.Web.Caching.CachedImageHelper.GetCachedImageFileName(System.String,System.String)">
            <summary>
            Gets the cached file name from the given path.
            </summary>
            <param name="path">The request path to the image. This can be the full path plus querystring.</param>
            <param name="querystring">The request querystring.</param>
            <returns>The <see cref="T:System.String"/></returns>
        </member>
        <member name="M:ImageProcessor.Web.Caching.CachedImageHelper.GetCachedPath(System.String,System.String,System.Boolean,System.Int32)">
            <summary>
            Gets the path to the cached file.
            </summary>
            <param name="cachedFolderPath">The path to the cached folder, relative or absolute.</param>
            <param name="cachedFileName">The cached file name.</param>
            <param name="makeVirtual">Whether to reverse the slashes in the path.</param>
            <param name="depth">How deep to nest the image files in folders.</param>
            <returns>The <see cref="T:System.String"/></returns>
        </member>
        <member name="T:ImageProcessor.Web.Caching.AsyncKeyLock">
            <summary>
            The async key lock prevents multiple asynchronous threads acting upon the same object with the given key at the same time.
            It is designed so that it does not block unique requests allowing a high throughput.
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.Caching.AsyncKeyLock.Keys">
            <summary>
            A collection of doorman counters used for tracking references to the same key.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Caching.AsyncKeyLock.LockAsync(System.String)">
            <summary>
            Locks the current thread asynchronously.
            </summary>
            <param name="key">The key identifying the specific object to lock against.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> that will release the lock.
            </returns>
        </member>
        <member name="M:ImageProcessor.Web.Caching.AsyncKeyLock.GetOrCreate(System.String)">
            <summary>
            Returns a <see cref="T:System.Threading.SemaphoreSlim"/> matching on the given key
             or a new one if none is found.
            </summary>
            <param name="key">The key identifying the semaphore.</param>
            <returns>
            The <see cref="T:System.Threading.SemaphoreSlim"/>.
            </returns>
        </member>
        <member name="T:ImageProcessor.Web.Caching.AsyncKeyLock.Releaser">
            <summary>
            The disposable releaser tasked with releasing the semaphore.
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.Caching.AsyncKeyLock.Releaser.key">
            <summary>
            The key identifying the <see cref="T:ImageProcessor.Web.Caching.Doorman"/> that limits the number of threads.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Caching.AsyncKeyLock.Releaser.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Web.Caching.AsyncKeyLock.Releaser"/> class.
            </summary>
            <param name="key">The key identifying the doorman that limits the number of threads.</param>
        </member>
        <member name="M:ImageProcessor.Web.Caching.AsyncKeyLock.Releaser.Dispose">
            <inheritdoc />
        </member>
        <member name="T:ImageProcessor.Web.Caching.DoormanPool">
            <summary>
            Provides a resource pool that enables reusing instances of <see cref="T:ImageProcessor.Web.Caching.Doorman"/>
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Caching.DoormanPool.Rent">
            <summary>
            Retrieves a <see cref="T:ImageProcessor.Web.Caching.Doorman"/> from the pool or a new one if the pool is empty
            </summary>
            <returns>Tre <see cref="T:ImageProcessor.Web.Caching.Doorman"/></returns>
        </member>
        <member name="M:ImageProcessor.Web.Caching.DoormanPool.Return(ImageProcessor.Web.Caching.Doorman)">
            <summary>
            Returns an doorman to the pool that was previously obtained using the <see cref="M:ImageProcessor.Web.Caching.DoormanPool.Rent"></see>
            method on the same <see cref="T:ImageProcessor.Web.Caching.DoormanPool"></see> instance.
            </summary>
            <param name="doorman">The doorman to return</param>
        </member>
        <member name="M:ImageProcessor.Web.Caching.DoormanPool.Count">
            <summary>
            Gets the number of items contained within the pool
            </summary>
            <returns>The <see cref="T:System.Int32"/></returns>
        </member>
        <member name="T:ImageProcessor.Web.Caching.Doorman">
            <summary>
            A wrapper around <see cref="T:System.Threading.SemaphoreSlim"/> that operates a one-in-one out policy
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Caching.Doorman.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Web.Caching.Doorman"/> class.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Caching.Doorman.Semaphore">
            <summary>
            Gets the SemaphoreSlim that performs the limiting
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Caching.Doorman.RefCount">
            <summary>
            Gets or sets the number of references to this doorman.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Caching.Doorman.Dispose">
            <inheritdoc />
        </member>
        <member name="T:ImageProcessor.Web.Caching.IImageCacheExtended">
            <summary>
            An extended image cache with additional configuration options.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Caching.IImageCacheExtended.FolderDepth">
            <summary>
            Gets or sets the maximum number folder levels to nest the cached images.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Caching.IImageCacheExtended.TrimCache">
            <summary>
            Gets or sets a value indicating whether to periodically trim the cache.
            </summary>
        </member>
        <member name="T:ImageProcessor.Web.Caching.MemoryStreamPool">
            <summary>
            The memory stream pool manager.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Caching.MemoryStreamPool.Shared">
            <summary>
            The default shared recyclable memory stream manager
            </summary>
        </member>
        <member name="T:ImageProcessor.Web.Caching.CachedImage">
            <summary>
            Describes a cached image 
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Caching.CachedImage.Key">
            <summary>
            Gets or sets the key identifying the cached image.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Caching.CachedImage.Path">
            <summary>
            Gets or sets the value of the cached image.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Caching.CachedImage.CreationTimeUtc">
            <summary>
            Gets or sets the creation time of the cached image.
            </summary>
        </member>
        <member name="T:ImageProcessor.Web.Caching.DiskCache">
            <summary>
            Provides an <see cref="T:ImageProcessor.Web.Caching.IImageCache"/> implementation that is file system based.
            The cache is self healing and cleaning.
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.Caching.DiskCache.MaxFilesCount">
            <summary>
            The maximum number of files allowed in the directory.
            </summary>
            <remarks>
            NTFS directories can handle up to 10,000 files in the directory before slowing down.
            This will help us to ensure that don't go over that limit.
            <see href="http://stackoverflow.com/questions/197162/ntfs-performance-and-large-volumes-of-files-and-directories"/>
            <see href="http://stackoverflow.com/questions/115882/how-do-you-deal-with-lots-of-small-files"/>
            <see href="http://stackoverflow.com/questions/1638219/millions-of-small-graphics-files-and-how-to-overcome-slow-file-system-access-on"/>
            </remarks>
        </member>
        <member name="F:ImageProcessor.Web.Caching.DiskCache.cachePathValidatorLock">
            <summary>
            Used to lock against when checking the cached folder path.
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.Caching.DiskCache.cachePathValidatorCheck">
            <summary>
            Whether the cached path has been checked.
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.Caching.DiskCache.validatedAbsoluteCachePath">
            <summary>
            Stores the resulting validated absolute cache folder path
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.Caching.DiskCache.validatedVirtualCachePath">
            <summary>
            Stores the resulting validated virtual cache folder path - if it's within the web root
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.Caching.DiskCache.virtualCachePath">
            <summary>
            The virtual cache path.
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.Caching.DiskCache.absoluteCachePath">
            <summary>
            The absolute path to virtual cache path on the server.
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.Caching.DiskCache.virtualCachedFilePath">
            <summary>
            The virtual path to the cached file.
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.Caching.DiskCache.cachedImageCreationTimeUtc">
            <summary>
            The create time of the cached image
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Caching.DiskCache.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Web.Caching.DiskCache"/> class.
            </summary>
            <param name="requestPath">
            The request path for the image.
            </param>
            <param name="fullPath">
            The full path for the image.
            </param>
            <param name="querystring">
            The querystring containing instructions.
            </param>
        </member>
        <member name="M:ImageProcessor.Web.Caching.DiskCache.IsNewOrUpdatedAsync">
            <summary>
            Gets a value indicating whether the image is new or updated in an asynchronous manner.
            </summary>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Web.Caching.DiskCache.AddImageToCacheAsync(System.IO.Stream,System.String)">
            <summary>
            Adds the image to the cache in an asynchronous manner.
            </summary>
            <param name="stream">The stream containing the image data.</param>
            <param name="contentType">The content type of the image.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> representing an asynchronous operation.
            </returns>
        </member>
        <member name="M:ImageProcessor.Web.Caching.DiskCache.TrimCacheAsync">
            <summary>
            Trims the cache of any expired items in an asynchronous manner.
            </summary>
            <returns>
            The asynchronous <see cref="T:System.Threading.Tasks.Task"/> representing an asynchronous operation.
            </returns>
        </member>
        <member name="M:ImageProcessor.Web.Caching.DiskCache.RewritePath(System.Web.HttpContext)">
            <summary>
            Rewrites the path to point to the cached image.
            </summary>
            <param name="context">
            The <see cref="T:System.Web.HttpContext"/> encapsulating all information about the request.
            </param>
        </member>
        <member name="M:ImageProcessor.Web.Caching.DiskCache.IsUpdatedAsync(System.DateTime)">
            <summary>
            Returns a value indicating whether the requested image has been updated.
            </summary>
            <param name="creationDate">The creation date.</param>
            <returns>The <see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:ImageProcessor.Web.Caching.DiskCache.GetValidatedCachePathsImpl(System.String,System.Func{System.String,System.String},System.Func{System.String,System.IO.FileSystemInfo},System.String@)">
            <summary>
            The internal method that performs the actual validation which can be unit tested
            </summary>
            <param name="originalPath">
            The original path to validate which could be an absolute or a virtual path
            </param>
            <param name="mapPath">
            A function to use to perform the MapPath
            </param>
            <param name="getDirectoryInfo">
            A function to use to create the DirectoryInfo instance
            (this allows us to unit test)
            </param>
            <param name="virtualCachePath">
            If the absolute cache path is within the web root then the result of this will be the virtual path
            of the cache folder. If the absolute path is not within the web root then this will be null.
            </param>
            <returns>
            The absolute path to the cache folder
            </returns>
        </member>
        <member name="M:ImageProcessor.Web.Caching.DiskCache.GetValidatedAbsolutePath(System.String,System.String@)">
            <summary>
            This will get the validated absolute path which is based on the configured value one time
            </summary>
            <param name="originalPath">The original path</param>
            <param name="virtualPath">The resulting virtual path if the path is within the web-root</param>
            <returns>The <see cref="T:System.String"/></returns>
            <remarks>
            We are performing this statically in order to avoid any overhead used when performing the validation since
            this occurs for each image when it only needs to be done once
            </remarks>
        </member>
        <member name="M:ImageProcessor.Web.Caching.DiskCache.SafeEnumerateDirectories(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Returns an enumerable collection of directory paths that matches a specified search pattern and search subdirectory option.
            Will return an empty enumerable on exception. Quick and dirty but does what I need just now.
            </summary>
            <param name="directoryPath">
            The path to the directory to search within.
            </param>
            <param name="searchPattern">
            The search string to match against the names of directories. This parameter can contain a combination of valid literal path 
            and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is "*", which returns all files.
            </param>
            <param name="searchOption">
            One of the enumeration values that specifies whether the search operation should include only 
            the current directory or all subdirectories. The default value is AllDirectories.
            </param>
            <returns>
            An enumerable collection of directories that matches searchPattern and searchOption.
            </returns>
        </member>
        <member name="M:ImageProcessor.Web.Caching.DiskCache.RecursivelyDeleteEmptyDirectories(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Recursively delete the directories in the folder.
            </summary>
            <param name="directory">The current directory.</param>
            <param name="root">The root path.</param>
            <param name="token">The cancellation token.</param>
        </member>
        <member name="M:ImageProcessor.Web.Caching.DiskCache.SetETagHeader(System.Web.HttpContext)">
            <summary>
            Sets the ETag Header
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ImageProcessor.Web.Caching.DiskCache.GetETag">
            <summary>
            Creates an ETag value from the current creation time.
            </summary>
            <returns>The <see cref="T:System.String"/></returns>
        </member>
        <member name="T:ImageProcessor.Web.Caching.IImageCache">
            <summary>
             Defines properties and methods for allowing caching of images to different sources.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Caching.IImageCache.Settings">
            <summary>
            Gets or sets any additional settings required by the cache.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Caching.IImageCache.CachedPath">
            <summary>
            Gets the path to the cached image.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Caching.IImageCache.MaxDays">
            <summary>
            Gets or sets the maximum number of days to store the image.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Caching.IImageCache.BrowserMaxDays">
            <summary>
            Gets or sets the maximum number of days to cache the image in the browser.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Caching.IImageCache.IsNewOrUpdatedAsync">
            <summary>
            Gets a value indicating whether the image is new or updated in an asynchronous manner.
            </summary>
            <returns>
            The asynchronous <see cref="T:System.Threading.Tasks.Task"/> returning the value.
            </returns>
        </member>
        <member name="M:ImageProcessor.Web.Caching.IImageCache.AddImageToCacheAsync(System.IO.Stream,System.String)">
            <summary>
            Adds the image to the cache in an asynchronous manner.
            </summary>
            <param name="stream">
            The stream containing the image data.
            </param>
            <param name="contentType">
            The content type of the image.
            </param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> representing an asynchronous operation.
            </returns>
        </member>
        <member name="M:ImageProcessor.Web.Caching.IImageCache.TrimCacheAsync">
            <summary>
            Trims the cache of any expired items in an asynchronous manner.
            </summary>
            <returns>
            The asynchronous <see cref="T:System.Threading.Tasks.Task"/> representing an asynchronous operation.
            </returns>
        </member>
        <member name="M:ImageProcessor.Web.Caching.IImageCache.CreateCachedFileNameAsync">
            <summary>
            Gets a string identifying the cached file name in an asynchronous manner.
            </summary>
            <returns>
            The asynchronous <see cref="T:System.Threading.Tasks.Task"/> returning the value.
            </returns>
        </member>
        <member name="M:ImageProcessor.Web.Caching.IImageCache.RewritePath(System.Web.HttpContext)">
            <summary>
            Rewrites the path to point to the cached image.
            </summary>
            <param name="context">
            The <see cref="T:System.Web.HttpContext"/> encapsulating all information about the request.
            </param>
        </member>
        <member name="T:ImageProcessor.Web.Caching.ImageCacheBase">
            <summary>
            The image cache base provides methods for implementing the <see cref="T:ImageProcessor.Web.Caching.IImageCacheExtended"/> interface.
            It is recommended that any implementations inherit from this class.
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.Caching.ImageCacheBase.RequestPath">
            <summary>
            The request path for the image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.Caching.ImageCacheBase.FullPath">
            <summary>
            The full path for the image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.Caching.ImageCacheBase.Querystring">
            <summary>
            The querystring containing processing instructions.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Caching.ImageCacheBase.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Web.Caching.ImageCacheBase"/> class.
            </summary>
            <param name="requestPath">
            The request path for the image.
            </param>
            <param name="fullPath">
            The full path for the image.
            </param>
            <param name="querystring">
            The querystring containing instructions.
            </param>
        </member>
        <member name="P:ImageProcessor.Web.Caching.ImageCacheBase.Settings">
            <summary>
            Gets or sets any additional settings required by the cache.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Caching.ImageCacheBase.CachedPath">
            <summary>
            Gets or sets the path to the cached image.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Caching.ImageCacheBase.CachedPathExpiry">
            <summary>
            Gets or sets the expiry of the cached path to the cached image.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Caching.ImageCacheBase.MaxDays">
            <summary>
            Gets or sets the maximum number of days to store the image.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Caching.ImageCacheBase.BrowserMaxDays">
            <summary>
            Gets or sets the maximum number of days to cache the image in the browser.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Caching.ImageCacheBase.FolderDepth">
            <summary>
            Gets or sets the maximum number folder levels to nest the cached images.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Caching.ImageCacheBase.TrimCache">
            <summary>
            Gets or sets a value indicating whether to periodically trim the cache.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Caching.ImageCacheBase.IsNewOrUpdatedAsync">
            <summary>
            Gets a value indicating whether the image is new or updated in an asynchronous manner.
            </summary>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Web.Caching.ImageCacheBase.AddImageToCacheAsync(System.IO.Stream,System.String)">
            <summary>
            Adds the image to the cache in an asynchronous manner.
            </summary>
            <param name="stream">
            The stream containing the image data.
            </param>
            <param name="contentType">
            The content type of the image.
            </param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> representing an asynchronous operation.
            </returns>
        </member>
        <member name="M:ImageProcessor.Web.Caching.ImageCacheBase.TrimCacheAsync">
            <summary>
            Trims the cache of any expired items in an asynchronous manner.
            Call <see cref="M:DebounceTrimmerAsync"/> within your implementation to correctly debounce cache cleanup.
            </summary>
            <returns>
            The asynchronous <see cref="T:System.Threading.Tasks.Task"/> representing an asynchronous operation.
            </returns>
        </member>
        <member name="M:ImageProcessor.Web.Caching.ImageCacheBase.CreateCachedFileNameAsync">
            <summary>
            Gets a string identifying the cached file name.
            </summary>
            <returns>
            The asynchronous <see cref="T:System.Threading.Tasks.Task"/> returning the value.
            </returns>
        </member>
        <member name="M:ImageProcessor.Web.Caching.ImageCacheBase.RewritePath(System.Web.HttpContext)">
            <summary>
            Rewrites the path to point to the cached image.
            </summary>
            <param name="context">
            The <see cref="T:System.Web.HttpContext"/> encapsulating all information about the request.
            </param>
        </member>
        <member name="M:ImageProcessor.Web.Caching.ImageCacheBase.IsExpired(System.DateTime)">
            <summary>
            Gets a value indicating whether the given images creation date is out with
            the prescribed limit.
            </summary>
            <param name="creationDate">The creation date.</param>
            <returns>
            The true if the date is out with the limit, otherwise; false.
            </returns>
        </member>
        <member name="M:ImageProcessor.Web.Caching.ImageCacheBase.AugmentSettings(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Provides a means to augment the cache settings taken from the configuration in derived classes.
            This allows for configuration of cache objects outside the normal configuration files, for example
            by using app settings in the Azure platform.
            </summary>
            <param name="settings">The current settings.</param>
        </member>
        <member name="M:ImageProcessor.Web.Caching.ImageCacheBase.DebounceTrimmerAsync(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Debounces the trimming function
            </summary>
            <param name="trimmer">The trimming function</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:ImageProcessor.Web.Caching.ImageCacheBase.ScheduleCacheTrimmer(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
            Will schedule any cache trimming  to ensure that only one cleanup operation is running at any one time
            and that it is a quiet time to do so.
            </summary>
            <param name="trimmer">The cache trimming method.</param>
        </member>
        <member name="M:ImageProcessor.Web.Caching.ImageCacheBase.AugmentSettingsCore(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Provides an entry point to augmentation of the <see cref="P:ImageProcessor.Web.Caching.ImageCacheBase.Settings"/> dictionary
            </summary>
            <param name="settings">Dictionary of settings</param>
            <returns>augmented dictionary of settings</returns>
        </member>
        <member name="T:ImageProcessor.Web.Caching.ImageCacheBase.CacheTrimmer">
            <summary>
            This ensures that any cache trimming operation is executed on a background thread and that only one operation can ever occur at one time.
            The execution will occur on a sliding timeframe, so anytime ScheduleTrimCache is called, it will check if it's within the timeout, if not it
            will delay the timeout again but only until the maximum wait time is reached.
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.Caching.ImageCacheBase.CacheTrimmer.Locker">
            <summary>
            The object to lock against
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.Caching.ImageCacheBase.CacheTrimmer.trim">
            <summary>
            Whether the trimming task is running
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.Caching.ImageCacheBase.CacheTrimmer.tokenSource">
            <summary>
            The cancellation token source
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.Caching.ImageCacheBase.CacheTrimmer.timestamp">
            <summary>
            The timestamp
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.Caching.ImageCacheBase.CacheTrimmer.timer">
            <summary>
            The timer
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Caching.ImageCacheBase.CacheTrimmer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Web.Caching.ImageCacheBase.CacheTrimmer"/> class.
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.Caching.ImageCacheBase.CacheTrimmer.WaitMilliseconds">
            <summary>
            The sliding delay time
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.Caching.ImageCacheBase.CacheTrimmer.MaxWaitMilliseconds">
            <summary>
            The maximum time period that will elapse until we must trim (30 mins)
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Caching.ImageCacheBase.CacheTrimmer.PerformTrim(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
            Performs the trimming function.
            </summary>
            <param name="trimmer">The trimmer method.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessor.Web.Caching.ImageCacheBase.CacheTrimmer.TimerRelease(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
            Releases the timer operation, running the cache trimmer.
            </summary>
            <param name="trimmer">The trimmer method.</param>
        </member>
        <member name="M:ImageProcessor.Web.Caching.ImageCacheBase.CacheTrimmer.Stop(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:ImageProcessor.Web.Caching.MemCache">
            <summary>
            Encapsulates methods that allow the caching and retrieval of objects from the in memory cache.
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.Caching.MemCache.Cache">
            <summary>
            The cache
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.Caching.MemCache.Locker">
            <summary>
            The reader-writer lock implementation.
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.Caching.MemCache.CacheItems">
            <summary>
            An internal list of cache keys to allow bulk removal.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Caching.MemCache.AddItem(System.String,System.Object,System.Runtime.Caching.CacheItemPolicy,System.String)">
            <summary>
            Adds an item to the cache.
            </summary>
            <param name="key">
            A unique identifier for the cache entry.
            </param>
            <param name="value">
            The object to insert.
            </param>
            <param name="policy">
            Optional. An <see cref="T:System.Runtime.Caching.CacheItemPolicy"/> object that contains eviction details for the cache entry. This object
            provides more options for eviction than a simple absolute expiration. The default value for the optional parameter
            is null.
            </param>
            <param name="regionName">
            Optional. A named region in the cache to which the cache entry can be added,
            if regions are implemented. The default value for the optional parameter
            is null.
            </param>
            <returns>
            True if the insertion try succeeds, or false if there is an already an entry
             in the cache with the same key as key.
            </returns>
        </member>
        <member name="M:ImageProcessor.Web.Caching.MemCache.GetItem(System.String,System.String)">
            <summary>
            Fetches an item matching the given key from the cache.
            </summary>
            <param name="key">
            A unique identifier for the cache entry.
            </param>
            <param name="regionName">
            Optional. A named region in the cache to which the cache entry can be added,
            if regions are implemented. The default value for the optional parameter
            is null.
            </param>
            <returns>
            The cache entry that is identified by key.
            </returns>
        </member>
        <member name="M:ImageProcessor.Web.Caching.MemCache.UpdateItem(System.String,System.Object,System.Runtime.Caching.CacheItemPolicy,System.String)">
            <summary>
            Updates an item to the cache.
            </summary>
            <param name="key">
            A unique identifier for the cache entry.
            </param>
            <param name="value">
            The object to insert.
            </param>
            <param name="policy">
            Optional. An <see cref="T:System.Runtime.Caching.CacheItemPolicy"/> object that contains eviction details for the cache entry. This object
            provides more options for eviction than a simple absolute expiration. The default value for the optional parameter
            is null.
            </param>
            <param name="regionName">
            Optional. A named region in the cache to which the cache entry can be added,
            if regions are implemented. The default value for the optional parameter
            is null.
            </param>
            <returns>
            True if the update try succeeds, or false if there is an already an entry
             in the cache with the same key as key.
            </returns>
        </member>
        <member name="M:ImageProcessor.Web.Caching.MemCache.RemoveItem(System.String,System.String)">
            <summary>
            Removes an item matching the given key from the cache.
            </summary>
            <param name="key">
            A unique identifier for the cache entry.
            </param>
            <param name="regionName">
            Optional. A named region in the cache to which the cache entry can be added,
            if regions are implemented. The default value for the optional parameter
            is null.
            </param>
            <returns>
            True if the removal try succeeds, or false if there is an already an entry
             in the cache with the same key as key.
            </returns>
        </member>
        <member name="M:ImageProcessor.Web.Caching.MemCache.Clear(System.String)">
            <summary>
            Clears the cache.
            </summary>
            <param name="regionName">
            The region name.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:ImageProcessor.Web.Caching.CacheIndexer">
            <summary>
            Represents an in memory collection of cached images whose operations are concurrent.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Caching.CacheIndexer.Get(System.String)">
            <summary>
            Gets the <see cref="T:ImageProcessor.Web.Caching.CachedImage"/> associated with the specified key.
            </summary>
            <param name="cachedPath">
            The cached path of the value to get.
            </param>
            <returns>
            The <see cref="T:ImageProcessor.Web.Caching.CachedImage"/> matching the given key if the <see cref="T:ImageProcessor.Web.Caching.CacheIndexer"/> contains an element with 
            the specified key; otherwise, null.
            </returns>
        </member>
        <member name="M:ImageProcessor.Web.Caching.CacheIndexer.Remove(System.String)">
            <summary>
            Removes the value associated with the specified key.
            </summary>
            <param name="cachedPath">
            The key of the item to remove.
            </param>
            <returns>
            true if the <see cref="T:ImageProcessor.Web.Caching.CacheIndexer"/> removes an element with 
            the specified key; otherwise, false.
            </returns>
        </member>
        <member name="M:ImageProcessor.Web.Caching.CacheIndexer.Add(ImageProcessor.Web.Caching.CachedImage,System.TimeSpan)">
            <summary>
            Adds a <see cref="T:ImageProcessor.Web.Caching.CachedImage"/> to the cache.
            </summary>
            <param name="cachedImage">
            The cached image to add.
            </param>
            <param name="expiration">
            A <see cref="T:System.TimeSpan"/> defining the sliding expiration duration, defaults to zero
            </param>
            <returns>
            The value of the item to add or get.
            </returns>
        </member>
        <member name="M:ImageProcessor.Web.Caching.CacheIndexer.Add(ImageProcessor.Web.Caching.CachedImage,System.Int32)">
            <summary>
            Adds a <see cref="T:ImageProcessor.Web.Caching.CachedImage"/> to the cache.
            </summary>
            <param name="cachedImage">
            The cached image to add.
            </param>
            <param name="expiry">
            The number of minutes to cache the image, defaults to 1.
            </param>
            <returns>
            The value of the item to add or get.
            </returns>
        </member>
        <member name="T:ImageProcessor.Web.Configuration.SettingElement">
            <summary>
            Represents a SettingElement configuration element within the configuration.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Configuration.SettingElement.Key">
            <summary>
            Gets or sets the key of the plugin setting.
            </summary>
            <value>The key of the plugin setting.</value>
        </member>
        <member name="P:ImageProcessor.Web.Configuration.SettingElement.Value">
            <summary>
            Gets or sets the value of the plugin setting.
            </summary>
            <value>The value of the plugin setting.</value>
        </member>
        <member name="T:ImageProcessor.Web.Configuration.SettingElementCollection">
            <summary>
            Represents a SettingElementCollection collection configuration element within the configuration.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Configuration.SettingElementCollection.CollectionType">
            <summary>
            Gets the type of the <see cref="T:System.Configuration.ConfigurationElementCollection"/>.
            </summary>
            <value>
            The <see cref="T:System.Configuration.ConfigurationElementCollectionType"/> of this collection.
            </value>
        </member>
        <member name="P:ImageProcessor.Web.Configuration.SettingElementCollection.ElementName">
            <summary>
            Gets the name used to identify this collection of elements in the configuration file when overridden in a derived class.
            </summary>
            <value>
            The name of the collection; otherwise, an empty string. The default is an empty string.
            </value>
        </member>
        <member name="P:ImageProcessor.Web.Configuration.SettingElementCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:ImageProcessor.Web.Config.ImageSecuritySection.SettingElement"/>
            at the specified index within the collection.
            </summary>
            <param name="index">The index at which to get the specified object.</param>
            <returns>
            The <see cref="T:ImageProcessor.Web.Config.ImageSecuritySection.SettingElement"/>
            at the specified index within the collection.
            </returns>
        </member>
        <member name="P:ImageProcessor.Web.Configuration.SettingElementCollection.Item(System.String)">
            <summary>
            Returns the setting element with the specified key.
            </summary>
            <param name="key">the key representing the element</param>
            <returns>the setting element</returns>
        </member>
        <member name="M:ImageProcessor.Web.Configuration.SettingElementCollection.ContainsKey(System.String)">
            <summary>
            Returns a value indicating whether the settings collection contains the
            given object.
            </summary>
            <param name="key">The key to identify the setting.</param>
            <returns>True if the collection contains the key; otherwise false.</returns>
        </member>
        <member name="M:ImageProcessor.Web.Configuration.SettingElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified PluginElement configuration element.
            </summary>
            <param name="element">
            The <see cref="T:System.Configuration.ConfigurationElement">ConfigurationElement</see> 
            to return the key for.
            </param>
            <returns>The element key for a specified PluginElement configuration element.</returns>
        </member>
        <member name="M:ImageProcessor.Web.Configuration.SettingElementCollection.CreateNewElement">
            <summary>
            Creates a new SettingElement configuration element.
            </summary>
            <returns>
            A new SettingElement configuration element.
            </returns>
        </member>
        <member name="T:ImageProcessor.Web.Configuration.ImageCacheSection">
            <summary>
            Represents an image cache section within a configuration file.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Configuration.ImageCacheSection.CurrentCache">
            <summary>
            Gets or sets the name of the current cache provider.
            </summary>
            <value>The name of the cache folder.</value>
        </member>
        <member name="P:ImageProcessor.Web.Configuration.ImageCacheSection.ImageCaches">
            <summary>
            Gets the <see cref="T:ImageProcessor.Web.Configuration.ImageCacheSection.CacheElementCollection"/>
            </summary>
            <value>The <see cref="T:ImageProcessor.Web.Configuration.ImageCacheSection.CacheElementCollection"/></value>
        </member>
        <member name="M:ImageProcessor.Web.Configuration.ImageCacheSection.GetConfiguration">
            <summary>
            Retrieves the cache configuration section from the current application configuration. 
            </summary>
            <returns>The cache configuration section from the current application configuration.</returns>
        </member>
        <member name="T:ImageProcessor.Web.Configuration.ImageCacheSection.CacheElement">
            <summary>
            Represents a CacheElement configuration element within the configuration.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Configuration.ImageCacheSection.CacheElement.Name">
            <summary>
            Gets or sets the name of the cache.
            </summary>
            <value>The name of the service.</value>
        </member>
        <member name="P:ImageProcessor.Web.Configuration.ImageCacheSection.CacheElement.Type">
            <summary>
            Gets or sets the type of the cache.
            </summary>
            <value>The full Type definition of the service</value>
        </member>
        <member name="P:ImageProcessor.Web.Configuration.ImageCacheSection.CacheElement.MaxDays">
            <summary>
            Gets or sets the maximum number of days to store an image in the cache.
            </summary>
            <value>The maximum number of days to store an image in the cache.</value>
            <remarks>Defaults to 365 if not set.</remarks>
        </member>
        <member name="P:ImageProcessor.Web.Configuration.ImageCacheSection.CacheElement.UseFileChangeMonitors">
            <summary>
            Gets or sets a value indicating whether the cache will apply file change monitors that can be used to invalidate the cache
            </summary>
            <value>True or False to enable or disable this setting</value>
            <remarks>
            Defaults to false, if this is set to true a file change monitor will be created for each cached file that Image Processor creates. 
            This could be useful if you want to be able to delete the cached image files in order to trigger the server cache invalidation, however
            if this setting is enabled and there are a lot of Image Processor cache files, this could end up causing some issues:
            * Performance penalties if hosting on a UNC share
            * ASP.Net app domain restarts if using FCNMode="Single" since the FCN buffer can overflow
            </remarks>
        </member>
        <member name="P:ImageProcessor.Web.Configuration.ImageCacheSection.CacheElement.BrowserMaxDays">
            <summary>
            Gets or sets the maximum number of days to store an image in the browser cache.
            </summary>
            <value>The maximum number of days to store an image in the browser cache.</value>
            <remarks>Defaults to 365 days if not set.</remarks>
        </member>
        <member name="P:ImageProcessor.Web.Configuration.ImageCacheSection.CacheElement.CachedRewritePathExpiry">
            <summary>
            Gets or sets the number of minutes to store the rewritten CDN path in the cache
            </summary>
            <value>The number of minutes to store the rewritten CDN path in the cache</value>
            <remarks>Defaults to <c>0:1:0</c> if not set.</remarks>
        </member>
        <member name="P:ImageProcessor.Web.Configuration.ImageCacheSection.CacheElement.TrimCache">
            <summary>
            Gets or sets a value indicating whether to periodically trim the cache.
            </summary>
            <remarks>
            Defaults to true.
            </remarks>
        </member>
        <member name="P:ImageProcessor.Web.Configuration.ImageCacheSection.CacheElement.FolderDepth">
            <summary>
            Gets or sets the maximum number folder levels to nest the cached images.
            </summary>
            <remarks>Defaults to 6 if not set.</remarks>
        </member>
        <member name="P:ImageProcessor.Web.Configuration.ImageCacheSection.CacheElement.Settings">
            <summary>
            Gets the <see cref="T:ImageProcessor.Web.Configuration.SettingElementCollection"/>.
            </summary>
            <value>
            The <see cref="T:ImageProcessor.Web.Configuration.SettingElementCollection"/>.
            </value>
        </member>
        <member name="T:ImageProcessor.Web.Configuration.ImageCacheSection.CacheElementCollection">
            <summary>
            Represents a collection of <see cref="T:ImageProcessor.Web.Configuration.ImageCacheSection.CacheElement"/> elements within the configuration.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Configuration.ImageCacheSection.CacheElementCollection.CollectionType">
            <summary>
            Gets the type of the <see cref="T:System.Configuration.ConfigurationElementCollection"/>.
            </summary>
            <value>
            The <see cref="T:System.Configuration.ConfigurationElementCollectionType"/> of this collection.
            </value>
        </member>
        <member name="P:ImageProcessor.Web.Configuration.ImageCacheSection.CacheElementCollection.ElementName">
            <summary>
            Gets the name used to identify this collection of elements in the configuration file when overridden in a derived class.
            </summary>
            <value>
            The name of the collection; otherwise, an empty string. The default is an empty string.
            </value>
        </member>
        <member name="P:ImageProcessor.Web.Configuration.ImageCacheSection.CacheElementCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:ImageProcessor.Web.Configuration.ImageCacheSection.CacheElement"/>
            at the specified index within the collection.
            </summary>
            <param name="index">The index at which to get the specified object.</param>
            <returns>
            The <see cref="T:ImageProcessor.Web.Configuration.ImageCacheSection.CacheElement"/>
            at the specified index within the collection.
            </returns>
        </member>
        <member name="M:ImageProcessor.Web.Configuration.ImageCacheSection.CacheElementCollection.CreateNewElement">
            <summary>
            When overridden in a derived class, creates a new <see cref="T:System.Configuration.ConfigurationElement"/>.
            </summary>
            <returns>
            A new <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Web.Configuration.ImageCacheSection.CacheElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"/> to return the key for. </param>
        </member>
        <member name="T:ImageProcessor.Web.Configuration.ImageProcessingSection">
            <summary>
            Represents an image processing section within a configuration file.
            Nested syntax adapted from <see href="http://tneustaedter.blogspot.co.uk/2011/09/how-to-create-one-or-more-nested.html"/>
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Configuration.ImageProcessingSection.PreserveExifMetaData">
            <summary>
            Gets or sets a value indicating whether to preserve exif meta data.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Configuration.ImageProcessingSection.AllowCacheBuster">
            <summary>
            Gets or sets a value indicating whether to allow known cache busters.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Configuration.ImageProcessingSection.FixGamma">
            <summary>
            Gets or sets a value indicating whether to convert images to a linear color space before
            processing.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Configuration.ImageProcessingSection.InterceptAllRequests">
            <summary>
            Gets or sets a value indicating whether to intercept all image requests including ones
            without querystring parameters.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Configuration.ImageProcessingSection.Presets">
            <summary>
            Gets the <see cref="T:ImageProcessor.Web.Config.ImageProcessingSection.PresetElementCollection"/>.
            </summary>
            <value>
            The <see cref="T:ImageProcessor.Web.Config.ImageProcessingSection.PresetElementCollection"/>.
            </value>
        </member>
        <member name="P:ImageProcessor.Web.Configuration.ImageProcessingSection.Plugins">
            <summary>
            Gets the <see cref="T:ImageProcessor.Web.Config.ImageProcessingSection.PluginElementCollection"/>.
            </summary>
            <value>
            The <see cref="T:ImageProcessor.Web.Config.ImageProcessingSection.PluginElementCollection"/>.
            </value>
        </member>
        <member name="M:ImageProcessor.Web.Configuration.ImageProcessingSection.GetConfiguration">
            <summary>
            Retrieves the processing configuration section from the current application configuration. 
            </summary>
            <returns>The processing configuration section from the current application configuration. </returns>
        </member>
        <member name="T:ImageProcessor.Web.Configuration.ImageProcessingSection.PresetElement">
            <summary>
            Represents a PresetElement configuration element within the configuration.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Configuration.ImageProcessingSection.PresetElement.Name">
            <summary>
            Gets or sets the name of the preset.
            </summary>
            <value>The name of the plugin.</value>
        </member>
        <member name="P:ImageProcessor.Web.Configuration.ImageProcessingSection.PresetElement.Value">
            <summary>
            Gets or sets the value of the preset.
            </summary>
            <value>The full Type definition of the plugin</value>
        </member>
        <member name="T:ImageProcessor.Web.Configuration.ImageProcessingSection.PresetElementCollection">
            <summary>
            Represents a PresetElementCollection collection configuration element within the configuration.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Configuration.ImageProcessingSection.PresetElementCollection.CollectionType">
            <summary>
            Gets the type of the <see cref="T:System.Configuration.ConfigurationElementCollection"/>.
            </summary>
            <value>
            The <see cref="T:System.Configuration.ConfigurationElementCollectionType"/> of this collection.
            </value>
        </member>
        <member name="P:ImageProcessor.Web.Configuration.ImageProcessingSection.PresetElementCollection.ElementName">
            <summary>
            Gets the name used to identify this collection of elements in the configuration file when overridden in a derived class.
            </summary>
            <value>
            The name of the collection; otherwise, an empty string. The default is an empty string.
            </value>
        </member>
        <member name="P:ImageProcessor.Web.Configuration.ImageProcessingSection.PresetElementCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:ImageProcessor.Web.Config.ImageProcessingSection.PresetElement"/>
            at the specified index within the collection.
            </summary>
            <param name="index">
            The index at which to get the specified object.
            </param>
            <returns>
            The <see cref="T:ImageProcessor.Web.Config.ImageProcessingSection.PresetElement"/>
            at the specified index within the collection.
            </returns>
        </member>
        <member name="M:ImageProcessor.Web.Configuration.ImageProcessingSection.PresetElementCollection.CreateNewElement">
            <summary>
            Creates a new Preset configuration element.
            </summary>
            <returns>
            A new PluginConfig configuration element.
            </returns>
        </member>
        <member name="M:ImageProcessor.Web.Configuration.ImageProcessingSection.PresetElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified PluginElement configuration element.
            </summary>
            <param name="element">
            The <see cref="T:System.Configuration.ConfigurationElement">ConfigurationElement</see> 
            to return the key for.
            </param>
            <returns>
            The element key for a specified PluginElement configuration element.
            </returns>
        </member>
        <member name="T:ImageProcessor.Web.Configuration.ImageProcessingSection.PluginElement">
            <summary>
            Represents a PluginElement configuration element within the configuration.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Configuration.ImageProcessingSection.PluginElement.Name">
            <summary>
            Gets or sets the name of the plugin file.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Configuration.ImageProcessingSection.PluginElement.Type">
            <summary>
            Gets or sets the type of the plugin file.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Configuration.ImageProcessingSection.PluginElement.Enabled">
            <summary>
            Gets or sets a value indiating whether the plugin is enabled.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Configuration.ImageProcessingSection.PluginElement.Settings">
            <summary>
            Gets the <see cref="T:ImageProcessor.Web.Config.ImageProcessingSection.SettingElementCollection"/>.
            </summary>
            <value>
            The <see cref="T:ImageProcessor.Web.Config.ImageProcessingSection.SettingElementCollection"/>.
            </value>
        </member>
        <member name="T:ImageProcessor.Web.Configuration.ImageProcessingSection.PluginElementCollection">
            <summary>
            Represents a PluginElementCollection collection configuration element within the configuration.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Configuration.ImageProcessingSection.PluginElementCollection.CollectionType">
            <summary>
            Gets the type of the <see cref="T:System.Configuration.ConfigurationElementCollection"/>.
            </summary>
            <value>
            The <see cref="T:System.Configuration.ConfigurationElementCollectionType"/> of this collection.
            </value>
        </member>
        <member name="P:ImageProcessor.Web.Configuration.ImageProcessingSection.PluginElementCollection.ElementName">
            <summary>
            Gets the name used to identify this collection of elements in the configuration file when overridden in a derived class.
            </summary>
            <value>
            The name of the collection; otherwise, an empty string. The default is an empty string.
            </value>
        </member>
        <member name="P:ImageProcessor.Web.Configuration.ImageProcessingSection.PluginElementCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:ImageProcessor.Web.Config.ImageProcessingSection.PluginElement"/>
            at the specified index within the collection.
            </summary>
            <param name="index">
            The index at which to get the specified object.
            </param>
            <returns>
            The <see cref="T:ImageProcessor.Web.Config.ImageProcessingSection.PluginElement"/>
            at the specified index within the collection.
            </returns>
        </member>
        <member name="M:ImageProcessor.Web.Configuration.ImageProcessingSection.PluginElementCollection.CreateNewElement">
            <summary>
            Creates a new Plugin configuration element.
            </summary>
            <returns>
            A new Plugin configuration element.
            </returns>
        </member>
        <member name="M:ImageProcessor.Web.Configuration.ImageProcessingSection.PluginElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified PluginElement configuration element.
            </summary>
            <param name="element">
            The <see cref="T:System.Configuration.ConfigurationElement">ConfigurationElement</see> 
            to return the key for.
            </param>
            <returns>
            The element key for a specified PluginElement configuration element.
            </returns>
        </member>
        <member name="T:ImageProcessor.Web.Configuration.ImageProcessorConfiguration">
            <summary>
            Encapsulates methods to allow the retrieval of ImageProcessor settings.
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.Configuration.ImageProcessorConfiguration.Lazy">
            <summary>
            A new instance of the <see cref="T:ImageProcessor.Web.Config.ImageProcessorConfig"/> class.
            with lazy initialization.
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.Configuration.ImageProcessorConfiguration.PresetSettings">
            <summary>
            A collection of the processing presets defined in the configuration. 
            for available plugins.
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.Configuration.ImageProcessorConfiguration.imageProcessingSection">
            <summary>
            The processing configuration section from the current application configuration. 
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.Configuration.ImageProcessorConfiguration.imageCacheSection">
            <summary>
            The cache configuration section from the current application configuration. 
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.Configuration.ImageProcessorConfiguration.imageSecuritySection">
            <summary>
            The security configuration section from the current application configuration. 
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Configuration.ImageProcessorConfiguration.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:ImageProcessor.Web.Configuration.ImageProcessorConfiguration"/> class from being created.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Configuration.ImageProcessorConfiguration.Instance">
            <summary>
            Gets the current instance of the <see cref="T:ImageProcessor.Web.Configuration.ImageProcessorConfiguration"/> class.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Configuration.ImageProcessorConfiguration.AvailableWebGraphicsProcessors">
            <summary>
            Gets the collection of available processors to run.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Configuration.ImageProcessorConfiguration.ImageServices">
            <summary>
            Gets the list of available ImageServices.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Configuration.ImageProcessorConfiguration.ImageCache">
            <summary>
            Gets the current image cache.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Configuration.ImageProcessorConfiguration.ImageCacheMaxDays">
            <summary>
            Gets the image cache max days.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Configuration.ImageProcessorConfiguration.UseFileChangeMonitors">
            <summary>
            Gets the value indicating if the disk cache will apply file change monitors that can be used to invalidate the cache
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Configuration.ImageProcessorConfiguration.BrowserCacheMaxDays">
            <summary>
            Gets the browser cache max days.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Configuration.ImageProcessorConfiguration.FolderDepth">
            <summary>
            Gets or sets the maximum number folder levels to nest the cached images.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Configuration.ImageProcessorConfiguration.TrimCache">
            <summary>
            Gets or sets a value indicating whether to periodically trim the cache.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Configuration.ImageProcessorConfiguration.ImageCacheSettings">
            <summary>
            Gets the image cache settings.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Configuration.ImageProcessorConfiguration.ImageCacheRewritePathExpiry">
            <summary>
            Gets the image cache rewrite path cache expiry.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Configuration.ImageProcessorConfiguration.PreserveExifMetaData">
            <summary>
            Gets a value indicating whether to preserve exif meta data.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Configuration.ImageProcessorConfiguration.AllowCacheBuster">
            <summary>
            Gets a value indicating whether to allow known cachebusters.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Configuration.ImageProcessorConfiguration.FixGamma">
            <summary>
            Gets a value indicating whether to convert images to a linear color space before
            processing.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Configuration.ImageProcessorConfiguration.InterceptAllRequests">
            <summary>
            Gets a value indicating whether to intercept all image requests including ones
            without querystring parameters.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Configuration.ImageProcessorConfiguration.GetPresetSettings(System.String)">
            <summary>
            Returns the processing instructions matching the preset defined in the configuration.
            </summary>
            <param name="name">
            The name of the plugin to get the settings for.
            </param>
            <returns>
            The <see cref="T:Systems.String"/> the processing instructions.
            </returns>
        </member>
        <member name="M:ImageProcessor.Web.Configuration.ImageProcessorConfiguration.GetImageSecuritySection">
            <summary>
            Retrieves the security configuration section from the current application configuration. 
            </summary>
            <returns>The security configuration section from the current application configuration. </returns>
        </member>
        <member name="M:ImageProcessor.Web.Configuration.ImageProcessorConfiguration.GetImageProcessingSection">
            <summary>
            Retrieves the processing configuration section from the current application configuration. 
            </summary>
            <returns>The processing configuration section from the current application configuration. </returns>
        </member>
        <member name="M:ImageProcessor.Web.Configuration.ImageProcessorConfiguration.GetImageCacheSection">
            <summary>
            Retrieves the caching configuration section from the current application configuration. 
            </summary>
            <returns>The caching configuration section from the current application configuration. </returns>
        </member>
        <member name="M:ImageProcessor.Web.Configuration.ImageProcessorConfiguration.CreateWebGraphicsProcessors">
            <summary>
            Creates and returns a new collection of <see cref="T:ImageProcessor.Web.Processors.IWebGraphicsProcessor"/> 
            <remarks>
            Creating the processors should be fairly cheap and better for performance than
            locking around the procesors on each request. The System.Drawing.Graphics object still does a lock but that 
            isn't used for many procesors.
            </remarks>
            </summary>
            <returns>The <see cref="T:IWebGraphicsProcessor[]"/></returns>
        </member>
        <member name="M:ImageProcessor.Web.Configuration.ImageProcessorConfiguration.LoadGraphicsProcessors">
            <summary>
            Loads graphics processors from configuration.
            </summary>
            <exception cref="T:System.TypeLoadException">
            Thrown when an <see cref="T:ImageProcessor.Web.Processors.IWebGraphicsProcessor"/> cannot be loaded.
            </exception>
        </member>
        <member name="M:ImageProcessor.Web.Configuration.ImageProcessorConfiguration.GetPluginSettings(System.String)">
            <summary>
            Returns the <see cref="T:ImageProcessor.Web.Config.ImageProcessingSection.SettingElementCollection"/> for the given plugin.
            </summary>
            <param name="name">
            The name of the plugin to get the settings for. Override settings by adding appsettings in web.config using the format 
            ImageProcessor.&lt;.plugin-name.&gt;.&lt;settingKey&gt; e.g. 'ImageProcessor.GaussianBlur.MaxSize'. 
            The key must exist in the config section for the appsetting to apply"
            </param>
            <returns>
            The <see cref="T:ImageProcessor.Web.Config.ImageProcessingSection.SettingElementCollection"/> for the given plugin.
            </returns>
        </member>
        <member name="M:ImageProcessor.Web.Configuration.ImageProcessorConfiguration.LoadImageServices">
            <summary>
            Loads image services from configuration.
            </summary>
            <exception cref="T:System.TypeLoadException">
            Thrown when an <see cref="T:ImageProcessor.Web.Services.IImageService"/> cannot be loaded.
            </exception>
        </member>
        <member name="M:ImageProcessor.Web.Configuration.ImageProcessorConfiguration.GetServiceSettings(System.String)">
            <summary>
            Returns the <see cref="T:ImageProcessor.Web.Configuration.SettingElementCollection"/> for the given plugin. 
            Override the settings using appSettings using the following format "ImageProcessor.&lt;PluginName&gt;.&lt;settingKey&gt; e.g. 'ImageProcessor.CloudImageService.Host'. The key must exist in the config section for the appsetting to apply"
            </summary>
            <param name="name">
            The name of the plugin to get the settings for.
            </param>
            <returns>
            The <see cref="T:ImageProcessor.Web.Configuration.SettingElementCollection"/> for the given plugin.
            </returns>
        </member>
        <member name="M:ImageProcessor.Web.Configuration.ImageProcessorConfiguration.GetServiceWhitelist(System.String)">
            <summary>
            Gets the whitelist of <see cref="T:System.Uri"/> for the given service.
            </summary>
            <param name="name">
            The name of the service to return the whitelist for.
            </param>
            <returns>
            The <see cref="T:System.Uri"/> array containing the whitelist.
            </returns>
        </member>
        <member name="M:ImageProcessor.Web.Configuration.ImageProcessorConfiguration.LoadImageCache">
            <summary>
            Gets the currently assigned <see cref="T:ImageProcessor.Web.Caching.IImageCache"/>.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Configuration.ImageProcessorConfiguration.OverrideDefaultSettingsWithAppSettingsValue(System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Override the default settings discovered in the config sections, with settings stored in appsettings of app.config or deployment slot settings (if available)
            This will allow the settings to be controlled per deployment slot within Microsoft Azure and similar services
            The setting must exist in the config section to be overwritten by the appconfig values
            </summary>
            <param name="defaultSettings">The list of settings discovered in config section which will be modified with settings found in appSettings</param>
            <param name="serviceOrPluginName">The name of the section, used to construct the appSetting key name</param>
        </member>
        <member name="T:ImageProcessor.Web.Configuration.ImageSecuritySection">
            <summary>
            Represents an image security section within a configuration file.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Configuration.ImageSecuritySection.CORSOrigin">
            <summary>
            Gets the <see cref="T:ImageProcessor.Web.Configuration.ImageSecuritySection.CORSOriginElement"/>
            </summary>
            <value>The <see cref="T:ImageProcessor.Web.Configuration.ImageSecuritySection.CORSOriginElement"/></value>
        </member>
        <member name="P:ImageProcessor.Web.Configuration.ImageSecuritySection.ImageServices">
            <summary>
            Gets the <see cref="T:ImageProcessor.Web.Configuration.ImageSecuritySection.ServiceElementCollection"/>
            </summary>
            <value>The <see cref="T:ImageProcessor.Web.Configuration.ImageSecuritySection.ServiceElementCollection"/></value>
        </member>
        <member name="P:ImageProcessor.Web.Configuration.ImageSecuritySection.AutoLoadServices">
            <summary>
            Gets or sets a value indicating whether to auto load services.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Configuration.ImageSecuritySection.GetConfiguration">
            <summary>
            Retrieves the security configuration section from the current application configuration. 
            </summary>
            <returns>The cache configuration section from the current application configuration.</returns>
        </member>
        <member name="T:ImageProcessor.Web.Configuration.ImageSecuritySection.ServiceElement">
            <summary>
            Represents a ServiceElement configuration element within the configuration.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Configuration.ImageSecuritySection.ServiceElement.Name">
            <summary>
            Gets or sets the name of the service.
            </summary>
            <value>The name of the service.</value>
        </member>
        <member name="P:ImageProcessor.Web.Configuration.ImageSecuritySection.ServiceElement.Prefix">
            <summary>
            Gets or sets the prefix of the service.
            </summary>
            <value>The prefix of the service.</value>
        </member>
        <member name="P:ImageProcessor.Web.Configuration.ImageSecuritySection.ServiceElement.Type">
            <summary>
            Gets or sets the type of the service.
            </summary>
            <value>The full Type definition of the service</value>
        </member>
        <member name="P:ImageProcessor.Web.Configuration.ImageSecuritySection.ServiceElement.Settings">
            <summary>
            Gets the <see cref="T:ImageProcessor.Web.Configuration.SettingElementCollection"/>.
            </summary>
            <value>
            The <see cref="T:ImageProcessor.Web.Configuration.SettingElementCollection"/>.
            </value>
        </member>
        <member name="P:ImageProcessor.Web.Configuration.ImageSecuritySection.ServiceElement.WhiteList">
            <summary>
            Gets the <see cref="T:ImageProcessor.Web.Config.ImageSecuritySection.WhiteListElementCollection"/>.
            </summary>
            <value>
            The <see cref="T:ImageProcessor.Web.Config.ImageSecuritySection.WhiteListElementCollection"/>.
            </value>
        </member>
        <member name="T:ImageProcessor.Web.Configuration.ImageSecuritySection.ServiceElementCollection">
            <summary>
            Represents a collection of <see cref="T:ImageProcessor.Web.Configuration.ImageSecuritySection.ServiceElement"/> elements within the configuration.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Configuration.ImageSecuritySection.ServiceElementCollection.CollectionType">
            <summary>
            Gets the type of the <see cref="T:System.Configuration.ConfigurationElementCollection"/>.
            </summary>
            <value>
            The <see cref="T:System.Configuration.ConfigurationElementCollectionType"/> of this collection.
            </value>
        </member>
        <member name="P:ImageProcessor.Web.Configuration.ImageSecuritySection.ServiceElementCollection.ElementName">
            <summary>
            Gets the name used to identify this collection of elements in the configuration file when overridden in a derived class.
            </summary>
            <value>
            The name of the collection; otherwise, an empty string. The default is an empty string.
            </value>
        </member>
        <member name="P:ImageProcessor.Web.Configuration.ImageSecuritySection.ServiceElementCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:ImageProcessor.Web.Config.ImageSecuritySection.ServiceElement"/>
            at the specified index within the collection.
            </summary>
            <param name="index">The index at which to get the specified object.</param>
            <returns>
            The <see cref="T:ImageProcessor.Web.Config.ImageSecuritySection.ServiceElement"/>
            at the specified index within the collection.
            </returns>
        </member>
        <member name="M:ImageProcessor.Web.Configuration.ImageSecuritySection.ServiceElementCollection.CreateNewElement">
            <summary>
            When overridden in a derived class, creates a new <see cref="T:System.Configuration.ConfigurationElement"/>.
            </summary>
            <returns>
            A new <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Web.Configuration.ImageSecuritySection.ServiceElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"/> to return the key for. </param>
        </member>
        <member name="T:ImageProcessor.Web.Configuration.ImageSecuritySection.CORSOriginElement">
            <summary>
            Represents a CORSOriginsElement configuration element within the configuration.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Configuration.ImageSecuritySection.CORSOriginElement.WhiteList">
            <summary>
            Gets the <see cref="T:ImageProcessor.Web.Config.ImageSecuritySection.WhiteListElementCollection"/>.
            </summary>
            <value>
            The <see cref="T:ImageProcessor.Web.Config.ImageSecuritySection.WhiteListElementCollection"/>.
            </value>
        </member>
        <member name="T:ImageProcessor.Web.Configuration.ImageSecuritySection.WhiteListElementCollection">
            <summary>
            Represents a whitelist collection configuration element within the configuration.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Configuration.ImageSecuritySection.WhiteListElementCollection.Item(System.Int32)">
            <summary>
            Gets or sets the whitelist item at the given index.
            </summary>
            <param name="index">The index of the whitelist item to get.</param>
            <returns>The whitelist item at the given index.</returns>
        </member>
        <member name="M:ImageProcessor.Web.Configuration.ImageSecuritySection.WhiteListElementCollection.CreateNewElement">
            <summary>
            Creates a new SafeURL configuration element.
            </summary>
            <returns>
            A new SafeURL configuration element.
            </returns>
        </member>
        <member name="M:ImageProcessor.Web.Configuration.ImageSecuritySection.WhiteListElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified whitelist configuration element.
            </summary>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement">ConfigurationElement</see> to return the key for.</param>
            <returns>The element key for a specified whitelist configuration element.</returns>
        </member>
        <member name="T:ImageProcessor.Web.Configuration.ImageSecuritySection.SafeUrl">
            <summary>
            Represents a whitelist configuration element within the configuration.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Configuration.ImageSecuritySection.SafeUrl.Url">
            <summary>
            Gets or sets the url of the white listed file.
            </summary>
            <value>The url of the white listed file.</value>
        </member>
        <member name="T:ImageProcessor.Web.Extensions.ObjectExtensions">
            <summary>
            Extensions methods for <see cref="T:System.Object"/>.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Extensions.ObjectExtensions.IsNullOrEmptyString(System.Object)">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Object"/> is null or an empty <see cref="T:System.String"/>.
            </summary>
            <param name="value">The object to test against.</param>
            <returns>True; if the value is null or an empty string; otherwise; false.</returns>
        </member>
        <member name="T:ImageProcessor.Web.Extensions.TypeInferenceExtensions">
            <summary>
            Extensions methods for <see cref="T:System.Type"/> for inferring type properties.
            Most of this code was adapted from the Entity Framework
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Extensions.TypeInferenceExtensions.IsEnumerableOfType(System.Type,System.Type)">
            <summary>
            Determines whether the specified type is an enumerable of the given argument type.
            </summary>
            <param name="type">The type.</param>
            <param name="typeArgument">The generic type argument.</param>
            <returns>
            True if the type is an enumerable of the given argument type otherwise; false.
            </returns>
        </member>
        <member name="M:ImageProcessor.Web.Extensions.TypeInferenceExtensions.IsCollectionType(System.Type)">
            <summary>
            Determines whether the specified type is a collection type.
            </summary>
            <param name="type">The type.</param>
            <returns>True if the type is a collection type otherwise; false.</returns>
        </member>
        <member name="M:ImageProcessor.Web.Extensions.TypeInferenceExtensions.IsEnumerableType(System.Type)">
            <summary>
            Determines whether the specified type is an enumerable type.
            </summary>
            <param name="type">The type.</param>
            <returns>True if the type is an enumerable type otherwise; false.</returns>
        </member>
        <member name="M:ImageProcessor.Web.Extensions.TypeInferenceExtensions.IsEnumerableOfKeyValueType(System.Type)">
            <summary>
            Determines whether the specified type is an enumerable type containing a 
            key value pair as the generic type parameter.
            <remarks>
            <see cref="M:Enumerable.FirstOrDefault"/> will throw an error when passed an
            <see cref="T:IEnumerable{KeyValuePair{,}}"/> this includes <see cref="T:Dictionary{,}"/>.
            </remarks>
            </summary>
            <param name="type">The type.</param>
            <returns>
            True if the type is an enumerable type with the generic parameter of a key/value 
            pair otherwise; false.</returns>
        </member>
        <member name="M:ImageProcessor.Web.Extensions.TypeInferenceExtensions.IsCastableEnumerableType(System.Type)">
            <summary>
            Determines whether the specified type is an enumerable type that is safe to cast
            following processing via a type converter.
            <remarks>
            This should exclude <see cref="T:string"/>, <see cref="T:Dictionary{,}"/>
            </remarks>
            </summary>
            <param name="type">The type.</param>
            <returns>True if the type is a cast-safe, enumerable type otherwise; false.</returns>
        </member>
        <member name="M:ImageProcessor.Web.Extensions.TypeInferenceExtensions.TryGetElementType(System.Type,System.Type)">
            <summary>
            Determine if the given type implements the given generic interface or derives from the given generic type,
            and if so return the element type of the collection. If the type implements the generic interface several times
            <c>null</c> will be returned.
            </summary>
            <param name="type">The type to examine. </param>
            <param name="interfaceOrBaseType"> The generic type to be queried for. </param>
            <returns> 
            <c>null</c> if <paramref name="interfaceOrBaseType"/> isn't implemented or implemented multiple times,
            otherwise the generic argument.
            </returns>
        </member>
        <member name="M:ImageProcessor.Web.Extensions.TypeInferenceExtensions.GetGenericTypeImplementations(System.Type,System.Type)">
            <summary>
            Determine if the given type implements the given generic interface or derives from the given generic type,
            and if so return the concrete types implemented.
            </summary>
            <param name="type"> The type to examine. </param>
            <param name="interfaceOrBaseType"> The generic type to be queried for. </param>
            <returns> 
            The generic types constructed from <paramref name="interfaceOrBaseType"/> and implemented by <paramref name="type"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Web.Extensions.TypeInferenceExtensions.GetBaseTypes(System.Type)">
            <summary>
            Gets the base types that the given type inherits from
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to get the base types from.</param>
            <returns>A collection of base types that the given type inherits from.</returns>
        </member>
        <member name="M:ImageProcessor.Web.Extensions.TypeInferenceExtensions.GetEnumerableType(System.Type)">
            <summary>
            Gets the type of the enumerable object
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to check.</param>
            <returns>The type of the enumerable.</returns>
        </member>
        <member name="T:ImageProcessor.Web.Extensions.TypeInitializationExtensions">
            <summary>
            Extensions methods for <see cref="T:System.Type"/> for creating instances of types faster than
            using reflection. Modified from the original class at.
            <see href="http://geekswithblogs.net/mrsteve/archive/2012/02/19/a-fast-c-sharp-extension-method-using-expression-trees-create-instance-from-type-again.aspx"/>
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Extensions.TypeInitializationExtensions.GetInstance(System.Type)">
            <summary>
            Returns an instance of the <paramref name="type"/> on which the method is invoked.
            </summary>
            <param name="type">The type on which the method was invoked.</param>
            <returns>An instance of the <paramref name="type"/>.</returns>
        </member>
        <member name="M:ImageProcessor.Web.Extensions.TypeInitializationExtensions.GetInstance``1(System.Type,``0)">
            <summary>
            Returns an instance of the <paramref name="type"/> on which the method is invoked.
            </summary>
            <typeparam name="TArg">The type of the argument to pass to the constructor.</typeparam>
            <param name="type">The type on which the method was invoked.</param>
            <param name="argument">The argument to pass to the constructor.</param>
            <returns>An instance of the given <paramref name="type"/>.</returns>
        </member>
        <member name="M:ImageProcessor.Web.Extensions.TypeInitializationExtensions.GetInstance``2(System.Type,``0,``1)">
            <summary>
            Returns an instance of the <paramref name="type"/> on which the method is invoked.
            </summary>
            <typeparam name="TArg1">The type of the first argument to pass to the constructor.</typeparam>
            <typeparam name="TArg2">The type of the second argument to pass to the constructor.</typeparam>
            <param name="type">The type on which the method was invoked.</param>
            <param name="argument1">The first argument to pass to the constructor.</param>
            <param name="argument2">The second argument to pass to the constructor.</param>
            <returns>An instance of the given <paramref name="type"/>.</returns>
        </member>
        <member name="M:ImageProcessor.Web.Extensions.TypeInitializationExtensions.GetInstance``3(System.Type,``0,``1,``2)">
            <summary>
            Returns an instance of the <paramref name="type"/> on which the method is invoked.
            </summary>
            <typeparam name="TArg1">The type of the first argument to pass to the constructor.</typeparam>
            <typeparam name="TArg2">The type of the second argument to pass to the constructor.</typeparam>
            <typeparam name="TArg3">The type of the third argument to pass to the constructor.</typeparam>
            <param name="type">The type on which the method was invoked.</param>
            <param name="argument1">The first argument to pass to the constructor.</param>
            <param name="argument2">The second argument to pass to the constructor.</param>
            <param name="argument3">The third argument to pass to the constructor.</param>
            <returns>An instance of the given <paramref name="type"/>.</returns>
        </member>
        <member name="T:ImageProcessor.Web.Extensions.TypeInitializationExtensions.InstanceCreationFactory`3">
            <summary>
            The instance creation factory for creating instances.
            </summary>
            <typeparam name="TArg1">The type of the first argument to pass to the constructor.</typeparam>
            <typeparam name="TArg2">The type of the second argument to pass to the constructor.</typeparam>
            <typeparam name="TArg3">The type of the third argument to pass to the constructor.</typeparam>
        </member>
        <member name="F:ImageProcessor.Web.Extensions.TypeInitializationExtensions.InstanceCreationFactory`3.InstanceCreationMethods">
            <summary>
            This dictionary will hold a cache of object-creation functions, keyed by the Type to create:
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Extensions.TypeInitializationExtensions.InstanceCreationFactory`3.CreateInstanceOf(System.Type,`0,`1,`2)">
            <summary>
            The create instance of.
            </summary>
            <param name="type">
            The type.
            </param>
            <param name="arg1">The first argument to pass to the constructor.</param>
            <param name="arg2">The second argument to pass to the constructor.</param>
            <param name="arg3">The third argument to pass to the constructor.</param>
            <returns>
            The <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Web.Extensions.TypeInitializationExtensions.InstanceCreationFactory`3.CacheInstanceCreationMethodIfRequired(System.Type)">
            <summary>
            Caches the instance creation method.
            </summary>
            <param name="type">
            The <see cref="T:System.Type"/> who's constructor to cache.
            </param>
        </member>
        <member name="T:ImageProcessor.Web.Extensions.TypeInitializationExtensions.TypeToIgnore">
            <summary>
            To allow for overloads with differing numbers of arguments, we flag arguments which should be
            ignored by using this Type:
            </summary>
        </member>
        <member name="T:ImageProcessor.Web.Extensions.DirectoryInfoExtensions">
            <summary>
            Provides extension methods to the <see cref="T:System.IO.DirectoryInfo"/> type.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Extensions.DirectoryInfoExtensions.SafeEnumerateDirectoriesAsync(System.IO.DirectoryInfo,System.String,System.IO.SearchOption)">
            <summary>
            Returns an enumerable collection of directory information that matches a specified search pattern and search subdirectory option.
            Will return an empty enumerable on exception. Quick and dirty but does what I need just now.
            </summary>
            <param name="directoryInfo">
            The <see cref="T:System.IO.DirectoryInfo"/> that this method extends.
            </param>
            <param name="searchPattern">
            The search string to match against the names of directories. This parameter can contain a combination of valid literal path 
            and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is "*", which returns all files.
            </param>
            <param name="searchOption">
            One of the enumeration values that specifies whether the search operation should include only 
            the current directory or all subdirectories. The default value is TopDirectoryOnly.
            </param>
            <returns>
            An enumerable collection of directories that matches searchPattern and searchOption.
            </returns>
        </member>
        <member name="M:ImageProcessor.Web.Extensions.DirectoryInfoExtensions.SafeEnumerateDirectories(System.IO.DirectoryInfo,System.String,System.IO.SearchOption)">
            <summary>
            Returns an enumerable collection of directory information that matches a specified search pattern and search subdirectory option.
            Will return an empty enumerable on exception. Quick and dirty but does what I need just now.
            </summary>
            <param name="directoryInfo">
            The <see cref="T:System.IO.DirectoryInfo"/> that this method extends.
            </param>
            <param name="searchPattern">
            The search string to match against the names of directories. This parameter can contain a combination of valid literal path 
            and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is "*", which returns all files.
            </param>
            <param name="searchOption">
            One of the enumeration values that specifies whether the search operation should include only 
            the current directory or all subdirectories. The default value is TopDirectoryOnly.
            </param>
            <returns>
            An enumerable collection of directories that matches searchPattern and searchOption.
            </returns>
        </member>
        <member name="T:ImageProcessor.Web.Extensions.StringExtensions">
            <summary>
            Encapsulates a series of time saving extension methods to the <see cref="T:System.String"/> class.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Extensions.StringExtensions.ToMD5Fingerprint(System.String)">
            <summary>
            Creates an MD5 fingerprint of the String.
            </summary>
            <param name="expression">The <see cref="T:System.String">String</see> instance that this method extends.</param>
            <returns>An MD5 fingerprint of the String.</returns>
        </member>
        <member name="M:ImageProcessor.Web.Extensions.StringExtensions.ToSHA1Fingerprint(System.String)">
            <summary>
            Creates an SHA1 fingerprint of the String.
            </summary>
            <param name="expression">The <see cref="T:System.String">String</see> instance that this method extends.</param>
            <returns>An SHA1 fingerprint of the String.</returns>
        </member>
        <member name="M:ImageProcessor.Web.Extensions.StringExtensions.ToPositiveIntegerArray(System.String)">
            <summary>
            Creates an array of integers scraped from the String.
            </summary>
            <param name="expression">The <see cref="T:System.String">String</see> instance that this method extends.</param>
            <returns>An array of integers scraped from the String.</returns>
        </member>
        <member name="M:ImageProcessor.Web.Extensions.StringExtensions.ToPositiveFloatArray(System.String)">
            <summary>
            Creates an array of floats scraped from the String.
            </summary>
            <param name="expression">The <see cref="T:System.String">String</see> instance that this method extends.</param>
            <returns>An array of floats scraped from the String.</returns>
        </member>
        <member name="M:ImageProcessor.Web.Extensions.StringExtensions.IsValidVirtualPathName(System.String)">
            <summary>
            Checks the string to see whether the value is a valid virtual path name.
            </summary>
            <param name="expression">The <see cref="T:System.String">String</see> instance that this method extends.</param>
            <returns>True if the given string is a valid virtual path name</returns>
        </member>
        <member name="M:ImageProcessor.Web.Extensions.StringExtensions.TrimStart(System.String,System.String)">
            <summary>
            Trims a specified string from the start of another string.
            </summary>
            <param name="target">The target string</param>
            <param name="trimString">The string to trim from the start</param>
            <returns>Returns the trimmed string</returns>
        </member>
        <member name="T:ImageProcessor.Web.Helpers.ProcessQueryStringEventArgs">
            <summary>
            The process querystring event arguments.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Helpers.ProcessQueryStringEventArgs.Context">
            <summary>
            Gets or sets the current request context.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Helpers.ProcessQueryStringEventArgs.Querystring">
            <summary>
            Gets or sets the querystring.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Helpers.ProcessQueryStringEventArgs.RawUrl">
            <summary>
            Gets or sets the raw http request url.
            </summary>
        </member>
        <member name="T:ImageProcessor.Web.Helpers.GenericConvertableConverter`1">
            <summary>
            The generic converter for simple types.
            </summary>
            <typeparam name="T">
            The type of object to convert.
            </typeparam>
        </member>
        <member name="M:ImageProcessor.Web.Helpers.GenericConvertableConverter`1.ConvertFrom(System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given object to the type of this converter, using the specified culture 
            information.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture. 
            </param>
            <param name="value">The <see cref="T:System.Object"/> to convert. </param>
            <param name="propertyType">The property type that the converter will convert to.</param>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
        </member>
        <member name="T:ImageProcessor.Web.Helpers.EnumConverter">
            <summary>
            The enum converter. Allows conversion of enumerations.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Helpers.EnumConverter.ConvertFrom(System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given object to the type of this converter, using the specified culture 
            information.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture. 
            </param>
            <param name="value">The <see cref="T:System.Object"/> to convert. </param>
            <param name="propertyType">The property type that the converter will convert to.</param>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
        </member>
        <member name="M:ImageProcessor.Web.Helpers.EnumConverter.GetStringArray(System.String,System.Globalization.CultureInfo)">
            <summary>
            Splits a string by comma to return an array of string values.
            </summary>
            <param name="input">
            The input string to split.
            </param>
            <param name="culture">
            A <see cref="T:System.Globalization.CultureInfo"/>. The current culture to split string by. 
            </param>
            <returns>
            The <see cref="T:System.String"/> array from the comma separated values.
            </returns>
        </member>
        <member name="T:ImageProcessor.Web.Helpers.IQueryParamConverter">
            <summary>
            Encapsulates properties and methods for converting to object to and from querystring parameters.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Helpers.IQueryParamConverter.CanConvertFrom(System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, 
            using the specified context.
            </summary>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
            <param name="sourceType">
            A <see cref="T:System.Type"/> that represents the type you want to convert from. 
            </param>
        </member>
        <member name="M:ImageProcessor.Web.Helpers.IQueryParamConverter.CanConvertTo(System.Type)">
            <summary>
            Gets a value indicating whether this converter can convert an object to the given destination type.
            </summary>
            <param name="destinationType">The destination type.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:ImageProcessor.Web.Helpers.IQueryParamConverter.ConvertFrom(System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given object to the type of this converter, using the specified culture 
            information.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture. 
            </param>
            <param name="value">The <see cref="T:System.Object"/> to convert. </param>
            <param name="propertyType">The property type that the converter will convert to.</param>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
        </member>
        <member name="M:ImageProcessor.Web.Helpers.IQueryParamConverter.ConvertTo(System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified culture 
            information.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <param name="culture">
            A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed. 
            </param>
            <param name="value">The <see cref="T:System.Object"/> to convert. </param>
            <param name="destinationType">
            The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to. 
            </param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="destinationType"/> parameter is null. 
            </exception>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. 
            </exception>
        </member>
        <member name="M:ImageProcessor.Web.Helpers.IQueryParamConverter.ConvertFromInvariantString(System.String,System.Type)">
            <summary>
            Converts the given string to the converter's native type using the invariant culture.
            </summary>
            <param name="text">The value to convert from.</param>
            <param name="propertyType">The property type that the converter will convert to.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
        </member>
        <member name="T:ImageProcessor.Web.Helpers.SizeConverter">
            <summary>
            The size converter.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Helpers.SizeConverter.ConvertFrom(System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture 
            information.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture. 
            </param>
            <param name="value">The <see cref="T:System.Object"/> to convert. </param>
            <param name="propertyType">The property type that the converter will convert to.</param>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
        </member>
        <member name="T:ImageProcessor.Web.Helpers.PointConverter">
            <summary>
            The point converter.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Helpers.PointConverter.ConvertFrom(System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture 
            information.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture. 
            </param>
            <param name="value">The <see cref="T:System.Object"/> to convert. </param>
            <param name="propertyType">The property type that the converter will convert to.</param>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
        </member>
        <member name="T:ImageProcessor.Web.Helpers.QueryParamConverter">
            <summary>
            Converts the value of an object into a different data type.
            <remarks>The code here is adapted from the TypeConverter class 
            <see href="http://referencesource.microsoft.com/#System/compmod/system/componentmodel/TypeConverter.cs"/></remarks>
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Helpers.QueryParamConverter.CanConvertFrom(System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, 
            using the specified context.
            </summary>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
            <param name="sourceType">
            A <see cref="T:System.Type"/> that represents the type you want to convert from. 
            </param>
        </member>
        <member name="M:ImageProcessor.Web.Helpers.QueryParamConverter.CanConvertTo(System.Type)">
            <summary>
            Gets a value indicating whether this converter can convert an object to the given destination type.
            </summary>
            <param name="destinationType">The destination type.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:ImageProcessor.Web.Helpers.QueryParamConverter.ConvertFrom(System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given object to the type of this converter, using the specified culture 
            information.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture. 
            </param>
            <param name="value">The <see cref="T:System.Object"/> to convert. </param>
            <param name="propertyType">The property type that the converter will convert to.</param>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
        </member>
        <member name="M:ImageProcessor.Web.Helpers.QueryParamConverter.ConvertTo(System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified culture 
            information.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <param name="culture">
            A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed. 
            </param>
            <param name="value">The <see cref="T:System.Object"/> to convert. </param>
            <param name="destinationType">
            The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to. 
            </param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="destinationType"/> parameter is null. 
            </exception>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. 
            </exception>
        </member>
        <member name="M:ImageProcessor.Web.Helpers.QueryParamConverter.ConvertFromInvariantString(System.String,System.Type)">
            <summary>
            Converts the given string to the converter's native type using the invariant culture.
            </summary>
            <param name="text">The value to convert from.</param>
            <param name="propertyType">The type to convert from.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
        </member>
        <member name="M:ImageProcessor.Web.Helpers.QueryParamConverter.GetConvertFromException(System.Object)">
            <summary>
            Gets a suitable exception to throw when a conversion cannot be performed.
            </summary>
            <param name="value">The value to convert</param>
            <returns><see cref="T:System.NotSupportedException"/></returns>
        </member>
        <member name="M:ImageProcessor.Web.Helpers.QueryParamConverter.GetConvertToException(System.Object,System.Type)">
            <summary>
            Gets a suitable exception to throw when a conversion cannot be performed.
            </summary>
            <param name="value">The value to convert</param>
            <param name="destinationType">The destination type to convert to.</param>
            <returns><see cref="T:System.NotSupportedException"/></returns>
        </member>
        <member name="T:ImageProcessor.Web.Helpers.QueryTypeDescriptor">
            <summary>
            Hold the collection of <see cref="T:ImageProcessor.Web.Helpers.IQueryParamConverter"/> converters
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.Helpers.QueryTypeDescriptor.ConverterCache">
            <summary>
            The converter cache.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Helpers.QueryTypeDescriptor.GetConverter(System.Type)">
            <summary>
            Returns an instance of the correct converter for the given type.
            </summary>
            <param name="type">The type.</param>
            <returns>
            The <see cref="T:ImageProcessor.Web.Helpers.IQueryParamConverter"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Web.Helpers.QueryTypeDescriptor.AddConverter(System.Type,System.Type)">
            <summary>
            Adds the given converter for the specified type.
            </summary>
            <param name="type">The type.</param>
            <param name="converter">The converter.</param>
            <exception cref="T:System.ArgumentException">
            Thrown if the converter does not implement <see cref="T:ImageProcessor.Web.Helpers.IQueryParamConverter"/>.
            </exception>
        </member>
        <member name="T:ImageProcessor.Web.Helpers.FontFamilyConverter">
            <summary>
            FontFamilyConverter - converter class for converting between the <see cref="T:System.Drawing.FontFamily"/>
            and <see cref="T:System.String"/> types.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Helpers.FontFamilyConverter.CanConvertFrom(System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of 
            this converter, using the specified context.
            </summary>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
            <param name="sourceType">
            A <see cref="T:System.Type"/> that represents the type you want to convert from. 
            </param>
        </member>
        <member name="M:ImageProcessor.Web.Helpers.FontFamilyConverter.CanConvertTo(System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using 
            the specified context.
            </summary>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
            <param name="destinationType">
            A <see cref="T:System.Type"/> that represents the type you want to convert to. 
            </param>
        </member>
        <member name="M:ImageProcessor.Web.Helpers.FontFamilyConverter.ConvertFrom(System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and 
            culture information.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture. 
            </param>
            <param name="value">The <see cref="T:System.Object"/> to convert. </param>
            <param name="propertyType">The property type that the converter will convert to.</param>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="M:ImageProcessor.Web.Helpers.FontFamilyConverter.ConvertTo(System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture 
            information.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <param name="culture">
            A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed. 
            </param><param name="value">The <see cref="T:System.Object"/> to convert. </param>
            <param name="destinationType">
            The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to. 
            </param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="destinationType"/> parameter is null. </exception>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="T:ImageProcessor.Web.Helpers.ColorTypeConverter">
            <summary>
            The color type converter allows conversion of system and web colors.
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.Helpers.ColorTypeConverter.HexColorRegex">
            <summary>
            The web color regex.
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.Helpers.ColorTypeConverter.NumberRegex">
            <summary>
            The number color regex.
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.Helpers.ColorTypeConverter.SystemColorTable">
            <summary>
            The system color table map.
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.Helpers.ColorTypeConverter.ColorConstantsTable">
            <summary>
            The color constants table map.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Helpers.ColorTypeConverter.SystemColors">
            <summary>
            Gets the html system color table.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Helpers.ColorTypeConverter.ColorConstants">
            <summary>
            Gets the color constants table.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Helpers.ColorTypeConverter.CanConvertFrom(System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, 
            using the specified context.
            </summary>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
            <param name="sourceType">
            A <see cref="T:System.Type"/> that represents the type you want to convert from. 
            </param>
        </member>
        <member name="M:ImageProcessor.Web.Helpers.ColorTypeConverter.ConvertFrom(System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given object to the type of this converter, using the specified culture 
            information.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture. 
            </param>
            <param name="value">The <see cref="T:System.Object"/> to convert. </param>
            <param name="propertyType">The property type that the converter will convert to.</param>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
        </member>
        <member name="M:ImageProcessor.Web.Helpers.ColorTypeConverter.ConvertTo(System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture 
            information.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <param name="culture">
            A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed. 
            </param>
            <param name="value">The <see cref="T:System.Object"/> to convert. </param>
            <param name="destinationType">
            The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to. 
            </param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="destinationType"/> parameter is null. 
            </exception>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. 
            </exception>
        </member>
        <member name="M:ImageProcessor.Web.Helpers.ColorTypeConverter.GetNamedColor(System.String)">
            <summary>
            Gets the named color from the given name
            </summary>
            <param name="name">The name of the color</param>
            <returns><see cref="T:System.Object"/></returns>
        </member>
        <member name="M:ImageProcessor.Web.Helpers.ColorTypeConverter.InitializeHtmlSystemColorTable">
            <summary>
            Initializes color table mapping system colors to known colors.
            </summary>
            <returns>The <see cref="T:System.Collections.Hashtable"/></returns>
        </member>
        <member name="M:ImageProcessor.Web.Helpers.ColorTypeConverter.InitializeColorConstantsTable">
            <summary>
            Initializes color table mapping color constants.
            </summary>
            <returns>The <see cref="T:System.Collections.Hashtable"/></returns>
        </member>
        <member name="T:ImageProcessor.Web.Helpers.QueryParamParser">
            <summary>
            The query parameter parser that converts string values to different types.
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.Helpers.QueryParamParser.Lazy">
            <summary>
            A new instance of the <see cref="T:ImageProcessor.Web.Helpers.QueryParamParser"/> class.
            with lazy initialization.
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.Helpers.QueryParamParser.TypeDefaultsCache">
            <summary>
            The cache for storing created default types.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Helpers.QueryParamParser.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:ImageProcessor.Web.Helpers.QueryParamParser"/> class from being created.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Helpers.QueryParamParser.Instance">
            <summary>
            Gets the current <see cref="T:ImageProcessor.Web.Helpers.QueryParamParser"/> instance.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Helpers.QueryParamParser.ParseValue``1(System.String,System.Globalization.CultureInfo)">
            <summary>
            Parses the given string value converting it to the given type.
            </summary>
            <param name="value">
            The <see cref="T:System.String"/> value to parse.
            </param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.
            <remarks>If not set will parse using <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/></remarks>
            </param>
            <typeparam name="T">
            The <see cref="T:System.Type"/> to convert the string to.
            </typeparam>
            <returns>
            The <typeparamref name="T"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Web.Helpers.QueryParamParser.ParseValue(System.Type,System.String,System.Globalization.CultureInfo)">
            <summary>
            Parses the given string value converting it to the given type.
            </summary>
            <param name="type">
            The <see cref="T:System.Type"/> to convert the string to.
            </param>
            <param name="value">
            The <see cref="T:System.String"/> value to parse.
            </param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.
            <remarks>If not set will parse using <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/></remarks>
            </param>
            <returns>
            The <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Web.Helpers.QueryParamParser.AddTypeConverter(System.Type,System.Type)">
            <summary>
            Adds a type converter to the parser.
            </summary>
            <param name="type">
            The <see cref="T:System.Type"/> to add a converter for.
            </param>
            <param name="converterType">
            The type of <see cref="T:ImageProcessor.Web.Helpers.IQueryParamConverter"/> to add.
            </param>
        </member>
        <member name="M:ImageProcessor.Web.Helpers.QueryParamParser.AddColorConverters">
            <summary>
            Adds color converters.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Helpers.QueryParamParser.AddFontFamilyConverters">
            <summary>
            Adds font family converters.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Helpers.QueryParamParser.AddPointConverters">
            <summary>
            Adds point converters.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Helpers.QueryParamParser.AddSizeConverters">
            <summary>
            Adds point converters.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Helpers.QueryParamParser.AddGenericConverters">
            <summary>
            Add the generic converters
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Helpers.QueryParamParser.AddListConverters">
            <summary>
            Adds a selection of default list type converters.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Helpers.QueryParamParser.AddArrayConverters">
            <summary>
            Adds a selection of default array type converters.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Helpers.QueryParamParser.GetDefaultValue(System.Type)">
            <summary>
            Returns the default value for the given type.
            </summary>
            <param name="type">
            The <see cref="T:System.Type"/> to return.
            </param>
            <returns>
            The <see cref="T:System.Object"/> representing the default value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the given <see cref="T:System.Type"/> is null.
            </exception>
        </member>
        <member name="T:ImageProcessor.Web.Helpers.GenericArrayTypeConverter`1">
            <summary>
            Converts the value of an string to and from a Array{T}.
            </summary>
            <typeparam name="T">
            The type to convert from.
            </typeparam>
        </member>
        <member name="M:ImageProcessor.Web.Helpers.GenericArrayTypeConverter`1.ConvertFrom(System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture 
            information.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture. 
            </param>
            <param name="value">The <see cref="T:System.Object"/> to convert. </param>
            <param name="propertyType">The property type that the converter will convert to.</param>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
        </member>
        <member name="T:ImageProcessor.Web.Helpers.GenericListTypeConverter`1">
            <summary>
            Converts the value of an string to and from a List{T}.
            </summary>
            <typeparam name="T">
            The type to convert from.
            </typeparam>
        </member>
        <member name="F:ImageProcessor.Web.Helpers.GenericListTypeConverter`1.typeConverter">
            <summary>
            The type converter.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Helpers.GenericListTypeConverter`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Web.Helpers.GenericListTypeConverter`1"/> class.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if no converter exists for the given type.
            </exception>
        </member>
        <member name="M:ImageProcessor.Web.Helpers.GenericListTypeConverter`1.CanConvertFrom(System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, 
            using the specified context.
            </summary>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
            <param name="sourceType">
            A <see cref="T:System.Type"/> that represents the type you want to convert from. 
            </param>
        </member>
        <member name="M:ImageProcessor.Web.Helpers.GenericListTypeConverter`1.ConvertFrom(System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given object to the type of this converter, using the specified culture 
            information.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture. 
            </param>
            <param name="value">The <see cref="T:System.Object"/> to convert. </param>
            <param name="propertyType">The property type that the converter will convert to.</param>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
        </member>
        <member name="M:ImageProcessor.Web.Helpers.GenericListTypeConverter`1.ConvertTo(System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture 
            information.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <param name="culture">
            A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed. 
            </param>
            <param name="value">The <see cref="T:System.Object"/> to convert. </param>
            <param name="destinationType">
            The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to. 
            </param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="destinationType"/> parameter is null. 
            </exception>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. 
            </exception>
        </member>
        <member name="M:ImageProcessor.Web.Helpers.GenericListTypeConverter`1.GetStringArray(System.String,System.Globalization.CultureInfo)">
            <summary>
            Splits a string by comma to return an array of string values.
            </summary>
            <param name="input">
            The input string to split.
            </param>
            <param name="culture">
            A <see cref="T:System.Globalization.CultureInfo"/>. The current culture to split string by. 
            </param>
            <returns>
            The <see cref="T:System.String"/> array from the comma separated values.
            </returns>
        </member>
        <member name="T:ImageProcessor.Web.Helpers.UrlParser">
            <summary>
            A helper class for decoding and parsing request URLs.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Helpers.UrlParser.ParseUrl(System.String,System.String,System.String@,System.String@)">
            <summary>
            Parses the given URL adjusting the request path to a value that can then be interpreted by an  image service.
            </summary>
            <param name="url">The url.</param>
            <param name="servicePrefix">The service prefix.</param>
            <param name="requestPath">The request path.</param>
            <param name="queryString">The query string.</param>
        </member>
        <member name="T:ImageProcessor.Web.Helpers.ValidatingRequestEventArgs">
            <summary>
            The validating request event args
            </summary>
            <remarks>
            This can be used by event subscribers to cancel image processing based on the information contained in the
            request, or can be used to directly manipulate the querystring parameter that will be used to process the image.
            </remarks>
        </member>
        <member name="M:ImageProcessor.Web.Helpers.ValidatingRequestEventArgs.#ctor(System.Web.HttpContextBase,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Web.Helpers.ValidatingRequestEventArgs"/> class.
            </summary>
            <param name="context">The current http context.</param>
            <param name="queryString">The query string.</param>
        </member>
        <member name="P:ImageProcessor.Web.Helpers.ValidatingRequestEventArgs.Context">
            <summary>
            Gets the current http context.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Helpers.ValidatingRequestEventArgs.QueryString">
            <summary>
            Gets or sets the query string
            </summary>
            <remarks>
            Event subscribers can directly manipulate the querystring before it's used for image processing
            </remarks>
        </member>
        <member name="T:ImageProcessor.Web.Helpers.CommonParameterParserUtility">
            <summary>
            Encapsulates methods to correctly parse querystring parameters.
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.Helpers.CommonParameterParserUtility.KnownColors">
            <summary>
            The collection of known colors.
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.Helpers.CommonParameterParserUtility.ColorRegex">
            <summary>
            The regular expression to search strings for colors.
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.Helpers.CommonParameterParserUtility.AngleRegex">
            <summary>
            The regular expression to search strings for angles.
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.Helpers.CommonParameterParserUtility.In100RangeRegex">
            <summary>
            The regular expression to search strings for values between 1 and 100.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Helpers.CommonParameterParserUtility.ParseAngle(System.String)">
            <summary>
            Returns the correct <see cref="T:System.Int32"/> containing the angle for the given string.
            </summary>
            <param name="input">
            The input string containing the value to parse.
            </param>
            <returns>
            The correct <see cref="T:System.Int32"/> containing the angle for the given string.
            </returns>
        </member>
        <member name="M:ImageProcessor.Web.Helpers.CommonParameterParserUtility.ParseColor(System.String)">
            <summary>
            Returns the correct <see cref="T:System.Drawing.Color"/> for the given string.
            </summary>
            <param name="input">
            The input string containing the value to parse.
            </param>
            <returns>
            The correct <see cref="T:System.Drawing.Color"/>
            </returns>
        </member>
        <member name="M:ImageProcessor.Web.Helpers.CommonParameterParserUtility.ParseIn100Range(System.String)">
            <summary>
            Returns the correct <see cref="T:System.Int32"/> for the given string.
            </summary>
            <param name="input">
            The input string containing the value to parse.
            </param>
            <returns>
            The correct <see cref="T:System.Int32"/> between -100 and 100.
            </returns>
        </member>
        <member name="M:ImageProcessor.Web.Helpers.CommonParameterParserUtility.BuildColorRegex">
            <summary>
            Builds a regular expression for the three main colour types.
            </summary>
            <returns>
            The <see cref="T:System.Text.RegularExpressions.Regex"/> to match colors.
            </returns>
        </member>
        <member name="T:ImageProcessor.Web.Helpers.NativeMethods">
            <summary>
            Provides access to unmanaged native methods.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Helpers.NativeMethods.LoadLibrary(System.String)">
            <summary>
            Loads the specified module into the address space of the calling process. 
            The specified module may cause other modules to be loaded.
            </summary>
            <param name="libname">
            The name of the module. This can be either a library module or 
            an executable module. 
            </param>
            <returns>If the function succeeds, the return value is a handle to the module; otherwise null.</returns>
        </member>
        <member name="M:ImageProcessor.Web.Helpers.NativeMethods.FreeLibrary(System.IntPtr)">
            <summary>
            Frees the loaded dynamic-link library (DLL) module and, if necessary, decrements its reference count. 
            When the reference count reaches zero, the module is unloaded from the address space of the calling 
            process and the handle is no longer valid.
            </summary>
            <param name="hModule">A handle to the loaded library module. 
            The LoadLibrary, LoadLibraryEx, GetModuleHandle, or GetModuleHandleEx function returns this handle.</param>
            <returns>If the function succeeds, the return value is nonzero; otherwise zero.</returns>
        </member>
        <member name="T:ImageProcessor.Web.Helpers.PostProcessingEventArgs">
            <summary>
            The post processing event arguments.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Helpers.PostProcessingEventArgs.Context">
            <summary>
            Gets or sets the current request context.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Helpers.PostProcessingEventArgs.ImageStream">
            <summary>
            Gets or sets the image stream.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Helpers.PostProcessingEventArgs.ImageExtension">
            <summary>
            Gets or sets the image extension.
            </summary>
        </member>
        <member name="T:ImageProcessor.Web.Helpers.ResourceHelpers">
            <summary>
            Provides helper methods for working with resources.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Helpers.ResourceHelpers.ResourceAsString(System.String,System.Reflection.Assembly,System.Text.Encoding)">
            <summary>
            Converts an assembly resource into a string.
            </summary>
            <param name="resource">The resource.</param>
            <param name="assembly">The assembly.</param>
            <param name="encoding">The character encoding to return the resource in.</param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="T:ImageProcessor.Web.Helpers.ImageHelpers">
            <summary>
            Contains helper method for parsing image formats.
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.Helpers.ImageHelpers.Lazy">
            <summary>
            A new instance of the <see cref="T:ImageProcessor.Web.Config.ImageProcessorConfig"/> class.
            with lazy initialization.
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.Helpers.ImageHelpers.formatProcessor">
            <summary>
            The format processor for checking extensions.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Helpers.ImageHelpers.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Web.Helpers.ImageHelpers"/> class.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Helpers.ImageHelpers.Instance">
            <summary>
            Gets the current instance of the <see cref="T:ImageProcessor.Web.Helpers.ImageHelpers"/> class.
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.Helpers.ImageHelpers.ExtensionRegexPattern">
            <summary>
            The regex pattern.
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.Helpers.ImageHelpers.FormatRegex">
            <summary>
            The image format regex.
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.Helpers.ImageHelpers.EndFormatRegex">
            <summary>
            The image format regex for matching the file format at the end of a string.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Helpers.ImageHelpers.IsValidImageExtension(System.String)">
            <summary>
            Checks a given string to check whether the value contains a valid image extension.
            </summary>
            <param name="fileName">The string containing the filename to check.</param>
            <returns>True the value contains a valid image extension, otherwise false.</returns>
        </member>
        <member name="M:ImageProcessor.Web.Helpers.ImageHelpers.GetExtension(System.String,System.String)">
            <summary>
            Returns the correct file extension for the given string input.
            <remarks>
            Falls back to jpeg if no extension is matched.
            </remarks>
            </summary>
            <param name="fullPath">The string to parse.</param>
            <param name="queryString">The querystring containing instructions.</param>
            <returns>
            The correct file extension for the given string input if it can find one; otherwise an empty string.
            </returns>
        </member>
        <member name="M:ImageProcessor.Web.Helpers.ImageHelpers.GetContentTypeForExtension(System.String)">
            <summary>
            Returns the content-type/mime-type for a given image type based on it's file extension
            </summary>
            <param name="extension">
            Can be prefixed with '.' or not (i.e. ".jpg"  or "jpg")
            </param>
            <returns>The <see cref="T:System.String"/></returns>
        </member>
        <member name="M:ImageProcessor.Web.Helpers.ImageHelpers.BuildExtensionRegexPattern">
            <summary>
            Builds a regular expression from the <see cref="T:ImageProcessor.Imaging.Formats.ISupportedImageFormat"/> type, this allows extensibility.
            </summary>
            <returns>
            The <see cref="T:System.Text.RegularExpressions.Regex"/> to match matrix filters.
            </returns>
        </member>
        <member name="T:ImageProcessor.Web.Helpers.RemoteFile">
            <summary>
            Encapsulates methods used to download files from a website address.
            </summary>
            <remarks>
            <para>
            The purpose of this class is so there's one core way of downloading remote files with url[s] that are from
            outside users. There's various areas in application where an attacker could supply an external url to the server
            and tie up resources.
            </para>
            For example, the ImageProcessingModule accepts off-server addresses as a path. An attacker could, for instance, pass the url
            to a file that's a few gigs in size, causing the server to get out-of-memory exceptions or some other errors. An attacker
            could also use this same method to use one application instance to hammer another site by, again, passing an off-server
            address of the victims site to the ImageProcessingModule.
            This class will not throw an exception if the Uri supplied points to a resource local to the running application instance.
            <para>
            There shouldn't be any security issues there, as the internal WebRequest instance is still calling it remotely.
            Any local files that shouldn't be accessed by this won't be allowed by the remote call.
            </para>
            Adapted from <see href="http://blogengine.codeplex.com">BlogEngine.Net</see>
            </remarks>
        </member>
        <member name="F:ImageProcessor.Web.Helpers.RemoteFile.maxDownloadSize">
            <summary>
            The maximum allowable download size in bytes.
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.Helpers.RemoteFile.timeoutLength">
            <summary>
            The length of time, in milliseconds, that a remote file download attempt can last before timing out.
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.Helpers.RemoteFile.webRequest">
            <summary>
            The <see cref="T:System.Net.WebResponse">WebResponse</see> object used internally for this RemoteFile instance.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Helpers.RemoteFile.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Web.Helpers.RemoteFile">RemoteFile</see> class.
            </summary>
            <param name="filePath">The url of the file to be downloaded.</param>
        </member>
        <member name="P:ImageProcessor.Web.Helpers.RemoteFile.Uri">
            <summary>
            Gets the Uri of the remote file being downloaded.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Helpers.RemoteFile.TimeoutLength">
            <summary>
            Gets or sets the length of time, in milliseconds, that a remote file download attempt can
            last before timing out.
            <remarks>
            <para>
            This value can only be set if the instance is supposed to ignore the remote download settings set
            in the current application instance.
            </para>
            <para>
            Set this value to 0 if there should be no timeout.
            </para>
            </remarks>
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Helpers.RemoteFile.MaxDownloadSize">
            <summary>
            Gets or sets the maximum download size, in bytes, that a remote file download attempt can be.
            <remarks>
            <para>
            This value can only be set if the instance is supposed to ignore the remote download settings set
            in the current application instance.
            </para>
            <para>
            Set this value to 0 if there should be no max bytes.
            </para>
            </remarks>
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Helpers.RemoteFile.UserAgent">
            <summary>
            Gets or sets the UserAgent header to be passed when requesting the remote file
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Helpers.RemoteFile.GetWebResponseAsync">
            <summary>
            Returns the <see cref="T:System.Net.WebResponse">WebResponse</see> used to download this file.
            <remarks>
            <para>
            This method is meant for outside users who need specific access to the WebResponse this class
            generates. They're responsible for disposing of it.
            </para>
            </remarks>
            </summary>
            <returns>The <see cref="T:System.Net.WebResponse">WebResponse</see> used to download this file.</returns>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Web.Helpers.RemoteFile.GetWebRequest">
            <summary>
            Creates the WebRequest object used internally for this RemoteFile instance.
            </summary>
            <returns>
            <para>
            The WebRequest should not be passed outside of this instance, as it will allow tampering. Anyone
            that needs more fine control over the downloading process should probably be using the WebRequest
            class on its own.
            </para>
            </returns>
        </member>
        <member name="T:ImageProcessor.Web.Processors.DetectEdges">
            <summary>
            Produces an image with the detected edges highlighted.
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.Processors.DetectEdges.QueryRegex">
            <summary>
            The regular expression to search strings for.
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.Processors.DetectEdges.detectors">
            <summary>
            The edge detectors.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Processors.DetectEdges.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Web.Processors.DetectEdges"/> class.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.DetectEdges.RegexPattern">
            <summary>
            Gets the regular expression to search strings for.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.DetectEdges.SortOrder">
            <summary>
            Gets the order in which this processor is to be used in a chain.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.DetectEdges.Processor">
            <summary>
            Gets the processor.
            </summary>
            <value>
            The processor.
            </value>
        </member>
        <member name="M:ImageProcessor.Web.Processors.DetectEdges.MatchRegexIndex(System.String)">
            <summary>
            The position in the original string where the first character of the captured substring was found.
            </summary>
            <param name="queryString">
            The query string to search.
            </param>
            <returns>
            The zero-based starting position in the original string where the captured substring was found.
            </returns>
        </member>
        <member name="M:ImageProcessor.Web.Processors.DetectEdges.BuildRegex">
            <summary>
            Builds a regular expression from the <see cref="T:ImageProcessor.Imaging.Filters.EdgeDetection.IEdgeFilter"/> type, this allows extensibility.
            </summary>
            <returns>
            The <see cref="T:System.Text.RegularExpressions.Regex"/> to match matrix filters.
            </returns>
        </member>
        <member name="T:ImageProcessor.Web.Processors.EntropyCrop">
            <summary>
            Performs a crop on an image to the area of greatest entropy.
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.Processors.EntropyCrop.QueryRegex">
            <summary>
            The regular expression to search strings for.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Processors.EntropyCrop.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Web.Processors.EntropyCrop"/> class.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.EntropyCrop.RegexPattern">
            <summary>
            Gets the regular expression to search strings for.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.EntropyCrop.SortOrder">
            <summary>
            Gets the order in which this processor is to be used in a chain.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.EntropyCrop.Processor">
            <summary>
            Gets the associated graphics processor.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Processors.EntropyCrop.MatchRegexIndex(System.String)">
            <summary>
            The position in the original string where the first character of the captured substring was found.
            </summary>
            <param name="queryString">The query string to search.</param>
            <returns>
            The zero-based starting position in the original string where the captured substring was found.
            </returns>
        </member>
        <member name="T:ImageProcessor.Web.Processors.Gamma">
            <summary>
            Encapsulates methods to change the alpha component of the image to effect its luminance.
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.Processors.Gamma.QueryRegex">
            <summary>
            The regular expression to search strings for.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Processors.Gamma.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Web.Processors.Gamma"/> class.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.Gamma.RegexPattern">
            <summary>
            Gets the regular expression to search strings for.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.Gamma.SortOrder">
            <summary>
            Gets the order in which this processor is to be used in a chain.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.Gamma.Processor">
            <summary>
            Gets the associated graphics processor.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Processors.Gamma.MatchRegexIndex(System.String)">
            <summary>
            The position in the original string where the first character of the captured substring was found.
            </summary>
            <param name="queryString">
            The query string to search.
            </param>
            <returns>
            The zero-based starting position in the original string where the captured substring was found.
            </returns>
        </member>
        <member name="T:ImageProcessor.Web.Processors.Halftone">
            <summary>
            The halftone processor applies a classical CMYK halftone to the given image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.Processors.Halftone.QueryRegex">
            <summary>
            The regular expression to search strings for.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Processors.Halftone.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Web.Processors.Halftone"/> class.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.Halftone.RegexPattern">
            <summary>
            Gets the regular expression to search strings for.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.Halftone.SortOrder">
            <summary>
            Gets the order in which this processor is to be used in a chain.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.Halftone.Processor">
            <summary>
            Gets the associated graphics processor.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Processors.Halftone.MatchRegexIndex(System.String)">
            <summary>
            The position in the original string where the first character of the captured substring was found.
            </summary>
            <param name="queryString">The query string to search.</param>
            <returns>
            The zero-based starting position in the original string where the captured substring was found.
            </returns>
        </member>
        <member name="T:ImageProcessor.Web.Processors.Hue">
            <summary>
            Encapsulates methods to adjust the hue component of an image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.Processors.Hue.QueryRegex">
            <summary>
            The regular expression to search strings for.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Processors.Hue.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Web.Processors.Hue"/> class.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.Hue.RegexPattern">
            <summary>
            Gets the regular expression to search strings for.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.Hue.SortOrder">
            <summary>
            Gets the order in which this processor is to be used in a chain.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.Hue.Processor">
            <summary>
            Gets the associated graphics processor.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Processors.Hue.MatchRegexIndex(System.String)">
            <summary>
            The position in the original string where the first character of the captured substring was found.
            </summary>
            <param name="queryString">The query string to search.</param>
            <returns>
            The zero-based starting position in the original string where the captured substring was found.
            </returns>
        </member>
        <member name="T:ImageProcessor.Web.Processors.Mask">
            <summary>
            Applies a mask to the given image. If the mask is not the same size as the image
            it will be centered against the image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.Processors.Mask.QueryRegex">
            <summary>
            The regular expression to search strings for.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Processors.Mask.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Web.Processors.Mask"/> class.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.Mask.RegexPattern">
            <summary>
            Gets the regular expression to search strings for.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.Mask.SortOrder">
            <summary>
            Gets the order in which this processor is to be used in a chain.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.Mask.Processor">
            <summary>
            Gets the associated graphics processor.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Processors.Mask.MatchRegexIndex(System.String)">
            <summary>
            The position in the original string where the first character of the captured substring was found.
            </summary>
            <param name="queryString">The query string to search.</param>
            <returns>
            The zero-based starting position in the original string where the captured substring was found.
            </returns>
        </member>
        <member name="M:ImageProcessor.Web.Processors.Mask.ParseImage(System.String)">
            <summary>
            Returns an image from the given input path.
            </summary>
            <param name="input">
            The input containing the value to parse.
            </param>
            <returns>
            The <see cref="T:System.Drawing.Image"/> representing the given image path.
            </returns>
        </member>
        <member name="T:ImageProcessor.Web.Processors.Background">
            <summary>
            Adds an image background to the current image. 
            If the background is larger than the image it will be scaled to match the image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.Processors.Background.QueryRegex">
            <summary>
            The regular expression to search strings for.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Processors.Background.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Web.Processors.Background"/> class.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.Background.RegexPattern">
            <summary>
            Gets the regular expression to search strings for.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.Background.SortOrder">
            <summary>
            Gets the order in which this processor is to be used in a chain.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.Background.Processor">
            <summary>
            Gets the associated graphics processor.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Processors.Background.MatchRegexIndex(System.String)">
            <summary>
            The position in the original string where the first character of the captured substring was found.
            </summary>
            <param name="queryString">The query string to search.</param>
            <returns>
            The zero-based starting position in the original string where the captured substring was found.
            </returns>
        </member>
        <member name="M:ImageProcessor.Web.Processors.Background.ParseImage(System.String)">
            <summary>
            Returns an image from the given input path.
            </summary>
            <param name="input">
            The input containing the value to parse.
            </param>
            <returns>
            The <see cref="T:System.Drawing.Image"/> representing the given image path.
            </returns>
        </member>
        <member name="T:ImageProcessor.Web.Processors.Overlay">
            <summary>
            Adds an image overlay to the current image. 
            If the overlay is larger than the image it will be scaled to match the image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.Processors.Overlay.QueryRegex">
            <summary>
            The regular expression to search strings for.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Processors.Overlay.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Web.Processors.Overlay"/> class.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.Overlay.RegexPattern">
            <summary>
            Gets the regular expression to search strings for.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.Overlay.SortOrder">
            <summary>
            Gets the order in which this processor is to be used in a chain.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.Overlay.Processor">
            <summary>
            Gets the associated graphics processor.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Processors.Overlay.MatchRegexIndex(System.String)">
            <summary>
            The position in the original string where the first character of the captured substring was found.
            </summary>
            <param name="queryString">The query string to search.</param>
            <returns>
            The zero-based starting position in the original string where the captured substring was found.
            </returns>
        </member>
        <member name="M:ImageProcessor.Web.Processors.Overlay.ParseImage(System.String)">
            <summary>
            Returns an image from the given input path.
            </summary>
            <param name="input">
            The input containing the value to parse.
            </param>
            <returns>
            The <see cref="T:System.Drawing.Image"/> representing the given image path.
            </returns>
        </member>
        <member name="T:ImageProcessor.Web.Processors.Pixelate">
            <summary>
            Encapsulates methods to pixelate an image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.Processors.Pixelate.QueryRegex">
            <summary>
            The regular expression to search strings for.
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.Processors.Pixelate.PixelRegex">
            <summary>
            The pixel regex.
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.Processors.Pixelate.RectangleRegex">
            <summary>
            The rectangle regex.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Processors.Pixelate.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Web.Processors.Pixelate"/> class.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.Pixelate.RegexPattern">
            <summary>
            Gets the regular expression to search strings for.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.Pixelate.SortOrder">
            <summary>
            Gets the order in which this processor is to be used in a chain.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.Pixelate.Processor">
            <summary>
            Gets the associated graphics processor.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Processors.Pixelate.MatchRegexIndex(System.String)">
            <summary>
            The position in the original string where the first character of the captured substring was found.
            </summary>
            <param name="queryString">The query string to search.</param>
            <returns>
            The zero-based starting position in the original string where the captured substring was found.
            </returns>
        </member>
        <member name="M:ImageProcessor.Web.Processors.Pixelate.ParseSize(System.String)">
            <summary>
            Returns the correct size of pixels.
            </summary>
            <param name="input">
            The input containing the value to parse.
            </param>
            <returns>
            The <see cref="T:System.Int32"/> representing the pixel size.
            </returns>
        </member>
        <member name="M:ImageProcessor.Web.Processors.Pixelate.ParseRectangle(System.String)">
            <summary>
            Returns the correct <see cref="T:System.Nullable`1"/> for the given string.
            </summary>
            <param name="input">
            The input string containing the value to parse.
            </param>
            <returns>
            The correct <see cref="T:System.Nullable`1"/>
            </returns>
        </member>
        <member name="T:ImageProcessor.Web.Processors.ReplaceColor">
            <summary>
            Encapsulates methods allowing the replacement of a color within an image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.Processors.ReplaceColor.QueryRegex">
            <summary>
            The regular expression to search strings for.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Processors.ReplaceColor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Web.Processors.ReplaceColor"/> class.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.ReplaceColor.RegexPattern">
            <summary>
            Gets the regular expression to search strings for.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.ReplaceColor.SortOrder">
            <summary>
            Gets the order in which this processor is to be used in a chain.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.ReplaceColor.Processor">
            <summary>
            Gets the associated graphics processor.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Processors.ReplaceColor.MatchRegexIndex(System.String)">
            <summary>
            The position in the original string where the first character of the captured substring was found.
            </summary>
            <param name="queryString">The query string to search.</param>
            <returns>
            The zero-based starting position in the original string where the captured substring was found.
            </returns>
        </member>
        <member name="T:ImageProcessor.Web.Processors.RotateBounded">
            <summary>
            Encapsulates methods to rotate an image without expanding the canvas.
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.Processors.RotateBounded.QueryRegex">
            <summary>
            The regular expression to search strings for.
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.Processors.RotateBounded.BoundRegex">
            <summary>
            The regular expression to search for.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Processors.RotateBounded.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Web.Processors.RotateBounded"/> class.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.RotateBounded.RegexPattern">
            <summary>
            Gets the regular expression to search strings for.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.RotateBounded.SortOrder">
            <summary>
            Gets the order in which this processor is to be used in a chain.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.RotateBounded.Processor">
            <summary>
            Gets the associated graphics processor.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Processors.RotateBounded.MatchRegexIndex(System.String)">
            <summary>
            The position in the original string where the first character of the captured substring was found.
            </summary>
            <param name="queryString">
            The query string to search.
            </param>
            <returns>
            The zero-based starting position in the original string where the captured substring was found.
            </returns>
        </member>
        <member name="T:ImageProcessor.Web.Processors.Alpha">
            <summary>
            Encapsulates methods to change the alpha component of the image to effect its transparency.
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.Processors.Alpha.QueryRegex">
            <summary>
            The regular expression to search strings for.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Processors.Alpha.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Web.Processors.Alpha"/> class.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.Alpha.RegexPattern">
            <summary>
            Gets the regular expression to search strings for.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.Alpha.SortOrder">
            <summary>
            Gets the order in which this processor is to be used in a chain.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.Alpha.Processor">
            <summary>
            Gets the associated graphics processor.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Processors.Alpha.MatchRegexIndex(System.String)">
            <summary>
            The position in the original string where the first character of the captured substring was found.
            </summary>
            <param name="queryString">The query string to search.</param>
            <returns>
            The zero-based starting position in the original string where the captured substring was found.
            </returns>
        </member>
        <member name="T:ImageProcessor.Web.Processors.AutoRotate">
            <summary>
            Performs auto-rotation to ensure that EXIF defined rotation is reflected in 
            the final image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.Processors.AutoRotate.QueryRegex">
            <summary>
            The regular expression to search strings for.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Processors.AutoRotate.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Web.Processors.AutoRotate"/> class.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.AutoRotate.RegexPattern">
            <summary>
            Gets the regular expression to search strings for.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.AutoRotate.SortOrder">
            <summary>
            Gets the order in which this processor is to be used in a chain.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.AutoRotate.Processor">
            <summary>
            Gets the associated graphics processor.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Processors.AutoRotate.MatchRegexIndex(System.String)">
            <summary>
            The position in the original string where the first character of the captured substring was found.
            </summary>
            <param name="queryString">
            The query string to search.
            </param>
            <returns>
            The zero-based starting position in the original string where the captured substring was found.
            </returns>
        </member>
        <member name="T:ImageProcessor.Web.Processors.BackgroundColor">
            <summary>
            Changes the background color of an image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.Processors.BackgroundColor.QueryRegex">
            <summary>
            The regular expression to search strings for.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Processors.BackgroundColor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Web.Processors.BackgroundColor"/> class.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.BackgroundColor.RegexPattern">
            <summary>
            Gets the regular expression to search strings for.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.BackgroundColor.SortOrder">
            <summary>
            Gets the order in which this processor is to be used in a chain.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.BackgroundColor.Processor">
            <summary>
            Gets the associated graphics processor.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Processors.BackgroundColor.MatchRegexIndex(System.String)">
            <summary>
            The position in the original string where the first character of the captured substring was found.
            </summary>
            <param name="queryString">The query string to search.</param>
            <returns>
            The zero-based starting position in the original string where the captured substring was found.
            </returns>
        </member>
        <member name="T:ImageProcessor.Web.Processors.Brightness">
            <summary>
            Encapsulates methods to change the brightness component of the image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.Processors.Brightness.QueryRegex">
            <summary>
            The regular expression to search strings for.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Processors.Brightness.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Web.Processors.Brightness"/> class.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.Brightness.RegexPattern">
            <summary>
            Gets the regular expression to search strings for.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.Brightness.SortOrder">
            <summary>
            Gets the order in which this processor is to be used in a chain.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.Brightness.Processor">
            <summary>
            Gets the associated graphics processor.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Processors.Brightness.MatchRegexIndex(System.String)">
            <summary>
            The position in the original string where the first character of the captured substring was found.
            </summary>
            <param name="queryString">The query string to search.</param>
            <returns>
            The zero-based starting position in the original string where the captured substring was found.
            </returns>
        </member>
        <member name="T:ImageProcessor.Web.Processors.Contrast">
            <summary>
            Encapsulates methods to change the contrast component of the image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.Processors.Contrast.QueryRegex">
            <summary>
            The regular expression to search strings for.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Processors.Contrast.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Web.Processors.Contrast"/> class.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.Contrast.RegexPattern">
            <summary>
            Gets the regular expression to search strings for.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.Contrast.SortOrder">
            <summary>
            Gets the order in which this processor is to be used in a chain.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.Contrast.Processor">
            <summary>
            Gets the associated graphics processor.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Processors.Contrast.MatchRegexIndex(System.String)">
            <summary>
            The position in the original string where the first character of the captured substring was found.
            </summary>
            <param name="queryString">The query string to search.</param>
            <returns>
            The zero-based starting position in the original string where the captured substring was found.
            </returns>
        </member>
        <member name="T:ImageProcessor.Web.Processors.Crop">
            <summary>
            Crops an image to the given directions.
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.Processors.Crop.QueryRegex">
            <summary>
            The regular expression to search strings for.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Processors.Crop.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Web.Processors.Crop"/> class.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.Crop.RegexPattern">
            <summary>
            Gets the regular expression to search strings for.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.Crop.SortOrder">
            <summary>
            Gets the order in which this processor is to be used in a chain.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.Crop.Processor">
            <summary>
            Gets the associated graphics processor.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Processors.Crop.MatchRegexIndex(System.String)">
            <summary>
            The position in the original string where the first character of the captured substring was found.
            </summary>
            <param name="queryString">
            The query string to search.
            </param>
            <returns>
            The zero-based starting position in the original string where the captured substring was found.
            </returns>
        </member>
        <member name="T:ImageProcessor.Web.Processors.Filter">
            <summary>
            Encapsulates methods with which to add filters to an image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.Processors.Filter.QueryRegex">
            <summary>
            The regular expression to search strings for.
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.Processors.Filter.FilterCache">
            <summary>
            The filter cache.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Processors.Filter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Web.Processors.Filter"/> class.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.Filter.RegexPattern">
            <summary>
            Gets the regular expression to search strings for.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.Filter.SortOrder">
            <summary>
            Gets the order in which this processor is to be used in a chain.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.Filter.Processor">
            <summary>
            Gets the processor.
            </summary>
            <value>
            The processor.
            </value>
        </member>
        <member name="M:ImageProcessor.Web.Processors.Filter.MatchRegexIndex(System.String)">
            <summary>
            The position in the original string where the first character of the captured substring was found.
            </summary>
            <param name="queryString">
            The query string to search.
            </param>
            <returns>
            The zero-based starting position in the original string where the captured substring was found.
            </returns>
        </member>
        <member name="M:ImageProcessor.Web.Processors.Filter.BuildRegex">
            <summary>
            Builds a regular expression from the <see cref="T:ImageProcessor.Imaging.Filters.Photo.MatrixFilters"/> type, this allows extensibility.
            </summary>
            <returns>
            The <see cref="T:System.Text.RegularExpressions.Regex"/> to match matrix filters.
            </returns>
        </member>
        <member name="M:ImageProcessor.Web.Processors.Filter.ParseFilter(System.String)">
            <summary>
            Parses the input string to return the correct <see cref="T:ImageProcessor.Imaging.Filters.Photo.IMatrixFilter"/>.
            </summary>
            <param name="identifier">
            The identifier.
            </param>
            <returns>
            The <see cref="T:ImageProcessor.Imaging.Filters.Photo.IMatrixFilter"/>.
            </returns>
        </member>
        <member name="T:ImageProcessor.Web.Processors.Flip">
            <summary>
            Flips an image horizontally or vertically.
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.Processors.Flip.QueryRegex">
            <summary>
            The regular expression to search strings for.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Processors.Flip.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Web.Processors.Flip"/> class.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.Flip.RegexPattern">
            <summary>
            Gets the regular expression to search strings for.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.Flip.SortOrder">
            <summary>
            Gets the order in which this processor is to be used in a chain.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.Flip.Processor">
            <summary>
            Gets the associated graphics processor.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Processors.Flip.MatchRegexIndex(System.String)">
            <summary>
            The position in the original string where the first character of the captured substring was found.
            </summary>
            <param name="queryString">
            The query string to search.
            </param>
            <returns>
            The zero-based starting position in the original string where the captured substring was found.
            </returns>
        </member>
        <member name="T:ImageProcessor.Web.Processors.Format">
            <summary>
            Sets the output of the image to a specific format.
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.Processors.Format.QueryRegex">
            <summary>
            The regular expression to search strings for.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Processors.Format.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Web.Processors.Format"/> class.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.Format.RegexPattern">
            <summary>
            Gets the regular expression to search strings for.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.Format.SortOrder">
            <summary>
            Gets the order in which this processor is to be used in a chain.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.Format.Processor">
            <summary>
            Gets the associated graphics processor.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Processors.Format.MatchRegexIndex(System.String)">
            <summary>
            The position in the original string where the first character of the captured substring was found.
            </summary>
            <param name="queryString">
            The query string to search.
            </param>
            <returns>
            The zero-based starting position in the original string where the captured substring was found.
            </returns>
        </member>
        <member name="M:ImageProcessor.Web.Processors.Format.BuildRegex">
            <summary>
            Builds a regular expression from the <see cref="T:ImageProcessor.Imaging.Formats.ISupportedImageFormat"/> type, this allows extensibility.
            </summary>
            <returns>
            The <see cref="T:System.Text.RegularExpressions.Regex"/> to match matrix filters.
            </returns>
        </member>
        <member name="M:ImageProcessor.Web.Processors.Format.ParseFormat(System.String)">
            <summary>
            Parses the input string to return the correct <see cref="T:ImageProcessor.Imaging.Formats.ISupportedImageFormat"/>.
            </summary>
            <param name="identifier">
            The identifier.
            </param>
            <returns>
            The <see cref="T:ImageProcessor.Imaging.Formats.ISupportedImageFormat"/>.
            </returns>
        </member>
        <member name="T:ImageProcessor.Web.Processors.GaussianSharpen">
            <summary>
            Applies a Gaussian sharpen to the image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.Processors.GaussianSharpen.QueryRegex">
            <summary>
            The regular expression to search strings for.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Processors.GaussianSharpen.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Web.Processors.GaussianSharpen"/> class.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.GaussianSharpen.RegexPattern">
            <summary>
            Gets the regular expression to search strings for.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.GaussianSharpen.SortOrder">
            <summary>
            Gets the order in which this processor is to be used in a chain.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.GaussianSharpen.Processor">
            <summary>
            Gets the associated graphics processor.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Processors.GaussianSharpen.MatchRegexIndex(System.String)">
            <summary>
            The position in the original string where the first character of the captured substring was found.
            </summary>
            <param name="queryString">
            The query string to search.
            </param>
            <returns>
            The zero-based starting position in the original string where the captured substring was found.
            </returns>
        </member>
        <member name="T:ImageProcessor.Web.Processors.GaussianBlur">
            <summary>
            Applies a Gaussian blur to the image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.Processors.GaussianBlur.QueryRegex">
            <summary>
            The regular expression to search strings for.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Processors.GaussianBlur.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Web.Processors.GaussianBlur"/> class.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.GaussianBlur.RegexPattern">
            <summary>
            Gets the regular expression to search strings for.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.GaussianBlur.SortOrder">
            <summary>
            Gets the order in which this processor is to be used in a chain.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.GaussianBlur.Processor">
            <summary>
            Gets the associated graphics processor.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Processors.GaussianBlur.MatchRegexIndex(System.String)">
            <summary>
            The position in the original string where the first character of the captured substring was found.
            </summary>
            <param name="queryString">
            The query string to search.
            </param>
            <returns>
            The zero-based starting position in the original string where the captured substring was found.
            </returns>
        </member>
        <member name="T:ImageProcessor.Web.Processors.IWebGraphicsProcessor">
            <summary>
            Defines properties and methods for ImageProcessor.Web Plugins.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.IWebGraphicsProcessor.RegexPattern">
            <summary>
            Gets the regular expression to search strings for.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.IWebGraphicsProcessor.SortOrder">
            <summary>
            Gets the order in which this processor is to be used in a chain.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.IWebGraphicsProcessor.Processor">
            <summary>
            Gets the associated graphics processor.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Processors.IWebGraphicsProcessor.MatchRegexIndex(System.String)">
            <summary>
            The position in the original string where the first character of the captured substring was found.
            </summary>
            <param name="queryString">
            The query string to search.
            </param>
            <returns>
            The zero-based starting position in the original string where the captured substring was found.
            </returns>
        </member>
        <member name="T:ImageProcessor.Web.Processors.Quality">
            <summary>
            Encapsulates methods to change the quality component of the image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.Processors.Quality.QueryRegex">
            <summary>
            The regular expression to search strings for.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Processors.Quality.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Web.Processors.Quality"/> class.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.Quality.RegexPattern">
            <summary>
            Gets the regular expression to search strings for.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.Quality.SortOrder">
            <summary>
            Gets the order in which this processor is to be used in a chain.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.Quality.Processor">
            <summary>
            Gets the associated graphics processor.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Processors.Quality.MatchRegexIndex(System.String)">
            <summary>
            The position in the original string where the first character of the captured substring was found.
            </summary>
            <param name="queryString">The query string to search.</param>
            <returns>
            The zero-based starting position in the original string where the captured substring was found.
            </returns>
        </member>
        <member name="T:ImageProcessor.Web.Processors.Resize">
            <summary>
            Resizes an image to the given dimensions.
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.Processors.Resize.QueryRegex">
            <summary>
            The regular expression to search strings for.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Processors.Resize.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Web.Processors.Resize"/> class.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.Resize.RegexPattern">
            <summary>
            Gets the regular expression to search strings for.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.Resize.SortOrder">
            <summary>
            Gets the order in which this processor is to be used in a chain.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.Resize.Processor">
            <summary>
            Gets the associated graphics processor.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Processors.Resize.MatchRegexIndex(System.String)">
            <summary>
            The position in the original string where the first character of the captured substring was found.
            </summary>
            <param name="queryString">
            The query string to search.
            </param>
            <returns>
            The zero-based starting position in the original string where the captured substring was found.
            </returns>
        </member>
        <member name="M:ImageProcessor.Web.Processors.Resize.ParseSize(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Returns the correct <see cref="T:System.Drawing.Size"/> for the given query collection.
            </summary>
            <param name="queryCollection">
            The <see cref="T:System.Collections.Specialized.NameValueCollection"/> containing the query parameters to parse.
            </param>
            <returns>
            The <see cref="T:System.Drawing.Size"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Web.Processors.Resize.ParseRestrictions(System.String)">
            <summary>
            Returns a <see cref="T:System.Collections.Generic.List`1"/> of sizes to restrict resizing to.
            </summary>
            <param name="input">
            The input.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.List`1"/> to restrict resizing to.
            </returns>
        </member>
        <member name="T:ImageProcessor.Web.Processors.Rotate">
            <summary>
            Encapsulates methods to rotate an image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.Processors.Rotate.QueryRegex">
            <summary>
            The regular expression to search strings for.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Processors.Rotate.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Web.Processors.Rotate"/> class.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.Rotate.RegexPattern">
            <summary>
            Gets the regular expression to search strings for.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.Rotate.SortOrder">
            <summary>
            Gets the order in which this processor is to be used in a chain.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.Rotate.Processor">
            <summary>
            Gets the associated graphics processor.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Processors.Rotate.MatchRegexIndex(System.String)">
            <summary>
            The position in the original string where the first character of the captured substring was found.
            </summary>
            <param name="queryString">
            The query string to search.
            </param>
            <returns>
            The zero-based starting position in the original string where the captured substring was found.
            </returns>
        </member>
        <member name="T:ImageProcessor.Web.Processors.RoundedCorners">
            <summary>
            Encapsulates methods to add rounded corners to an image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.Processors.RoundedCorners.QueryRegex">
            <summary>
            The regular expression to search strings for.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Processors.RoundedCorners.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Web.Processors.RoundedCorners"/> class.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.RoundedCorners.RegexPattern">
            <summary>
            Gets the regular expression to search strings for.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.RoundedCorners.SortOrder">
            <summary>
            Gets the order in which this processor is to be used in a chain.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.RoundedCorners.Processor">
            <summary>
            Gets the associated graphics processor.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Processors.RoundedCorners.MatchRegexIndex(System.String)">
            <summary>
            The position in the original string where the first character of the captured substring was found.
            </summary>
            <param name="queryString">The query string to search.</param>
            <returns>
            The zero-based starting position in the original string where the captured substring was found.
            </returns>
        </member>
        <member name="M:ImageProcessor.Web.Processors.RoundedCorners.ParseCorner(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            Returns a value indicating whether to round the given corner.
            </summary>
            <param name="queryCollection">
            The collection of query parameters.
            </param>
            <param name="key">
            The parameter key.
            </param>
            <returns>
            The correct <see cref="T:System.Boolean"/> true or false.
            </returns>
        </member>
        <member name="T:ImageProcessor.Web.Processors.Saturation">
            <summary>
            Encapsulates methods to change the saturation component of the image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.Processors.Saturation.QueryRegex">
            <summary>
            The regular expression to search strings for.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Processors.Saturation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Web.Processors.Saturation"/> class.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.Saturation.RegexPattern">
            <summary>
            Gets the regular expression to search strings for.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.Saturation.SortOrder">
            <summary>
            Gets the order in which this processor is to be used in a chain.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.Saturation.Processor">
            <summary>
            Gets the associated graphics processor.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Processors.Saturation.MatchRegexIndex(System.String)">
            <summary>
            The position in the original string where the first character of the captured substring was found.
            </summary>
            <param name="queryString">The query string to search.</param>
            <returns>
            The zero-based starting position in the original string where the captured substring was found.
            </returns>
        </member>
        <member name="T:ImageProcessor.Web.Processors.Tint">
            <summary>
            Tints an image with the given color.
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.Processors.Tint.QueryRegex">
            <summary>
            The regular expression to search strings for.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Processors.Tint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Web.Processors.Tint"/> class.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.Tint.RegexPattern">
            <summary>
            Gets the regular expression to search strings for.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.Tint.SortOrder">
            <summary>
            Gets the order in which this processor is to be used in a chain.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.Tint.Processor">
            <summary>
            Gets the associated graphics processor.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Processors.Tint.MatchRegexIndex(System.String)">
            <summary>
            The position in the original string where the first character of the captured substring was found.
            </summary>
            <param name="queryString">The query string to search.</param>
            <returns>
            The zero-based starting position in the original string where the captured substring was found.
            </returns>
        </member>
        <member name="T:ImageProcessor.Web.Processors.Meta">
            <summary>
            Encapsulates methods to control preservation of meta information.
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.Processors.Meta.QueryRegex">
            <summary>
            The regular expression to search strings for.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Processors.Meta.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Web.Processors.Meta"/> class.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.Meta.RegexPattern">
            <summary>
            Gets the regular expression to search strings for.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.Meta.SortOrder">
            <summary>
            Gets the order in which this processor is to be used in a chain.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.Meta.Processor">
            <summary>
            Gets the associated graphics processor.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Processors.Meta.MatchRegexIndex(System.String)">
            <summary>
            The position in the original string where the first character of the captured substring was found.
            </summary>
            <param name="queryString">
            The query string to search.
            </param>
            <returns>
            The zero-based starting position in the original string where the captured substring was found.
            </returns>
        </member>
        <member name="T:ImageProcessor.Web.Processors.Vignette">
            <summary>
            Encapsulates methods with which to add a vignette image effect to an image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.Processors.Vignette.QueryRegex">
            <summary>
            The regular expression to search strings for.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Processors.Vignette.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Web.Processors.Vignette"/> class.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.Vignette.RegexPattern">
            <summary>
            Gets the regular expression to search strings for.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.Vignette.SortOrder">
            <summary>
            Gets the order in which this processor is to be used in a chain.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.Vignette.Processor">
            <summary>
            Gets the associated graphics processor.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Processors.Vignette.MatchRegexIndex(System.String)">
            <summary>
            The position in the original string where the first character of the captured substring was found.
            </summary>
            <param name="queryString">
            The query string to search.
            </param>
            <returns>
            The zero-based starting position in the original string where the captured substring was found.
            </returns>
        </member>
        <member name="T:ImageProcessor.Web.Processors.Watermark">
            <summary>
            Encapsulates methods to add a watermark text overlay to an image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.Processors.Watermark.QueryRegex">
            <summary>
            The regular expression to search strings for.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Processors.Watermark.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Web.Processors.Watermark"/> class.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.Watermark.RegexPattern">
            <summary>
            Gets the regular expression to search strings for.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.Watermark.SortOrder">
            <summary>
            Gets the order in which this processor is to be used in a chain.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Processors.Watermark.Processor">
            <summary>
            Gets the associated graphics processor.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Processors.Watermark.MatchRegexIndex(System.String)">
            <summary>
            The position in the original string where the first character of the captured substring was found.
            </summary>
            <param name="queryString">
            The query string to search.
            </param>
            <returns>
            The zero-based starting position in the original string where the captured substring was found.
            </returns>
        </member>
        <member name="M:ImageProcessor.Web.Processors.Watermark.ParseText(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Returns the correct <see cref="T:System.String"/> for the given parameter collection.
            </summary>
            <param name="queryCollection">
            The <see cref="T:System.Collections.Specialized.NameValueCollection"/> of query parameters.
            </param>
            <returns>
            The correct <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Web.Processors.Watermark.ParsePosition(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Returns the correct <see cref="T:System.Drawing.Point"/> for the given parameter collection.
            </summary>
            <param name="queryCollection">
            The <see cref="T:System.Collections.Specialized.NameValueCollection"/> of query parameters.
            </param>
            <returns>
            The correct <see cref="T:System.Drawing.Point"/>
            </returns>
        </member>
        <member name="M:ImageProcessor.Web.Processors.Watermark.ParseColor(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Returns the correct <see cref="T:System.Drawing.Color"/> for the given parameter collection.
            </summary>
            <param name="queryCollection">
            The <see cref="T:System.Collections.Specialized.NameValueCollection"/> of query parameters.
            </param>
            <returns>
            The correct <see cref="T:System.Drawing.Color"/>
            </returns>
        </member>
        <member name="M:ImageProcessor.Web.Processors.Watermark.ParseFontSize(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Returns the correct <see cref="T:System.Int32"/> for the given parameter collection.
            </summary>
            <param name="queryCollection">
            The <see cref="T:System.Collections.Specialized.NameValueCollection"/> of query parameters.
            </param>
            <returns>
            The correct <see cref="T:System.Int32"/>
            </returns>
        </member>
        <member name="M:ImageProcessor.Web.Processors.Watermark.ParseFontStyle(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Returns the correct <see cref="T:System.Drawing.FontStyle"/> for the given parameter collection.
            </summary>
            <param name="queryCollection">
            The <see cref="T:System.Collections.Specialized.NameValueCollection"/> of query parameters.
            </param>
            <returns>
            The correct <see cref="T:System.Drawing.FontStyle"/>
            </returns>
        </member>
        <member name="M:ImageProcessor.Web.Processors.Watermark.ParseFontFamily(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Returns the correct <see cref="T:System.Drawing.FontFamily"/> for the given parameter collection.
            </summary>
            <param name="queryCollection">
            The <see cref="T:System.Collections.Specialized.NameValueCollection"/> of query parameters.
            </param>
            <returns>
            The correct <see cref="T:System.Drawing.FontFamily"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Web.Processors.Watermark.ParseDropShadow(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Returns a value indicating whether the watermark is to have a shadow.
            </summary>
            <param name="queryCollection">
            The <see cref="T:System.Collections.Specialized.NameValueCollection"/> of query parameters.
            </param>
            <returns>
            True if the watermark is to have a shadow; otherwise false.
            </returns>
        </member>
        <member name="M:ImageProcessor.Web.Processors.Watermark.ParseOpacity(System.Collections.Specialized.NameValueCollection,System.Drawing.Color)">
            <summary>
            Returns the correct <see cref="T:System.Int32"/> containing the opacity for the parameter collection.
            </summary>
            <param name="queryCollection">
            The <see cref="T:System.Collections.Specialized.NameValueCollection"/> of query parameters.
            </param>
            <param name="color">
            The <see cref="T:System.Drawing.Color"/> of the current <see cref="T:ImageProcessor.Imaging.TextLayer"/>.
            </param>
            <returns>
            The correct <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Web.Processors.Watermark.ParseRightToLeft(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Returns a value indicating whether the watermark is to be written right to left.
            </summary>
            <param name="queryCollection">
            The <see cref="T:System.Collections.Specialized.NameValueCollection"/> of query parameters.
            </param>
            <returns>
            True if the watermark is to be written right to left; otherwise false.
            </returns>
        </member>
        <member name="M:ImageProcessor.Web.Processors.Watermark.ParseVertical(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Returns a value indicating whether the watermark is to be written vertically.
            </summary>
            <param name="queryCollection">
            The <see cref="T:System.Collections.Specialized.NameValueCollection"/> of query parameters.
            </param>
            <returns>
            True if the watermark is to be written vertically; otherwise false.
            </returns>
        </member>
        <member name="T:ImageProcessor.Web.Services.CloudImageService">
            <summary>
            A generic cloud image service for retrieving images where the remote location has been rewritten as a
            a virtual path. Commonly seen in content management systems like Umbraco.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Services.CloudImageService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Web.Services.CloudImageService"/> class.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Services.CloudImageService.Prefix">
            <summary>
            Gets or sets the prefix for the given implementation.
            <remarks>
            This value is used as a prefix for any image requests that should use this service.
            </remarks>
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Services.CloudImageService.IsFileLocalService">
            <summary>
            Gets a value indicating whether the image service requests files from
            the locally based file system.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Services.CloudImageService.Settings">
            <summary>
            Gets or sets any additional settings required by the service.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Services.CloudImageService.WhiteList">
            <summary>
            Gets or sets the white list of <see cref="T:System.Uri"/>.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Services.CloudImageService.IsValidRequest(System.String)">
            <summary>
            Gets a value indicating whether the current request passes sanitizing rules.
            </summary>
            <param name="path">
            The image path.
            </param>
            <returns>
            <c>True</c> if the request is valid; otherwise, <c>False</c>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Web.Services.CloudImageService.GetImage(System.Object)">
            <summary>
            Gets the image using the given identifier.
            </summary>
            <param name="id">
            The value identifying the image to fetch.
            </param>
            <returns>
            The <see cref="T:System.Byte"/> array containing the image data.
            </returns>
        </member>
        <member name="T:ImageProcessor.Web.Services.IImageService">
            <summary>
             Defines properties and methods for allowing retrieval of images from different sources.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Services.IImageService.Prefix">
            <summary>
            Gets or sets the prefix for the given implementation.
            <remarks>
            This value is used as a prefix for any image requests that should use this service.
            </remarks>
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Services.IImageService.IsFileLocalService">
            <summary>
            Gets a value indicating whether the image service requests files from
            the locally based file system.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Services.IImageService.Settings">
            <summary>
            Gets or sets any additional settings required by the service.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Services.IImageService.WhiteList">
            <summary>
            Gets or sets the white list of <see cref="T:System.Uri"/>. 
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Services.IImageService.IsValidRequest(System.String)">
            <summary>
            Gets a value indicating whether the current request passes sanitizing rules.
            </summary>
            <param name="path">
            The image path.
            </param>
            <returns>
            <c>True</c> if the request is valid; otherwise, <c>False</c>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Web.Services.IImageService.GetImage(System.Object)">
            <summary>
            Gets the image using the given identifier.
            </summary>
            <param name="id">
            The value identifying the image to fetch.
            </param>
            <returns>
            The <see cref="T:System.Byte"/> array containing the image data.
            </returns>
        </member>
        <member name="T:ImageProcessor.Web.Services.LocalFileImageService">
            <summary>
            The local file image service for retrieving images from the file system.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Services.LocalFileImageService.Prefix">
            <summary>
            Gets or sets the prefix for the given implementation.
            <remarks>
            This value is used as a prefix for any image requests that should use this service.
            </remarks>
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Services.LocalFileImageService.IsFileLocalService">
            <summary>
            Gets a value indicating whether the image service requests files from
            the locally based file system.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Services.LocalFileImageService.Settings">
            <summary>
            Gets or sets any additional settings required by the service.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Services.LocalFileImageService.WhiteList">
            <summary>
            Gets or sets the white list of <see cref="T:System.Uri"/>.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Services.LocalFileImageService.IsValidRequest(System.String)">
            <summary>
            Gets a value indicating whether the current request passes sanitizing rules.
            </summary>
            <param name="path">
            The image path.
            </param>
            <returns>
            <c>True</c> if the request is valid; otherwise, <c>False</c>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Web.Services.LocalFileImageService.GetImage(System.Object)">
            <summary>
            Gets the image using the given identifier.
            </summary>
            <param name="id">
            The value identifying the image to fetch.
            </param>
            <returns>
            The <see cref="T:System.Byte"/> array containing the image data.
            </returns>
        </member>
        <member name="T:ImageProcessor.Web.Services.RemoteImageService">
            <summary>
            The remote image service.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Services.RemoteImageService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Web.Services.RemoteImageService"/> class.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Services.RemoteImageService.Prefix">
            <summary>
            Gets or sets the prefix for the given implementation.
            <remarks>
            This value is used as a prefix for any image requests that should use this service.
            </remarks>
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Services.RemoteImageService.IsFileLocalService">
            <summary>
            Gets a value indicating whether the image service requests files from
            the locally based file system.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Services.RemoteImageService.Settings">
            <summary>
            Gets or sets any additional settings required by the service.
            </summary>
        </member>
        <member name="P:ImageProcessor.Web.Services.RemoteImageService.WhiteList">
            <summary>
            Gets or sets the white list of <see cref="T:System.Uri"/>.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Services.RemoteImageService.IsValidRequest(System.String)">
            <summary>
            Gets a value indicating whether the current request passes sanitizing rules.
            </summary>
            <param name="path">
            The image path.
            </param>
            <returns>
            <c>True</c> if the request is valid; otherwise, <c>False</c>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Web.Services.RemoteImageService.GetImage(System.Object)">
            <summary>
            Gets the image using the given identifier.
            </summary>
            <param name="id">
            The value identifying the image to fetch.
            </param>
            <returns>
            The <see cref="T:System.Byte"/> array containing the image data.
            </returns>
        </member>
        <member name="T:ImageProcessor.Web.HttpModules.ImageProcessingModule">
            <summary>
            Processes any image requests within the web application.
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.HttpModules.ImageProcessingModule.CachedResponseTypeKey">
            <summary>
            The key for storing the response type of the current image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.HttpModules.ImageProcessingModule.CachedResponseFileDependency">
            <summary>
            The key for storing the file dependency of the current image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.HttpModules.ImageProcessingModule.PresetRegex">
            <summary>
            The regular expression to search strings for presets with.
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.HttpModules.ImageProcessingModule.ProtocolRegex">
            <summary>
            The regular expression to search strings for protocols with.
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.HttpModules.ImageProcessingModule.AssemblyVersion">
            <summary>
            The base assembly version.
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.HttpModules.ImageProcessingModule.WebAssemblyVersion">
            <summary>
            The web assembly version.
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.HttpModules.ImageProcessingModule.Locker">
            <summary>
            Ensures duplicate requests are atomic.
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.HttpModules.ImageProcessingModule.allowCacheBuster">
            <summary>
            Whether to allow known cache busters.
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.HttpModules.ImageProcessingModule.preserveExifMetaData">
            <summary>
            Whether to preserve exif meta data.
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.HttpModules.ImageProcessingModule.fixGamma">
            <summary>
            Whether to perform gamma correction when performing processing.
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.HttpModules.ImageProcessingModule.interceptAllRequests">
            <summary>
            Whether to to intercept all image requests including ones
            without querystring parameters.
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.HttpModules.ImageProcessingModule.isDisposed">
            <summary>
            A value indicating whether this instance of the given entity has been disposed.
            </summary>
            <value><see langword="true"/> if this instance has been disposed; otherwise, <see langword="false"/>.</value>
            <remarks>
            If the entity is disposed, it must not be disposed a second
            time. The isDisposed field is set the first time the entity
            is disposed. If the isDisposed field is true, then the Dispose()
            method will not dispose again. This help not to prolong the entity's
            life in the Garbage Collector.
            </remarks>
        </member>
        <member name="F:ImageProcessor.Web.HttpModules.ImageProcessingModule.imageCache">
            <summary>
            The image cache.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.HttpModules.ImageProcessingModule.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:ImageProcessor.Web.HttpModules.ImageProcessingModule"/> class.
            </summary>
            <remarks>
            Use C# destructor syntax for finalization code.
            This destructor will run only if the Dispose method
            does not get called.
            It gives your base class the opportunity to finalize.
            Do not provide destructors in types derived from this class.
            </remarks>
        </member>
        <member name="T:ImageProcessor.Web.HttpModules.ImageProcessingModule.ProcessQuerystringEventHandler">
            <summary>
            The process querystring event handler. DO NOT USE!
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:ImageProcessor.Web.Helpers.ProcessQueryStringEventArgs"/>.
            </param>
            <returns>Returns the processed querystring.</returns>
        </member>
        <member name="E:ImageProcessor.Web.HttpModules.ImageProcessingModule.ValidatingRequest">
            <summary>
            Event to use to validate the request or manipulate the request parameters
            </summary>
            <remarks>
            This can be used by developers to cancel the request based on the parameters specified or used to manipulate the parameters
            </remarks>
        </member>
        <member name="E:ImageProcessor.Web.HttpModules.ImageProcessingModule.OnPostProcessing">
            <summary>
            The event that is called when a new image is processed.
            </summary>
        </member>
        <member name="E:ImageProcessor.Web.HttpModules.ImageProcessingModule.OnProcessQuerystring">
            <summary>
            The event that is called when a querystring is processed. DO NOT USE!
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.HttpModules.ImageProcessingModule.SetHeaders(System.Web.HttpContext,System.String,System.String[],System.Int32,System.Nullable{System.Net.HttpStatusCode})">
            <summary>
            This will make the browser and server keep the output
            in its cache and thereby improve performance.
            </summary>
            <param name="context">
            the <see cref="T:System.Web.HttpContext">HttpContext</see> object that provides
            references to the intrinsic server objects
            </param>
            <param name="responseType">The HTTP MIME type to send.</param>
            <param name="dependencyPaths">The dependency path for the cache dependency.</param>
            <param name="maxDays">The maximum number of days to store the image in the browser cache.</param>
            <param name="statusCode">An optional status code to send to the response.</param>
        </member>
        <member name="M:ImageProcessor.Web.HttpModules.ImageProcessingModule.SetHeaders(System.Web.HttpContext,System.Int32)">
            <summary>
            This will make the browser and server keep the output in its cache and thereby improve performance.
            </summary>
            <param name="context">
            the <see cref="T:System.Web.HttpContext">HttpContext</see> object that provides
            references to the intrinsic server objects
            </param>
            <param name="maxDays">The maximum number of days to store the image in the browser cache.</param>
        </member>
        <member name="M:ImageProcessor.Web.HttpModules.ImageProcessingModule.AddCorsRequestHeaders(System.Web.HttpContext)">
            <summary>
            Adds response headers allowing Cross Origin Requests if the current origin request
            passes sanitizing rules.
            </summary>
            <param name="context">
            the <see cref="T:System.Web.HttpContext">HttpContext</see> object that provides
            references to the intrinsic server objects
            </param>
        </member>
        <member name="M:ImageProcessor.Web.HttpModules.ImageProcessingModule.Init(System.Web.HttpApplication)">
            <summary>
            Initializes a module and prepares it to handle requests.
            </summary>
            <param name="application">
            An <see cref="T:System.Web.HttpApplication"/> that provides
            access to the methods, properties, and events common to all
            application objects within an ASP.NET application
            </param>
        </member>
        <member name="M:ImageProcessor.Web.HttpModules.ImageProcessingModule.Dispose">
            <summary>
            Disposes of the resources (other than memory) used by the module that implements <see cref="T:System.Web.IHttpModule"/>.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.HttpModules.ImageProcessingModule.PostAuthorizeRequest(System.Object,System.EventArgs)">
            <summary>
            Occurs when the user for the current request has been authorized.
            </summary>
            <param name="sender">
            The source of the event.
            </param>
            <param name="e">
            An <see cref="T:System.EventArgs">EventArgs</see> that contains the event data.
            </param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Web.HttpModules.ImageProcessingModule.GetRequestUrl(System.Web.HttpRequest)">
            <summary>
            Gets url for the current request.
            </summary>
            <param name="request">The request.</param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Web.HttpModules.ImageProcessingModule.Dispose(System.Boolean)">
            <summary>
            Disposes the object and frees resources for the Garbage Collector.
            </summary>
            <param name="disposing">
            If true, the object gets disposed.
            </param>
        </member>
        <member name="M:ImageProcessor.Web.HttpModules.ImageProcessingModule.OnEndRequest(System.Object,System.EventArgs)">
            <summary>
            Occurs when the ASP.NET event handler finishes execution.
            </summary>
            <param name="sender">
            The source of the event.
            </param>
            <param name="e">
            An <see cref="T:System.EventArgs">EventArgs</see> that contains the event data.
            </param>
        </member>
        <member name="M:ImageProcessor.Web.HttpModules.ImageProcessingModule.PostReleaseRequestState(System.Object,System.EventArgs)">
            <summary>
            Occurs when ASP.NET has completed executing all request event handlers and the request
            state data has been stored.
            </summary>
            <param name="sender">
            The source of the event.
            </param>
            <param name="e">
            An <see cref="T:System.EventArgs">EventArgs</see> that contains the event data.
            </param>
        </member>
        <member name="M:ImageProcessor.Web.HttpModules.ImageProcessingModule.ProcessImageAsync(System.Web.HttpContext)">
            <summary>
            Processes the image.
            </summary>
            <param name="context">
            the <see cref="T:System.Web.HttpContext">HttpContext</see> object that provides
            references to the intrinsic server objects
            </param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Web.HttpModules.ImageProcessingModule.ParseCacheBuster(System.String)">
            <summary>
            Return a value indicating whether common cache buster variables are being passed through.
            </summary>
            <param name="queryString">The query string to search.</param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Web.HttpModules.ImageProcessingModule.ParseAnimationMode(System.String,System.Boolean@)">
            <summary>
            Gets the animation mode passed in through the querystring, defaults to the default behaviour (All) if nothing found.
            </summary>
            <param name="queryString">The query string to search.</param>
            <param name="process">
            Whether to process the request. True if <see cref="F:ImageProcessor.Imaging.AnimationProcessMode.First"/>
            has been explicitly requested.
            </param>
            <returns>
            The process mode for frames in animated images.
            </returns>
        </member>
        <member name="M:ImageProcessor.Web.HttpModules.ImageProcessingModule.ReplacePresetsInQueryString(System.String)">
            <summary>
            Replaces preset values stored in the configuration in the querystring.
            </summary>
            <param name="queryString">The query string.</param>
            <returns>
            The <see cref="T:System.String"/> containing the updated querystring.
            </returns>
        </member>
        <member name="M:ImageProcessor.Web.HttpModules.ImageProcessingModule.OnValidatingRequest(ImageProcessor.Web.Helpers.ValidatingRequestEventArgs)">
            <summary>
            Raises the ValidatingRequest event
            </summary>
            <param name="args">The <see cref="T:ImageProcessor.Web.Helpers.ValidatingRequestEventArgs"/></param>
        </member>
        <member name="M:ImageProcessor.Web.HttpModules.ImageProcessingModule.CheckQuerystringHandler(System.Web.HttpContext,System.String,System.String)">
            <summary>
            Checks if there is a handler that changes the querystring and executes that handler.
            </summary>
            <param name="context">The current request context.</param>
            <param name="queryString">The query string.</param>
            <param name="rawUrl">The raw request url.</param>
            <returns>
            The <see cref="T:System.String"/> containing the updated querystring.
            </returns>
        </member>
        <member name="M:ImageProcessor.Web.HttpModules.ImageProcessingModule.GetImageServiceForRequest(System.String,System.String)">
            <summary>
            Gets the correct <see cref="T:ImageProcessor.Web.Services.IImageService"/> for the given request.
            </summary>
            <param name="url">The current image request url.</param>
            <param name="applicationPath">The application path.</param>
            <returns>
            The <see cref="T:ImageProcessor.Web.Services.IImageService"/>.
            </returns>
        </member>
        <member name="T:ImageProcessor.Web.ImageFactoryExtensions">
            <summary>
            Extends the ImageFactory class to provide a fluent API.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.ImageFactoryExtensions.AutoProcess(ImageProcessor.ImageFactory,ImageProcessor.Web.Processors.IWebGraphicsProcessor[])">
            <summary>
            Auto processes image files based on any query string parameters added to the image path.
            </summary>
            <param name="factory">
            The current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class
            that this method extends.
            </param>
            <param name="graphicsProcessors">The array of graphics processors to apply.</param>
            <returns>
            The current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="M:ImageProcessor.Web.ImageFactoryExtensions.GetMatchingProcessors(System.String)">
            <summary>
            Returns an array of processors that match the given querystring.
            </summary>
            <param name="querystring">The collection of querystring parameters to process.</param>
            <returns>
            The <see cref="T:IWebGraphicsProcessor[]"/>.
            </returns>
        </member>
    </members>
</doc>
