<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ImageProcessor</name>
    </assembly>
    <members>
        <member name="T:ImageProcessor.Common.Exceptions.DefaultLogger">
            <summary>
            The default logger which logs messages to the trace listeners.
            </summary>
            <seealso cref="T:ImageProcessor.Common.Exceptions.ILogger" />
        </member>
        <member name="M:ImageProcessor.Common.Exceptions.DefaultLogger.Log``1(System.String,System.String,System.Int32)">
            <summary>
            Logs the specified message.
            </summary>
            <typeparam name="T">The type calling the logger.</typeparam>
            <param name="text">The message to log.</param>
            <param name="callerName">The property or method name calling the log.</param>
            <param name="lineNumber">The line number where the method is called.</param>
        </member>
        <member name="M:ImageProcessor.Common.Exceptions.DefaultLogger.Log(System.Type,System.String,System.String,System.Int32)">
            <summary>
            Logs the specified message.
            </summary>
            <param name="type">The type calling the logger.</param>
            <param name="text">The message to log.</param>
            <param name="callerName">The property or method name calling the log.</param>
            <param name="lineNumber">The line number where the method is called.</param>
        </member>
        <member name="M:ImageProcessor.Common.Exceptions.DefaultLogger.LogInternal(System.Type,System.String,System.String,System.Int32)">
            <summary>
            Logs the specified message.
            </summary>
            <param name="type">The type calling the logger.</param>
            <param name="text">The message to log.</param>
            <param name="callerName">The property or method name calling the log.</param>
            <param name="lineNumber">The line number where the method is called.</param>
        </member>
        <member name="T:ImageProcessor.Common.Exceptions.ILogger">
            <summary>
            Encapsulates properties and methods for logging messages.
            </summary>
        </member>
        <member name="M:ImageProcessor.Common.Exceptions.ILogger.Log``1(System.String,System.String,System.Int32)">
            <summary>
            Logs the specified message.
            </summary>
            <typeparam name="T">The type calling the logger.</typeparam>
            <param name="text">The message to log.</param>
            <param name="callerName">The property or method name calling the log.</param>
            <param name="lineNumber">The line number where the method is called.</param>
        </member>
        <member name="M:ImageProcessor.Common.Exceptions.ILogger.Log(System.Type,System.String,System.String,System.Int32)">
            <summary>
            Logs the specified message.
            </summary>
            <param name="type">The type calling the logger.</param>
            <param name="text">The message to log.</param>
            <param name="callerName">The property or method name calling the log.</param>
            <param name="lineNumber">The line number where the method is called.</param>
        </member>
        <member name="T:ImageProcessor.Common.Exceptions.ImageProcessingException">
            <summary>
            The exception that is thrown when processing an image has failed.
            </summary>
        </member>
        <member name="M:ImageProcessor.Common.Exceptions.ImageProcessingException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Common.Exceptions.ImageProcessingException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:ImageProcessor.Common.Exceptions.ImageProcessingException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Common.Exceptions.ImageProcessingException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:ImageProcessor.Common.Exceptions.ImageFormatException">
            <summary>
            The exception that is thrown when loading the supported image format types has failed.
            </summary>
        </member>
        <member name="M:ImageProcessor.Common.Exceptions.ImageFormatException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Common.Exceptions.ImageFormatException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:ImageProcessor.Common.Exceptions.ImageFormatException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Common.Exceptions.ImageFormatException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:ImageProcessor.Common.Exceptions.QuantizationException">
            <summary>
            The exception that is thrown when quantizing an image has failed.
            </summary>
        </member>
        <member name="M:ImageProcessor.Common.Exceptions.QuantizationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Common.Exceptions.QuantizationException"/> class.
            </summary>
            <param name="message">
            The message.
            </param>
        </member>
        <member name="M:ImageProcessor.Common.Exceptions.QuantizationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Common.Exceptions.QuantizationException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:ImageProcessor.Common.Extensions.AssemblyExtensions">
            <summary>
            Encapsulates a series of time saving extension methods to the <see cref="T:System.Reflection.Assembly"/> class.
            </summary>
        </member>
        <member name="M:ImageProcessor.Common.Extensions.AssemblyExtensions.GetLoadableTypes(System.Reflection.Assembly)">
            <summary>
            Gets a collection of loadable types from the given assembly.
            Adapted from <see href="http://stackoverflow.com/questions/7889228/how-to-prevent-reflectiontypeloadexception-when-calling-assembly-gettypes"/>
            </summary>
            <param name="assembly">
            The <see cref="T:System.Reflection.Assembly"/> to load the types from.
            </param>
            <returns>
            The loadable <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Common.Extensions.AssemblyExtensions.GetResourceAsString(System.Reflection.Assembly,System.String,System.Text.Encoding)">
            <summary>
            Converts an assembly resource into a string.
            </summary>
            <param name="assembly">
            The <see cref="T:System.Reflection.Assembly"/> to load the strings from.
            </param>
            <param name="resource">
            The resource.
            </param>
            <param name="encoding">
            The character encoding to return the resource in.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Common.Extensions.AssemblyExtensions.GetAssemblyFile(System.Reflection.Assembly)">
            <summary>
            Returns the <see cref="T:System.IO.FileInfo"/> identifying the file used to load the assembly
            </summary>
            <param name="assembly">
            The <see cref="T:System.Reflection.Assembly"/> to get the name from.
            </param>
            <returns>The <see cref="T:System.IO.FileInfo"/></returns>
        </member>
        <member name="M:ImageProcessor.Common.Extensions.AssemblyExtensions.GetAssemblyFile(System.Reflection.AssemblyName)">
            <summary>
            Returns the <see cref="T:System.IO.FileInfo"/> identifying the file used to load the assembly
            </summary>
            <param name="assemblyName">
            The <see cref="T:System.Reflection.AssemblyName"/> to get the name from.
            </param>
            <returns>The <see cref="T:System.IO.FileInfo"/></returns>
        </member>
        <member name="T:ImageProcessor.Common.Extensions.FloatExtensions">
            <summary>
            Encapsulates a series of time saving extension methods to the <see cref="T:System.Float"/> class.
            </summary>
        </member>
        <member name="M:ImageProcessor.Common.Extensions.FloatExtensions.ToByte(System.Single)">
            <summary>
            Converts an <see cref="T:System.Float"/> value into a valid <see cref="T:System.Byte"/>.
            <remarks>
            If the value given is less than 0 or greater than 255, the value will be constrained into
            those restricted ranges.
            </remarks>
            </summary>
            <param name="value">
            The <see cref="T:System.Float"/> to convert.
            </param>
            <returns>
            The <see cref="T:System.Byte"/>.
            </returns>
        </member>
        <member name="T:ImageProcessor.Common.Extensions.EnumerableExtensions">
            <summary>
            Encapsulates a series of time saving extension methods to the <see cref="T:System.Collections.IEnumerable"/> interface.
            </summary>
        </member>
        <member name="M:ImageProcessor.Common.Extensions.EnumerableExtensions.SteppedRange(System.Int32,System.Int32,System.Int32)">
            <summary>
            Generates a sequence of integral numbers within a specified range.
            </summary>
            <param name="fromInclusive">
            The start index, inclusive.
            </param>
            <param name="toExclusive">
            The end index, exclusive.
            </param>
            <param name="step">
            The incremental step.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains a range of sequential integral numbers.
            </returns>
        </member>
        <member name="M:ImageProcessor.Common.Extensions.EnumerableExtensions.SteppedRange(System.Int32,System.Func{System.Int32,System.Boolean},System.Int32)">
            <summary>
            Generates a sequence of integral numbers within a specified range.
            </summary>
            <param name="fromInclusive">
            The start index, inclusive.
            </param>
            <param name="toDelegate">
            A method that has one parameter and returns a <see cref="T:System.Boolean"/> calculating the end index
            </param>
            <param name="step">
            The incremental step.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains a range of sequential integral numbers.
            </returns>
        </member>
        <member name="M:ImageProcessor.Common.Extensions.EnumerableExtensions.RangeIterator(System.Int32,System.Func{System.Int32,System.Boolean},System.Int32)">
            <summary>
            Generates a sequence of integral numbers within a specified range.
            </summary>
            <param name="fromInclusive">
            The start index, inclusive.
            </param>
            <param name="toDelegate">
            A method that has one parameter and returns a <see cref="T:System.Boolean"/> calculating the end index
            </param>
            <param name="step">
            The incremental step.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains a range of sequential integral numbers.
            </returns>
        </member>
        <member name="T:ImageProcessor.Common.Extensions.ImageExtensions">
            <summary>
            Encapsulates a series of time saving extension methods to the <see cref="T:System.Drawing.Image"/> class.
            </summary>
        </member>
        <member name="M:ImageProcessor.Common.Extensions.ImageExtensions.Copy(System.Drawing.Image,ImageProcessor.Imaging.AnimationProcessMode,System.Drawing.Imaging.PixelFormat,System.Boolean)">
            <summary>
            Creates a deep copy of an image allowing you to set the pixel format.
            Disposing of the original is the responsibility of the user.
            <remarks>
            Unlike the native <see cref="M:System.Drawing.Image.Clone"/> method this also copies animation frames.
            </remarks>
            </summary>
            <param name="source">The source image to copy.</param>
            <param name="animationProcessMode">The process mode for frames in animated images.</param>
            <param name="format">The <see cref="T:System.Drawing.Imaging.PixelFormat"/> to set the copied image to.</param>
            <param name="preserveExifData">Whether to preserve exif metadata. Defaults to false.</param>
            <returns>
            The <see cref="T:System.Drawing.Image"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Common.Extensions.ImageExtensions.Copy(System.Drawing.Image,System.Drawing.Imaging.PixelFormat)">
            <summary>
            Creates a deep copy of an image allowing you to set the pixel format.
            Disposing of the original is the responsibility of the user.
            <remarks>
            Unlike the native <see cref="M:System.Drawing.Image.Clone"/> method this also copies animation frames.
            </remarks>
            </summary>
            <param name="source">The source image to copy.</param>
            <param name="format">The <see cref="T:System.Drawing.Imaging.PixelFormat"/> to set the copied image to.</param>
            <returns>
            The <see cref="T:System.Drawing.Image"/>.
            </returns>
        </member>
        <member name="T:ImageProcessor.Common.Extensions.RectangleExtensions">
            <summary>
            Extensions to the rectangle structure.
            </summary>
        </member>
        <member name="M:ImageProcessor.Common.Extensions.RectangleExtensions.IsEqual(System.Drawing.Rectangle,System.Drawing.Rectangle,System.Int32)">
            <summary>
            Compares two rectangles for equality, considering an acceptance threshold.
            </summary>
            <param name="first">The first rectangle.</param>
            <param name="second">The second rectangle</param>
            <param name="threshold">The threshold.</param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:ImageProcessor.Common.Extensions.DoubleExtensions">
            <summary>
            Encapsulates a series of time saving extension methods to the <see cref="T:System.Double"/> class.
            </summary>
        </member>
        <member name="M:ImageProcessor.Common.Extensions.DoubleExtensions.ToByte(System.Double)">
            <summary>
            Converts an <see cref="T:System.Double"/> value into a valid <see cref="T:System.Byte"/>.
            <remarks>
            If the value given is less than 0 or greater than 255, the value will be constrained into
            those restricted ranges.
            </remarks>
            </summary>
            <param name="value">
            The <see cref="T:System.Double"/> to convert.
            </param>
            <returns>
            The <see cref="T:System.Byte"/>.
            </returns>
        </member>
        <member name="T:ImageProcessor.Common.Extensions.IntegerExtensions">
            <summary>
            Encapsulates a series of time saving extension methods to the <see cref="T:System.Int32"/> class.
            </summary>
        </member>
        <member name="M:ImageProcessor.Common.Extensions.IntegerExtensions.ToByte(System.Int32)">
            <summary>
            Converts an <see cref="T:System.Int32"/> value into a valid <see cref="T:System.Byte"/>.
            <remarks>
            If the value given is less than 0 or greater than 255, the value will be constrained into
            those restricted ranges.
            </remarks>
            </summary>
            <param name="value">
            The <see cref="T:System.Int32"/> to convert.
            </param>
            <returns>
            The <see cref="T:System.Byte"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Common.Extensions.IntegerExtensions.ParseInvariant(System.Int32,System.String)">
            <summary>
            Converts the string representation of a number in a specified culture-specific format to its 
            32-bit signed integer equivalent using invariant culture.
            </summary>
            <param name="value">The integer.</param>
            <param name="toParse">A string containing a number to convert.</param>
            <returns>A 32-bit signed integer equivalent to the number specified in toParse.</returns>
        </member>
        <member name="T:ImageProcessor.Common.Helpers.WriteLock">
            <summary>
            Provides a convenience methodology for implementing writable locked access to resources.
            </summary>
            <remarks>
            Adapted from identically named class within <see href="https://github.com/umbraco/Umbraco-CMS"/>
            </remarks>
        </member>
        <member name="F:ImageProcessor.Common.Helpers.WriteLock.locker">
            <summary>
            The locker to lock against.
            </summary>
        </member>
        <member name="F:ImageProcessor.Common.Helpers.WriteLock.isDisposed">
            <summary>
            A value indicating whether this instance of the given entity has been disposed.
            </summary>
            <value><see langword="true"/> if this instance has been disposed; otherwise, <see langword="false"/>.</value>
            <remarks>
            If the entity is disposed, it must not be disposed a second
            time. The isDisposed field is set the first time the entity
            is disposed. If the isDisposed field is true, then the Dispose()
            method will not dispose again. This help not to prolong the entity's
            life in the Garbage Collector.
            </remarks>
        </member>
        <member name="M:ImageProcessor.Common.Helpers.WriteLock.#ctor(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Common.Helpers.WriteLock"/> class.
            </summary>
            <param name="locker">
            The locker.
            </param>
        </member>
        <member name="M:ImageProcessor.Common.Helpers.WriteLock.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:ImageProcessor.Common.Helpers.WriteLock"/> class. 
            </summary>
            <remarks>
            Use C# destructor syntax for finalization code.
            This destructor will run only if the Dispose method 
            does not get called.
            It gives your base class the opportunity to finalize.
            Do not provide destructors in types derived from this class.
            </remarks>
        </member>
        <member name="M:ImageProcessor.Common.Helpers.WriteLock.Dispose">
            <summary>
            Disposes the object and frees resources for the Garbage Collector.
            </summary>
        </member>
        <member name="M:ImageProcessor.Common.Helpers.WriteLock.Dispose(System.Boolean)">
            <summary>
            Disposes the object and frees resources for the Garbage Collector.
            </summary>
            <param name="disposing">If true, the object gets disposed.</param>
        </member>
        <member name="T:ImageProcessor.Common.Helpers.UpgradeableReadLock">
            <summary>
            Provides a convenience methodology for implementing upgradeable locked access to resources.
            </summary>
            <remarks>
            Adapted from identically named class within <see href="https://github.com/umbraco/Umbraco-CMS"/>
            </remarks>
        </member>
        <member name="F:ImageProcessor.Common.Helpers.UpgradeableReadLock.locker">
            <summary>
            The locker to lock against.
            </summary>
        </member>
        <member name="F:ImageProcessor.Common.Helpers.UpgradeableReadLock.upgraded">
            <summary>
            A value indicating whether the locker has been upgraded to a writeable lock.
            </summary>
        </member>
        <member name="F:ImageProcessor.Common.Helpers.UpgradeableReadLock.isDisposed">
            <summary>
            A value indicating whether this instance of the given entity has been disposed.
            </summary>
            <value><see langword="true"/> if this instance has been disposed; otherwise, <see langword="false"/>.</value>
            <remarks>
            If the entity is disposed, it must not be disposed a second
            time. The isDisposed field is set the first time the entity
            is disposed. If the isDisposed field is true, then the Dispose()
            method will not dispose again. This help not to prolong the entity's
            life in the Garbage Collector.
            </remarks>
        </member>
        <member name="M:ImageProcessor.Common.Helpers.UpgradeableReadLock.#ctor(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Common.Helpers.UpgradeableReadLock"/> class.
            </summary>
            <param name="locker">
            The locker.
            </param>
        </member>
        <member name="M:ImageProcessor.Common.Helpers.UpgradeableReadLock.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:ImageProcessor.Common.Helpers.UpgradeableReadLock"/> class. 
            </summary>
            <remarks>
            Use C# destructor syntax for finalization code.
            This destructor will run only if the Dispose method 
            does not get called.
            It gives your base class the opportunity to finalize.
            Do not provide destructors in types derived from this class.
            </remarks>
        </member>
        <member name="M:ImageProcessor.Common.Helpers.UpgradeableReadLock.UpgradeToWriteLock">
            <summary>
            Tries to enter the locker in write mode.
            </summary>
        </member>
        <member name="M:ImageProcessor.Common.Helpers.UpgradeableReadLock.Dispose">
            <summary>
            Disposes the object and frees resources for the Garbage Collector.
            </summary>
        </member>
        <member name="M:ImageProcessor.Common.Helpers.UpgradeableReadLock.Dispose(System.Boolean)">
            <summary>
            Disposes the object and frees resources for the Garbage Collector.
            </summary>
            <param name="disposing">If true, the object gets disposed.</param>
        </member>
        <member name="T:ImageProcessor.Common.Helpers.TypeFinder">
            <summary>
            A utility class to find all classes of a certain type by reflection in the current bin folder
            of the web application. 
            </summary>
            <remarks>
            Adapted from identically named class within <see href="https://github.com/umbraco/Umbraco-CMS"/>
            </remarks>
        </member>
        <member name="F:ImageProcessor.Common.Helpers.TypeFinder.LocalFilteredAssemblyCache">
            <summary>
            The local filtered assembly cache.
            </summary>
        </member>
        <member name="F:ImageProcessor.Common.Helpers.TypeFinder.LocalFilteredAssemblyCacheLocker">
            <summary>
            The local filtered assembly cache locker.
            </summary>
        </member>
        <member name="F:ImageProcessor.Common.Helpers.TypeFinder.Locker">
            <summary>
            The reader-writer lock implementation.
            </summary>
        </member>
        <member name="F:ImageProcessor.Common.Helpers.TypeFinder.KnownAssemblyExclusionFilter">
            <summary>
            An assembly filter collection to filter out known types that definitely don't contain types 
            we'd like to find or plugins.
            Umbraco uses ImageProcessor in it's core so add common exclusion files from that.
            </summary>
            <remarks>
            NOTE the comma versus period... comma delimits the name in an Assembly FullName property so 
            if it ends with comma then its an exact name match.
            </remarks>
        </member>
        <member name="F:ImageProcessor.Common.Helpers.TypeFinder.allAssemblies">
            <summary>
            A collection of all assemblies.
            </summary>
        </member>
        <member name="F:ImageProcessor.Common.Helpers.TypeFinder.binFolderAssemblies">
            <summary>
            The bin folder assemblies.
            </summary>
        </member>
        <member name="M:ImageProcessor.Common.Helpers.TypeFinder.GetAllAssemblies">
            <summary>
            Lazily loads a reference to all assemblies and only local assemblies.
            This is a modified version of: 
            <see href="http://www.dominicpettifer.co.uk/Blog/44/how-to-get-a-reference-to-all-assemblies-in-the--bin-folder"/>
            </summary>
            <remarks>
            We do this because we cannot use AppDomain.Current.GetAssemblies() as this will return only assemblies that have been 
            loaded in the CLR, not all assemblies.
            See these threads:
            <see href="http://issues.umbraco.org/issue/U5-198"/>
            <see href="http://stackoverflow.com/questions/3552223/asp-net-appdomain-currentdomain-getassemblies-assemblies-missing-after-app"/>
            <see href="http://stackoverflow.com/questions/2477787/difference-between-appdomain-getassemblies-and-buildmanager-getreferencedassembl"/>
            </remarks>
            <returns>
            The <see cref="T:System.Collections.Generic.HashSet`1"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Common.Helpers.TypeFinder.GetBinAssemblies">
            <summary>
            Returns only assemblies found in the bin folder that have been loaded into the app domain.
            </summary>
            <returns>
            The collection of assemblies.
            </returns>
        </member>
        <member name="M:ImageProcessor.Common.Helpers.TypeFinder.GetAssembliesWithKnownExclusions(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Return a list of found local Assemblies excluding the known assemblies we don't want to scan 
            and excluding the ones passed in and excluding the exclusion list filter, the results of this are
            cached for performance reasons.
            </summary>
            <param name="excludeFromResults">
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to exclude.
            </param>
            <returns>The collection of local assemblies.</returns>
        </member>
        <member name="M:ImageProcessor.Common.Helpers.TypeFinder.GetFilteredAssemblies(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.String[])">
            <summary>
            Return a distinct list of found local Assemblies and excluding the ones passed in and excluding the exclusion list filter
            </summary>
            <param name="excludeFromResults">
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to exclude.
            </param>
            <param name="exclusionFilter">
            An <see cref="T:System.String"/> array containing exclusion filters.
            </param>
            <returns>The collection of filtered local assemblies.</returns>
        </member>
        <member name="T:ImageProcessor.Common.Helpers.IOHelper">
            <summary>
            Provides helper method for traversing the file system.
            <remarks>
            Adapted from identically named class within <see href="https://github.com/umbraco/Umbraco-CMS"/>
            </remarks>
            </summary>
        </member>
        <member name="F:ImageProcessor.Common.Helpers.IOHelper.rootDirectory">
            <summary>
            The root directory.
            </summary>
        </member>
        <member name="M:ImageProcessor.Common.Helpers.IOHelper.MapPath(System.String)">
            <summary>
            Maps a virtual path to a physical path.
            </summary>
            <param name="virtualPath">
            The virtual path to map.
            </param>
            <returns>
            The <see cref="T:System.String"/> representing the physical path.
            </returns>
        </member>
        <member name="M:ImageProcessor.Common.Helpers.IOHelper.GetRootDirectoryBinFolder">
            <summary>
            Gets the root directory bin folder for the currently running application.
            </summary>
            <returns>
            The <see cref="T:System.String"/> representing the root directory bin folder.
            </returns>
        </member>
        <member name="M:ImageProcessor.Common.Helpers.IOHelper.GetRootDirectorySafe">
            <summary>
            Returns the path to the root of the application, by getting the path to where the assembly where this
            method is included is present, then traversing until it's past the /bin directory. I.e. this makes it work
            even if the assembly is in a /bin/debug or /bin/release folder
            </summary>
            <returns>
            The <see cref="T:System.String"/> representing the root path of the currently running application.</returns>
        </member>
        <member name="T:ImageProcessor.Configuration.ImageProcessorBootstrapper">
            <summary>
            The ImageProcessor bootstrapper containing initialization code for extending ImageProcessor.
            </summary>
        </member>
        <member name="F:ImageProcessor.Configuration.ImageProcessorBootstrapper.Lazy">
            <summary>
            A new instance Initializes a new instance of the <see cref="T:ImageProcessor.Configuration.ImageProcessorBootstrapper"/> class.
            with lazy initialization.
            </summary>
        </member>
        <member name="M:ImageProcessor.Configuration.ImageProcessorBootstrapper.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:ImageProcessor.Configuration.ImageProcessorBootstrapper"/> class from being created.
            </summary>
        </member>
        <member name="P:ImageProcessor.Configuration.ImageProcessorBootstrapper.Instance">
            <summary>
            Gets the current instance of the <see cref="T:ImageProcessor.Configuration.ImageProcessorBootstrapper"/> class.
            </summary>
        </member>
        <member name="P:ImageProcessor.Configuration.ImageProcessorBootstrapper.SupportedImageFormats">
            <summary>
            Gets the supported image formats.
            </summary>
        </member>
        <member name="P:ImageProcessor.Configuration.ImageProcessorBootstrapper.Logger">
            <summary>
            Gets the currently installed logger.
            </summary>
        </member>
        <member name="P:ImageProcessor.Configuration.ImageProcessorBootstrapper.NativeBinaryFactory">
            <summary>
            Gets the native binary factory for registering embedded (unmanaged) binaries.
            </summary>
        </member>
        <member name="M:ImageProcessor.Configuration.ImageProcessorBootstrapper.AddImageFormats(ImageProcessor.Imaging.Formats.ISupportedImageFormat[])">
            <summary>
            Adds the given image formats to the supported format list. Useful for when 
            the type finder fails to dynamically add the supported formats.
            </summary>
            <param name="format">
            The <see cref="T:ImageProcessor.Imaging.Formats.ISupportedImageFormat"/> instance to add.
            </param>
        </member>
        <member name="M:ImageProcessor.Configuration.ImageProcessorBootstrapper.SetLogger(ImageProcessor.Common.Exceptions.ILogger)">
            <summary>
            Allows the setting of the default logger. Useful for when 
            the type finder fails to dynamically add the custom logger implementation.
            </summary>
            <param name="logger"></param>
        </member>
        <member name="M:ImageProcessor.Configuration.ImageProcessorBootstrapper.LoadSupportedImageFormats">
            <summary>
            Creates a list, using reflection, of supported image formats that ImageProcessor can run.
            </summary>
        </member>
        <member name="M:ImageProcessor.Configuration.ImageProcessorBootstrapper.LoadLogger">
            <summary>
            Loads the logger.
            </summary>
        </member>
        <member name="T:ImageProcessor.Configuration.NativeBinaryFactory">
            <summary>
            Controls the loading and unloading of any native binaries required by ImageProcessor.
            </summary>
        </member>
        <member name="F:ImageProcessor.Configuration.NativeBinaryFactory.Is64Bit">
            <summary>
            Whether the process is running in 64bit mode. Used for calling the correct dllimport method.
            </summary>
        </member>
        <member name="F:ImageProcessor.Configuration.NativeBinaryFactory.nativeBinaries">
            <summary>
            The native binaries.
            </summary>
        </member>
        <member name="F:ImageProcessor.Configuration.NativeBinaryFactory.isDisposed">
            <summary>
            A value indicating whether this instance of the given entity has been disposed.
            </summary>
            <value><see langword="true"/> if this instance has been disposed; otherwise, <see langword="false"/>.</value>
            <remarks>
            If the entity is disposed, it must not be disposed a second
            time. The isDisposed field is set the first time the entity
            is disposed. If the isDisposed field is true, then the Dispose()
            method will not dispose again. This help not to prolong the entity's
            life in the Garbage Collector.
            </remarks>
        </member>
        <member name="M:ImageProcessor.Configuration.NativeBinaryFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Configuration.NativeBinaryFactory"/> class.
            </summary>
        </member>
        <member name="M:ImageProcessor.Configuration.NativeBinaryFactory.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:ImageProcessor.Configuration.NativeBinaryFactory">ImageFactory</see> class. 
            </summary>
            <remarks>
            Use C# destructor syntax for finalization code.
            This destructor will run only if the Dispose method 
            does not get called.
            It gives your base class the opportunity to finalize.
            Do not provide destructors in types derived from this class.
            </remarks>
        </member>
        <member name="P:ImageProcessor.Configuration.NativeBinaryFactory.Is64BitEnvironment">
            <summary>
            Gets a value indicating whether the operating environment is 64 bit.
            </summary>
        </member>
        <member name="M:ImageProcessor.Configuration.NativeBinaryFactory.RegisterNativeBinary(System.String,System.Byte[])">
            <summary>
            Registers any embedded native (unmanaged) binaries required by ImageProcessor.
            </summary>
            <param name="name">
            The name of the native binary.
            </param>
            <param name="resourceBytes">
            The resource bytes containing the native binary.
            </param>
            <exception cref="T:System.ApplicationException">
            Thrown if the binary cannot be registered.
            </exception>
        </member>
        <member name="M:ImageProcessor.Configuration.NativeBinaryFactory.Dispose">
            <summary>
            Disposes the object and frees resources for the Garbage Collector.
            </summary>
        </member>
        <member name="M:ImageProcessor.Configuration.NativeBinaryFactory.Dispose(System.Boolean)">
            <summary>
            Disposes the object and frees resources for the Garbage Collector.
            </summary>
            <param name="disposing">If true, the object gets disposed.</param>
        </member>
        <member name="M:ImageProcessor.Configuration.NativeBinaryFactory.FreeNativeBinaries">
            <summary>
            Frees the reference to the native binaries.
            </summary>
        </member>
        <member name="T:ImageProcessor.Configuration.NativeMethods">
            <summary>
            Provides access to unmanaged native methods.
            </summary>
        </member>
        <member name="M:ImageProcessor.Configuration.NativeMethods.LoadLibrary(System.String)">
            <summary>
            Loads the specified module into the address space of the calling process. 
            The specified module may cause other modules to be loaded.
            </summary>
            <param name="libname">
            The name of the module. This can be either a library module or 
            an executable module. 
            </param>
            <returns>If the function succeeds, the return value is a handle to the module; otherwise null.</returns>
        </member>
        <member name="M:ImageProcessor.Configuration.NativeMethods.FreeLibrary(System.IntPtr)">
            <summary>
            Frees the loaded dynamic-link library (DLL) module and, if necessary, decrements its reference count. 
            When the reference count reaches zero, the module is unloaded from the address space of the calling 
            process and the handle is no longer valid.
            </summary>
            <param name="hModule">A handle to the loaded library module. 
            The LoadLibrary, LoadLibraryEx, GetModuleHandle, or GetModuleHandleEx function returns this handle.</param>
            <returns>If the function succeeds, the return value is nonzero; otherwise zero.</returns>
        </member>
        <member name="M:ImageProcessor.Configuration.NativeMethods.dlopen(System.String,System.Int32)">
            <summary>
            Loads the specified module into the address space of the calling process. 
            The specified module may cause other modules to be loaded.
            </summary>
            <param name="libname">
            The name of the module. This can be either a library module or 
            an executable module. 
            </param>
            <param name="flags">
            The flag indicating whether to load the library immediately or lazily.
            </param>
            <returns>
            If the function succeeds, the return value is a handle to the module; otherwise null.
            </returns>
        </member>
        <member name="M:ImageProcessor.Configuration.NativeMethods.dlclose(System.IntPtr)">
            <summary>
            Frees the loaded dynamic-link library (DLL) module and, if necessary, decrements its reference count. 
            When the reference count reaches zero, the module is unloaded from the address space of the calling 
            process and the handle is no longer valid.
            </summary>
            <param name="hModule">A handle to the loaded library module. 
            The LoadLibrary, LoadLibraryEx, GetModuleHandle, or GetModuleHandleEx function returns this handle.</param>
            <returns>If the function succeeds, the return value is nonzero; otherwise zero.</returns>
        </member>
        <member name="T:ImageProcessor.Imaging.AnimationProcessMode">
            <summary>
            Enumerated frame process modes to apply to animated images.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.AnimationProcessMode.All">
            <summary>
            Processes and keeps all the frames of an animated image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.AnimationProcessMode.First">
            <summary>
            Processes and keeps only the first frame of an animated image.
            </summary>
        </member>
        <member name="T:ImageProcessor.Imaging.ComputerArchitectureInfo">
            <summary>
            Encapsulates methods that provide information about the current computer architecture.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.ComputerArchitectureInfo.IsLittleEndian">
            <summary>
            Returns a value indicating whether the current computer architecture is little endian. 
            </summary>
            <returns>The <see cref="T:System.Boolean"/></returns>
        </member>
        <member name="T:ImageProcessor.Imaging.Formats.IAnimatedImageFormat">
            <summary>
            The IAnimatedImageFormat interface for identifying animated image formats.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Formats.IAnimatedImageFormat.AnimationProcessMode">
            <summary>
            Gets or sets the animation process mode.
            </summary>
        </member>
        <member name="T:ImageProcessor.Imaging.Formats.GifDecoder">
            <summary>
            Decodes gifs to provides information.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.Formats.GifDecoder.#ctor(System.Drawing.Image)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Imaging.Formats.GifDecoder"/> class.
            </summary>
            <param name="image">
            The <see cref="T:System.Drawing.Image"/> to decode.
            </param>
        </member>
        <member name="M:ImageProcessor.Imaging.Formats.GifDecoder.#ctor(System.Drawing.Image,ImageProcessor.Imaging.AnimationProcessMode)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Imaging.Formats.GifDecoder"/> class.
            </summary>
            <param name="image">
            The <see cref="T:System.Drawing.Image"/> to decode.
            </param>
            <param name="animationProcessMode">
            The <see cref="T:ImageProcessor.Imaging.AnimationProcessMode" /> to use.
            </param>
        </member>
        <member name="P:ImageProcessor.Imaging.Formats.GifDecoder.Width">
            <summary>
            Gets or sets the image width.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Formats.GifDecoder.Height">
            <summary>
            Gets or sets the image height.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Formats.GifDecoder.IsAnimated">
            <summary>
            Gets or sets a value indicating whether the image is animated.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Formats.GifDecoder.LoopCount">
            <summary>
            Gets or sets the loop count.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Formats.GifDecoder.FrameCount">
            <summary>
            Gets or sets the frame count.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.Formats.GifDecoder.GetFrame(System.Drawing.Image,System.Int32)">
            <summary>
            Gets the frame at the specified index.
            </summary>
            <param name="image">The image.</param>
            <param name="index">The index.</param>
            <returns>
            The <see cref="T:ImageProcessor.Imaging.Formats.GifFrame"/>.
            </returns>
        </member>
        <member name="T:ImageProcessor.Imaging.Formats.IQuantizableImageFormat">
            <summary>
            The IndexedImageFormat interface for identifying quantizable image formats.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Formats.IQuantizableImageFormat.Quantizer">
            <summary>
            Gets or sets the quantizer for reducing the image palette.
            </summary>
        </member>
        <member name="T:ImageProcessor.Imaging.Formats.BitmapFormat">
            <summary>
            Provides the necessary information to support bitmap images.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Formats.BitmapFormat.FileHeaders">
            <summary>
            Gets the file headers.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Formats.BitmapFormat.FileExtensions">
            <summary>
            Gets the list of file extensions.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Formats.BitmapFormat.MimeType">
            <summary>
            Gets the standard identifier used on the Internet to indicate the type of data that a file contains.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Formats.BitmapFormat.ImageFormat">
            <summary>
            Gets the <see cref="P:ImageProcessor.Imaging.Formats.BitmapFormat.ImageFormat" />.
            </summary>
        </member>
        <member name="T:ImageProcessor.Imaging.Formats.TiffFormat">
            <summary>
            Provides the necessary information to support tiff images.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Formats.TiffFormat.FileHeaders">
            <summary>
            Gets the file headers.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Formats.TiffFormat.FileExtensions">
            <summary>
            Gets the list of file extensions.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Formats.TiffFormat.MimeType">
            <summary>
            Gets the standard identifier used on the Internet to indicate the type of data that a file contains.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Formats.TiffFormat.ImageFormat">
            <summary>
            Gets the <see cref="P:ImageProcessor.Imaging.Formats.TiffFormat.ImageFormat" />.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.Formats.TiffFormat.ApplyProcessor(System.Func{ImageProcessor.ImageFactory,System.Drawing.Image},ImageProcessor.ImageFactory)">
            <summary>
            Applies the given processor the current image.
            </summary>
            <param name="processor">The processor delegate.</param>
            <param name="factory">The <see cref="T:ImageProcessor.ImageFactory" />.</param>
        </member>
        <member name="M:ImageProcessor.Imaging.Formats.TiffFormat.Save(System.IO.Stream,System.Drawing.Image,System.Int64)">
            <summary>
            Saves the current image to the specified output stream.
            </summary>
            <param name="stream">
            The <see cref="T:System.IO.Stream"/> to save the image information to.
            </param>
            <param name="image">
            The <see cref="T:System.Drawing.Image"/> to save.
            </param>
            <param name="bitDepth">
            The color depth in number of bits per pixel to save the image with.
            </param>
            <returns>
            The <see cref="T:System.Drawing.Image"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Formats.TiffFormat.Save(System.String,System.Drawing.Image,System.Int64)">
            <summary>
            Saves the current image to the specified file path.
            </summary>
            <param name="path">The path to save the image to.</param>
            <param name="image">
            The <see cref="T:System.Drawing.Image"/> to save.
            </param>
            <param name="bitDepth">
            The color depth in number of bits per pixel to save the image with.
            </param>
            <returns>
            The <see cref="T:System.Drawing.Image"/>.
            </returns>
        </member>
        <member name="T:ImageProcessor.Imaging.Formats.PngFormat">
            <summary>
            Provides the necessary information to support png images.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Formats.PngFormat.FileHeaders">
            <summary>
            Gets the file headers.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Formats.PngFormat.FileExtensions">
            <summary>
            Gets the list of file extensions.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Formats.PngFormat.MimeType">
            <summary>
            Gets the standard identifier used on the Internet to indicate the type of data that a file contains.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Formats.PngFormat.ImageFormat">
            <summary>
            Gets the <see cref="P:ImageProcessor.Imaging.Formats.PngFormat.ImageFormat" />.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Formats.PngFormat.Quantizer">
            <summary>
            Gets or sets the quantizer for reducing the image palette.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.Formats.PngFormat.Save(System.IO.Stream,System.Drawing.Image,System.Int64)">
            <summary>
            Saves the current image to the specified output stream.
            </summary>
            <param name="stream">
            The <see cref="T:System.IO.Stream"/> to save the image information to.
            </param>
            <param name="image">
            The <see cref="T:System.Drawing.Image"/> to save.
            </param>
            <param name="bitDepth">
            The color depth in number of bits per pixel to save the image with.
            </param>
            <returns>
            The <see cref="T:System.Drawing.Image"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Formats.PngFormat.Save(System.String,System.Drawing.Image,System.Int64)">
            <summary>
            Saves the current image to the specified file path.
            </summary>
            <param name="path">The path to save the image to.</param>
            <param name="image">
            The <see cref="T:System.Drawing.Image"/> to save.
            </param>
            <param name="bitDepth">
            The color depth in number of bits per pixel to save the image with.
            </param>
            <returns>
            The <see cref="T:System.Drawing.Image"/>.
            </returns>
        </member>
        <member name="T:ImageProcessor.Imaging.Formats.GifFormat">
            <summary>
            Provides the necessary information to support gif images.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Formats.GifFormat.AnimationProcessMode">
            <summary>
            Gets or sets the process mode for frames in animated images.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Formats.GifFormat.FileHeaders">
            <summary>
            Gets the file headers.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Formats.GifFormat.FileExtensions">
            <summary>
            Gets the list of file extensions.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Formats.GifFormat.MimeType">
            <summary>
            Gets the standard identifier used on the Internet to indicate the type of data that a file contains. 
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Formats.GifFormat.ImageFormat">
            <summary>
            Gets the <see cref="P:ImageProcessor.Imaging.Formats.GifFormat.ImageFormat" />.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Formats.GifFormat.Quantizer">
            <summary>
            Gets or sets the quantizer for reducing the image palette.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.Formats.GifFormat.ApplyProcessor(System.Func{ImageProcessor.ImageFactory,System.Drawing.Image},ImageProcessor.ImageFactory)">
            <summary>
            Applies the given processor the current image.
            </summary>
            <param name="processor">The processor delegate.</param>
            <param name="factory">The <see cref="T:ImageProcessor.ImageFactory" />.</param>
        </member>
        <member name="M:ImageProcessor.Imaging.Formats.GifFormat.Save(System.IO.Stream,System.Drawing.Image,System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:ImageProcessor.Imaging.Formats.GifFormat.Save(System.String,System.Drawing.Image,System.Int64)">
            <inheritdoc />
        </member>
        <member name="T:ImageProcessor.Imaging.Formats.JpegFormat">
            <summary>
            Provides the necessary information to support jpeg images.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Formats.JpegFormat.FileHeaders">
            <summary>
            Gets the file headers.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Formats.JpegFormat.FileExtensions">
            <summary>
            Gets the list of file extensions.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Formats.JpegFormat.MimeType">
            <summary>
            Gets the standard identifier used on the Internet to indicate the type of data that a file contains.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Formats.JpegFormat.ImageFormat">
            <summary>
            Gets the <see cref="P:ImageProcessor.Imaging.Formats.JpegFormat.ImageFormat" />.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.Formats.JpegFormat.Save(System.IO.Stream,System.Drawing.Image,System.Int64)">
            <summary>
            Saves the current image to the specified output stream.
            </summary>
            <param name="stream">
            The <see cref="T:System.IO.Stream"/> to save the image information to.
            </param>
            <param name="image">
            The <see cref="T:System.Drawing.Image"/> to save.
            </param>
            <param name="bitDepth">
            The color depth in number of bits per pixel to save the image with.
            </param>
            <returns>
            The <see cref="T:System.Drawing.Image"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Formats.JpegFormat.Save(System.String,System.Drawing.Image,System.Int64)">
            <summary>
            Saves the current image to the specified file path.
            </summary>
            <param name="path">The path to save the image to.</param>
            <param name="image">
            The <see cref="T:System.Drawing.Image"/> to save.
            </param>
            <param name="bitDepth">
            The color depth in number of bits per pixel to save the image with.
            </param>
            <returns>
            The <see cref="T:System.Drawing.Image"/>.
            </returns>
        </member>
        <member name="T:ImageProcessor.Imaging.Formats.FormatUtilities">
            <summary>
            Utility methods for working with supported image formats.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.Formats.FormatUtilities.GetFormat(System.IO.Stream)">
            <summary>
            Gets the correct <see cref="T:ImageProcessor.Imaging.Formats.ISupportedImageFormat"/> from the given stream.
            <see href="http://stackoverflow.com/questions/55869/determine-file-type-of-an-image"/>
            </summary>
            <param name="stream">
            The <see cref="T:System.IO.Stream"/> to read from.
            </param>
            <returns>
            The <see cref="T:ImageProcessor.Imaging.Formats.ISupportedImageFormat"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Formats.FormatUtilities.IsIndexed(System.Drawing.Image)">
            <summary>
            Returns a value indicating whether the given image is indexed.
            </summary>
            <param name="image">
            The <see cref="T:System.Drawing.Image"/> to test.
            </param>
            <returns>
            The true if the image is indexed; otherwise, false.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Formats.FormatUtilities.HasAlpha(System.Drawing.Image)">
            <summary>
            Returns a value indicating whether the given image has an alpha channel.
            </summary>
            <param name="image">
            The <see cref="T:System.Drawing.Image"/> to test.
            </param>
            <returns>
            The true if the image has an alpha channel; otherwise, false.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Formats.FormatUtilities.IsAnimated(System.Drawing.Image)">
            <summary>
            Returns a value indicating whether the given image is animated.
            </summary>
            <param name="image">
            The <see cref="T:System.Drawing.Image"/> to test.
            </param>
            <returns>
            The true if the image is animated; otherwise, false.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Formats.FormatUtilities.GetEncodingParameters(System.Int32)">
            <summary>
            Returns an instance of EncodingParameters for jpeg compression.
            </summary>
            <param name="quality">The quality to return the image at.</param>
            <returns>The encodingParameters for jpeg compression. </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Formats.FormatUtilities.CreatePropertyItem">
            <summary>
            Uses reflection to allow the creation of an instance of <see cref="T:System.Drawing.Imaging.PropertyItem"/>.
            </summary>
            <returns>
            The <see cref="T:System.Drawing.Imaging.PropertyItem"/>.
            </returns>
        </member>
        <member name="T:ImageProcessor.Imaging.Formats.FormatBase">
            <summary>
            The supported format base. Implement this class when building a supported format.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.Formats.FormatBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Imaging.Formats.FormatBase"/> class.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Formats.FormatBase.FileHeaders">
            <summary>
            Gets the file headers.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Formats.FormatBase.FileExtensions">
            <summary>
            Gets the list of file extensions.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Formats.FormatBase.MimeType">
            <summary>
            Gets the standard identifier used on the Internet to indicate the type of data that a file contains.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Formats.FormatBase.DefaultExtension">
            <summary>
            Gets the default file extension.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Formats.FormatBase.ImageFormat">
            <summary>
            Gets the file format of the image. 
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Formats.FormatBase.IsIndexed">
            <summary>
            Gets or sets a value indicating whether the image format is indexed.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Formats.FormatBase.Quality">
            <summary>
            Gets or sets the quality of output for images.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.Formats.FormatBase.ApplyProcessor(System.Func{ImageProcessor.ImageFactory,System.Drawing.Image},ImageProcessor.ImageFactory)">
            <summary>
            Applies the given processor the current image.
            </summary>
            <param name="processor">The processor delegate.</param>
            <param name="factory">The <see cref="T:ImageProcessor.ImageFactory" />.</param>
        </member>
        <member name="M:ImageProcessor.Imaging.Formats.FormatBase.Load(System.IO.Stream)">
            <summary>
            Decodes the image to process.
            </summary>
            <param name="stream">
            The <see cref="T:System.IO.stream" /> containing the image information.
            </param>
            <returns>
            The <see cref="T:System.Drawing.Image" />.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Formats.FormatBase.Save(System.IO.Stream,System.Drawing.Image,System.Int64)">
            <summary>
            Saves the current image to the specified output stream.
            </summary>
            <param name="stream">
            The <see cref="T:System.IO.Stream"/> to save the image information to.
            </param>
            <param name="image">
            The <see cref="T:System.Drawing.Image"/> to save.
            </param>
            <param name="bitDepth">
            The color depth in number of bits per pixel to save the image with.
            </param>
            <returns>
            The <see cref="T:System.Drawing.Image"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Formats.FormatBase.Save(System.String,System.Drawing.Image,System.Int64)">
            <summary>
            Saves the current image to the specified file path.
            </summary>
            <param name="path">The path to save the image to.</param>
            <param name="image"> 
            The <see cref="T:System.Drawing.Image"/> to save.
            </param>
            <param name="bitDepth">
            The color depth in number of bits per pixel to save the image with.
            </param>
            <returns>
            The <see cref="T:System.Drawing.Image"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Formats.FormatBase.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Formats.FormatBase.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="T:ImageProcessor.Imaging.Formats.ISupportedImageFormat">
            <summary>
            The SupportedImageFormat interface providing information about image formats to ImageProcessor.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Formats.ISupportedImageFormat.FileHeaders">
            <summary>
            Gets the file headers.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Formats.ISupportedImageFormat.FileExtensions">
            <summary>
            Gets the list of file extensions.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Formats.ISupportedImageFormat.MimeType">
            <summary>
            Gets the standard identifier used on the Internet to indicate the type of data that a file contains. 
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Formats.ISupportedImageFormat.DefaultExtension">
            <summary>
            Gets the default file extension.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Formats.ISupportedImageFormat.ImageFormat">
            <summary>
            Gets the file format of the image. 
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Formats.ISupportedImageFormat.IsIndexed">
            <summary>
            Gets or sets a value indicating whether the image format is indexed.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Formats.ISupportedImageFormat.Quality">
            <summary>
            Gets or sets the quality of output for images.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.Formats.ISupportedImageFormat.ApplyProcessor(System.Func{ImageProcessor.ImageFactory,System.Drawing.Image},ImageProcessor.ImageFactory)">
            <summary>
            Applies the given processor the current image.
            </summary>
            <param name="processor">
            The processor delegate.
            </param>
            <param name="factory">
            The <see cref="T:ImageProcessor.ImageFactory"/>.
            </param>
        </member>
        <member name="M:ImageProcessor.Imaging.Formats.ISupportedImageFormat.Load(System.IO.Stream)">
            <summary>
            Loads the image to process. 
            </summary>
            <param name="stream">
            The <see cref="T:System.IO.Stream"/> containing the image information.
            </param>
            <returns>
            The <see cref="T:System.Drawing.Image"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Formats.ISupportedImageFormat.Save(System.IO.Stream,System.Drawing.Image,System.Int64)">
            <summary>
            Saves the current image to the specified output stream.
            </summary>
            <param name="stream">
            The <see cref="T:System.IO.Stream"/> to save the image information to.
            </param>
            <param name="image">
            The <see cref="T:System.Drawing.Image"/> to save.
            </param>
            <param name="bitDepth">
            The color depth in number of bits per pixel to save the image with.
            </param>
            <returns>
            The <see cref="T:System.Drawing.Image"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Formats.ISupportedImageFormat.Save(System.String,System.Drawing.Image,System.Int64)">
            <summary>
            Saves the current image to the specified file path.
            </summary>
            <param name="path">The path to save the image to.</param>
            <param name="image"> 
            The <see cref="T:System.Drawing.Image"/> to save.
            </param>
            <param name="bitDepth">
            The color depth in number of bits per pixel to save the image with.
            </param>
            <returns>
            The <see cref="T:System.Drawing.Image"/>.
            </returns>
        </member>
        <member name="T:ImageProcessor.Imaging.Formats.GifEncoder">
            <summary>
            Encodes multiple images as an animated gif to a stream.
            <remarks>
            Uses default .NET GIF encoding and adds animation headers.
            Adapted from <see href="http://github.com/DataDink/Bumpkit/blob/master/BumpKit/BumpKit/GifEncoder.cs"/>
            </remarks>
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Formats.GifEncoder.ApplicationBlockSize">
            <summary>
            The application block size.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Formats.GifEncoder.ApplicationExtensionBlockIdentifier">
            <summary>
            The application extension block identifier.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Formats.GifEncoder.ApplicationIdentification">
            <summary>
            The application identification.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Formats.GifEncoder.FileTrailer">
            <summary>
            The file trailer.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Formats.GifEncoder.FileType">
            <summary>
            The file type.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Formats.GifEncoder.FileVersion">
            <summary>
            The file version.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Formats.GifEncoder.GraphicControlExtensionBlockIdentifier">
            <summary>
            The graphic control extension block identifier.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Formats.GifEncoder.GraphicControlExtensionBlockSize">
            <summary>
            The graphic control extension block size.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Formats.GifEncoder.SourceColorBlockLength">
            <summary>
            The source color block length.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Formats.GifEncoder.SourceColorBlockPosition">
            <summary>
            The source color block position.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Formats.GifEncoder.SourceGlobalColorInfoPosition">
            <summary>
            The source global color info position.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Formats.GifEncoder.SourceGraphicControlExtensionLength">
            <summary>
            The source graphic control extension length.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Formats.GifEncoder.SourceGraphicControlExtensionPosition">
            <summary>
            The source graphic control extension position.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Formats.GifEncoder.SourceImageBlockHeaderLength">
            <summary>
            The source image block header length.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Formats.GifEncoder.SourceImageBlockPosition">
            <summary>
            The source image block position.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Formats.GifEncoder.Converter">
            <summary>
            The converter for creating the output image from a byte array.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Formats.GifEncoder.imageStream">
            <summary>
            The stream.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Formats.GifEncoder.height">
            <summary>
            The height.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Formats.GifEncoder.isFirstImage">
            <summary>
            The is first image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Formats.GifEncoder.repeatCount">
            <summary>
            The repeat count.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Formats.GifEncoder.width">
            <summary>
            The width.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Formats.GifEncoder.terminated">
            <summary>
            Whether the gif has has the last terminated byte written.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.Formats.GifEncoder.#ctor(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Imaging.Formats.GifEncoder"/> class.
            </summary>
            <param name="width">
            Sets the width for this gif or null to use the first frame's width.
            </param>
            <param name="height">
            Sets the height for this gif or null to use the first frame's height.
            </param>
            <param name="repeatCount">
            The number of times to repeat the animation.
            </param>
        </member>
        <member name="P:ImageProcessor.Imaging.Formats.GifEncoder.ImageBytes">
            <summary>
            Gets or sets the image bytes.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.Formats.GifEncoder.AddFrame(ImageProcessor.Imaging.Formats.GifFrame)">
            <summary>
            Adds a frame to the gif.
            </summary>
            <param name="frame">
            The <see cref="T:ImageProcessor.Imaging.Formats.GifFrame"/> containing the image.
            </param>
        </member>
        <member name="M:ImageProcessor.Imaging.Formats.GifEncoder.Save">
            <summary>
            Saves the completed gif to an <see cref="T:System.Drawing.Image"/>
            </summary>
            <returns>The completed animated gif.</returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Formats.GifEncoder.Save(System.IO.Stream)">
            <summary>
            Saves the completed gif to an <see cref="T:System.IO.Stream"/>
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:ImageProcessor.Imaging.Formats.GifEncoder.WriteHeaderBlock(System.IO.Stream,System.Int32,System.Int32)">
            <summary>
            Writes the header block of the animated gif to the stream.
            </summary>
            <param name="sourceGif">
            The source gif.
            </param>
            <param name="w">
            The width of the image.
            </param>
            <param name="h">
            The height of the image.
            </param>
        </member>
        <member name="M:ImageProcessor.Imaging.Formats.GifEncoder.WriteByte(System.Int32)">
            <summary>
            Writes the given integer as a byte to the stream.
            </summary>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:ImageProcessor.Imaging.Formats.GifEncoder.WriteColorTable(System.IO.Stream)">
            <summary>
            Writes the color table.
            </summary>
            <param name="sourceGif">
            The source gif.
            </param>
        </member>
        <member name="M:ImageProcessor.Imaging.Formats.GifEncoder.WriteGraphicControlBlock(System.IO.Stream,System.Int32)">
            <summary>
            Writes graphic control block.
            </summary>
            <param name="sourceGif">The source gif.</param>
            <param name="frameDelay">The frame delay.</param>
        </member>
        <member name="M:ImageProcessor.Imaging.Formats.GifEncoder.WriteImageBlock(System.IO.Stream,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Writes image block data.
            </summary>
            <param name="sourceGif">The source gif.</param>
            <param name="includeColorTable">The include color table.</param>
            <param name="x">The x position to write the image block.</param>
            <param name="y">The y position to write the image block.</param>
            <param name="h">The height of the image block.</param>
            <param name="w">
            The width of the image block.
            </param>
        </member>
        <member name="M:ImageProcessor.Imaging.Formats.GifEncoder.WriteShort(System.Int32)">
            <summary>
            The write short.
            </summary>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:ImageProcessor.Imaging.Formats.GifEncoder.WriteString(System.String)">
            <summary>
            The write string.
            </summary>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="T:ImageProcessor.Imaging.Formats.GifFrame">
            <summary>
            A single gif frame.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Formats.GifFrame.Image">
            <summary>
            Gets or sets the image.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Formats.GifFrame.Delay">
            <summary>
            Gets or sets the delay in milliseconds.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Formats.GifFrame.X">
            <summary>
            Gets or sets the x position of the frame.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Formats.GifFrame.Y">
            <summary>
            Gets or sets the Y position of the frame.
            </summary>
        </member>
        <member name="T:ImageProcessor.Imaging.Helpers.BigEndianBitConverter">
            <summary>
              Implementation of EndianBitConverter which converts to/from big-endian
              byte arrays.
              <remarks>
              Adapted from Miscellaneous Utility Library <see href="http://jonskeet.uk/csharp/miscutil/" />
              This product includes software developed by Jon Skeet and Marc Gravell. Contact <see href="mailto:skeet@pobox.com" />, or see
              <see href="http://www.pobox.com/~skeet/" />.
              </remarks>
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Helpers.BigEndianBitConverter.Endianness">
            <summary>
            Indicates the byte order ("endianness") in which data is converted using this class.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.Helpers.BigEndianBitConverter.IsLittleEndian">
            <summary>
            Indicates the byte order ("endianness") in which data is converted using this class.
            </summary>
            <remarks>
            Different computer architectures store data using different byte orders. "Big-endian"
            means the most significant byte is on the left end of a word. "Little-endian" means the 
            most significant byte is on the right end of a word.
            </remarks>
            <returns>true if this converter is little-endian, false otherwise.</returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Helpers.BigEndianBitConverter.CopyBytesImpl(System.Int64,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Copies the specified number of bytes from value to buffer, starting at index.
            </summary>
            <param name="value">The value to copy</param>
            <param name="bytes">The number of bytes to copy</param>
            <param name="buffer">The buffer to copy the bytes into</param>
            <param name="index">The index to start at</param>
        </member>
        <member name="M:ImageProcessor.Imaging.Helpers.BigEndianBitConverter.FromBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Returns a value built from the specified number of bytes from the given buffer,
            starting at index.
            </summary>
            <param name="buffer">The data in byte array format</param>
            <param name="startIndex">The first index to use</param>
            <param name="bytesToConvert">The number of bytes to use</param>
            <returns>The value built from the given bytes</returns>
        </member>
        <member name="T:ImageProcessor.Imaging.Helpers.Endianness">
            <summary>
            Endianness of a converter
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Helpers.Endianness.LittleEndian">
            <summary>
            Little endian - least significant byte first
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Helpers.Endianness.BigEndian">
            <summary>
            Big endian - most significant byte first
            </summary>
        </member>
        <member name="T:ImageProcessor.Imaging.Helpers.LittleEndianBitConverter">
            <summary>
            Implementation of EndianBitConverter which converts to/from little-endian
            byte arrays.
            <remarks>
            Adapted from Miscellaneous Utility Library <see href="http://jonskeet.uk/csharp/miscutil/"/>
            This product includes software developed by Jon Skeet and Marc Gravell. Contact <see href="mailto:skeet@pobox.com"/>, or see 
            <see href="http://www.pobox.com/~skeet/"/>.
            </remarks>
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Helpers.LittleEndianBitConverter.Endianness">
            <summary>
            Indicates the byte order ("endianness") in which data is converted using this class.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.Helpers.LittleEndianBitConverter.IsLittleEndian">
            <summary>
            Indicates the byte order ("endianness") in which data is converted using this class.
            </summary>
            <remarks>
            Different computer architectures store data using different byte orders. "Big-endian"
            means the most significant byte is on the left end of a word. "Little-endian" means the 
            most significant byte is on the right end of a word.
            </remarks>
            <returns>true if this converter is little-endian, false otherwise.</returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Helpers.LittleEndianBitConverter.CopyBytesImpl(System.Int64,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Copies the specified number of bytes from value to buffer, starting at index.
            </summary>
            <param name="value">The value to copy</param>
            <param name="bytes">The number of bytes to copy</param>
            <param name="buffer">The buffer to copy the bytes into</param>
            <param name="index">The index to start at</param>
        </member>
        <member name="M:ImageProcessor.Imaging.Helpers.LittleEndianBitConverter.FromBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Returns a value built from the specified number of bytes from the given buffer,
            starting at index.
            </summary>
            <param name="buffer">The data in byte array format</param>
            <param name="startIndex">The first index to use</param>
            <param name="bytesToConvert">The number of bytes to use</param>
            <returns>The value built from the given bytes</returns>
        </member>
        <member name="T:ImageProcessor.Imaging.Helpers.EndianBitConverter">
            <summary>
            Equivalent of <see cref="T:System.BitConverter"/>, but with either endianness.
            <remarks>
            Adapted from Miscellaneous Utility Library <see href="http://jonskeet.uk/csharp/miscutil/"/>
            This product includes software developed by Jon Skeet and Marc Gravell. Contact <see href="mailto:skeet@pobox.com"/>, or see 
            <see href="http://www.pobox.com/~skeet/"/>.
            </remarks>
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.Helpers.EndianBitConverter.IsLittleEndian">
            <summary>
            Indicates the byte order ("endianness") in which data is converted using this class.
            </summary>
            <remarks>
            Different computer architectures store data using different byte orders. "Big-endian"
            means the most significant byte is on the left end of a word. "Little-endian" means the 
            most significant byte is on the right end of a word.
            </remarks>
            <returns>true if this converter is little-endian, false otherwise.</returns>
        </member>
        <member name="P:ImageProcessor.Imaging.Helpers.EndianBitConverter.Endianness">
            <summary>
            Gets the byte order ("endianness") in which data is converted using this class.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Helpers.EndianBitConverter.Little">
            <summary>
            Gets a little-endian bit converter instance. The same instance is
            always returned.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Helpers.EndianBitConverter.Big">
            <summary>
            Gets a big-endian bit converter instance. The same instance is
            always returned.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.Helpers.EndianBitConverter.DoubleToInt64Bits(System.Double)">
            <summary>
            Converts the specified double-precision floating point number to a 
            64-bit signed integer. Note: the endianness of this converter does not
            affect the returned value.
            </summary>
            <param name="value">The number to convert. </param>
            <returns>A 64-bit signed integer whose value is equivalent to value.</returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Helpers.EndianBitConverter.Int64BitsToDouble(System.Int64)">
            <summary>
            Converts the specified 64-bit signed integer to a double-precision 
            floating point number. Note: the endianness of this converter does not
            affect the returned value.
            </summary>
            <param name="value">The number to convert. </param>
            <returns>A double-precision floating point number whose value is equivalent to value.</returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Helpers.EndianBitConverter.SingleToInt32Bits(System.Single)">
            <summary>
            Converts the specified single-precision floating point number to a 
            32-bit signed integer. Note: the endianness of this converter does not
            affect the returned value.
            </summary>
            <param name="value">The number to convert. </param>
            <returns>A 32-bit signed integer whose value is equivalent to value.</returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Helpers.EndianBitConverter.Int32BitsToSingle(System.Int32)">
            <summary>
            Converts the specified 32-bit signed integer to a single-precision floating point 
            number. Note: the endianness of this converter does not
            affect the returned value.
            </summary>
            <param name="value">The number to convert. </param>
            <returns>A single-precision floating point number whose value is equivalent to value.</returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Helpers.EndianBitConverter.ToBoolean(System.Byte[],System.Int32)">
            <summary>
            Returns a Boolean value converted from one byte at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>true if the byte at startIndex in value is nonzero; otherwise, false.</returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Helpers.EndianBitConverter.ToChar(System.Byte[],System.Int32)">
            <summary>
            Returns a Unicode character converted from two bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A character formed by two bytes beginning at startIndex.</returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Helpers.EndianBitConverter.ToDouble(System.Byte[],System.Int32)">
            <summary>
            Returns a double-precision floating point number converted from eight bytes 
            at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A double precision floating point number formed by eight bytes beginning at startIndex.</returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Helpers.EndianBitConverter.ToSingle(System.Byte[],System.Int32)">
            <summary>
            Returns a single-precision floating point number converted from four bytes 
            at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A single precision floating point number formed by four bytes beginning at startIndex.</returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Helpers.EndianBitConverter.ToInt16(System.Byte[],System.Int32)">
            <summary>
            Returns a 16-bit signed integer converted from two bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 16-bit signed integer formed by two bytes beginning at startIndex.</returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Helpers.EndianBitConverter.ToInt32(System.Byte[],System.Int32)">
            <summary>
            Returns a 32-bit signed integer converted from four bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 32-bit signed integer formed by four bytes beginning at startIndex.</returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Helpers.EndianBitConverter.ToInt64(System.Byte[],System.Int32)">
            <summary>
            Returns a 64-bit signed integer converted from eight bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 64-bit signed integer formed by eight bytes beginning at startIndex.</returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Helpers.EndianBitConverter.ToUInt16(System.Byte[],System.Int32)">
            <summary>
            Returns a 16-bit unsigned integer converted from two bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 16-bit unsigned integer formed by two bytes beginning at startIndex.</returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Helpers.EndianBitConverter.ToUInt32(System.Byte[],System.Int32)">
            <summary>
            Returns a 32-bit unsigned integer converted from four bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 32-bit unsigned integer formed by four bytes beginning at startIndex.</returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Helpers.EndianBitConverter.ToUInt64(System.Byte[],System.Int32)">
            <summary>
            Returns a 64-bit unsigned integer converted from eight bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 64-bit unsigned integer formed by eight bytes beginning at startIndex.</returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Helpers.EndianBitConverter.FromBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Convert the given number of bytes from the given array, from the given start
            position, into a long, using the bytes as the least significant part of the long.
            By the time this is called, the arguments have been checked for validity.
            </summary>
            <param name="value">The bytes to convert</param>
            <param name="startIndex">The index of the first byte to convert</param>
            <param name="bytesToConvert">The number of bytes to use in the conversion</param>
            <returns>The converted number</returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Helpers.EndianBitConverter.CheckByteArgument(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Checks the given argument for validity.
            </summary>
            <param name="value">The byte array passed in</param>
            <param name="startIndex">The start index passed in</param>
            <param name="bytesRequired">The number of bytes required</param>
            <exception cref="T:System.ArgumentNullException">value is a null reference</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            startIndex is less than zero or greater than the length of value minus bytesRequired.
            </exception>
        </member>
        <member name="M:ImageProcessor.Imaging.Helpers.EndianBitConverter.CheckedFromBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Checks the arguments for validity before calling FromBytes
            (which can therefore assume the arguments are valid).
            </summary>
            <param name="value">The bytes to convert after checking</param>
            <param name="startIndex">The index of the first byte to convert</param>
            <param name="bytesToConvert">The number of bytes to convert</param>
            <returns>The <see cref="T:System.Int64"/></returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Helpers.EndianBitConverter.ToString(System.Byte[])">
            <summary>
            Returns a String converted from the elements of a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <remarks>All the elements of value are converted.</remarks>
            <returns>
            A String of hexadecimal pairs separated by hyphens, where each pair 
            represents the corresponding element in value; for example, "7F-2C-4A".
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Helpers.EndianBitConverter.ToString(System.Byte[],System.Int32)">
            <summary>
            Returns a String converted from the elements of a byte array starting at a specified array position.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <remarks>The elements from array position startIndex to the end of the array are converted.</remarks>
            <returns>
            A String of hexadecimal pairs separated by hyphens, where each pair 
            represents the corresponding element in value; for example, "7F-2C-4A".
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Helpers.EndianBitConverter.ToString(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Returns a String converted from a specified number of bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <param name="length">The number of bytes to convert.</param>
            <remarks>The length elements from array position startIndex are converted.</remarks>
            <returns>
            A String of hexadecimal pairs separated by hyphens, where each pair 
            represents the corresponding element in value; for example, "7F-2C-4A".
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Helpers.EndianBitConverter.ToDecimal(System.Byte[],System.Int32)">
            <summary>
            Returns a decimal value converted from sixteen bytes 
            at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A decimal  formed by sixteen bytes beginning at startIndex.</returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Helpers.EndianBitConverter.GetBytes(System.Decimal)">
            <summary>
            Returns the specified decimal value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 16.</returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Helpers.EndianBitConverter.CopyBytes(System.Decimal,System.Byte[],System.Int32)">
            <summary>
            Copies the specified decimal value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">A character to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:ImageProcessor.Imaging.Helpers.EndianBitConverter.GetBytes(System.Int64,System.Int32)">
            <summary>
            Returns an array with the given number of bytes formed
            from the least significant bytes of the specified value.
            This is used to implement the other GetBytes methods.
            </summary>
            <param name="value">The value to get bytes for</param>
            <param name="bytes">The number of significant bytes to return</param>
            <returns>
            The <see cref="T:byte[]"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Helpers.EndianBitConverter.GetBytes(System.Boolean)">
            <summary>
            Returns the specified Boolean value as an array of bytes.
            </summary>
            <param name="value">A Boolean value.</param>
            <returns>An array of bytes with length 1.</returns>
            <returns>
            The <see cref="T:byte[]"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Helpers.EndianBitConverter.GetBytes(System.Char)">
            <summary>
            Returns the specified Unicode character value as an array of bytes.
            </summary>
            <param name="value">A character to convert.</param>
            <returns>An array of bytes with length 2.</returns>
            <returns>
            The <see cref="T:byte[]"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Helpers.EndianBitConverter.GetBytes(System.Double)">
            <summary>
            Returns the specified double-precision floating point value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 8.</returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Helpers.EndianBitConverter.GetBytes(System.Int16)">
            <summary>
            Returns the specified 16-bit signed integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 2.</returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Helpers.EndianBitConverter.GetBytes(System.Int32)">
            <summary>
            Returns the specified 32-bit signed integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 4.</returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Helpers.EndianBitConverter.GetBytes(System.Int64)">
            <summary>
            Returns the specified 64-bit signed integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 8.</returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Helpers.EndianBitConverter.GetBytes(System.Single)">
            <summary>
            Returns the specified single-precision floating point value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 4.</returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Helpers.EndianBitConverter.GetBytes(System.UInt16)">
            <summary>
            Returns the specified 16-bit unsigned integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 2.</returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Helpers.EndianBitConverter.GetBytes(System.UInt32)">
            <summary>
            Returns the specified 32-bit unsigned integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 4.</returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Helpers.EndianBitConverter.GetBytes(System.UInt64)">
            <summary>
            Returns the specified 64-bit unsigned integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 8.</returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Helpers.EndianBitConverter.CopyBytes(System.Int64,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Copies the given number of bytes from the least-specific
            end of the specified value into the specified byte array, beginning
            at the specified index.
            This is used to implement the other CopyBytes methods.
            </summary>
            <param name="value">The value to copy bytes for</param>
            <param name="bytes">The number of significant bytes to copy</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:ImageProcessor.Imaging.Helpers.EndianBitConverter.CopyBytesImpl(System.Int64,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Copies the given number of bytes from the least-specific
            end of the specified value into the specified byte array, beginning
            at the specified index.
            This must be implemented in concrete derived classes, but the implementation
            may assume that the value will fit into the buffer.
            </summary>
            <param name="value">The value to copy bytes for</param>
            <param name="bytes">The number of significant bytes to copy</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:ImageProcessor.Imaging.Helpers.EndianBitConverter.CopyBytes(System.Boolean,System.Byte[],System.Int32)">
            <summary>
            Copies the specified Boolean value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">A Boolean value.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:ImageProcessor.Imaging.Helpers.EndianBitConverter.CopyBytes(System.Char,System.Byte[],System.Int32)">
            <summary>
            Copies the specified Unicode character value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">A character to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:ImageProcessor.Imaging.Helpers.EndianBitConverter.CopyBytes(System.Double,System.Byte[],System.Int32)">
            <summary>
            Copies the specified double-precision floating point value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:ImageProcessor.Imaging.Helpers.EndianBitConverter.CopyBytes(System.Int16,System.Byte[],System.Int32)">
            <summary>
            Copies the specified 16-bit signed integer value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:ImageProcessor.Imaging.Helpers.EndianBitConverter.CopyBytes(System.Int32,System.Byte[],System.Int32)">
            <summary>
            Copies the specified 32-bit signed integer value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:ImageProcessor.Imaging.Helpers.EndianBitConverter.CopyBytes(System.Int64,System.Byte[],System.Int32)">
            <summary>
            Copies the specified 64-bit signed integer value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:ImageProcessor.Imaging.Helpers.EndianBitConverter.CopyBytes(System.Single,System.Byte[],System.Int32)">
            <summary>
            Copies the specified single-precision floating point value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:ImageProcessor.Imaging.Helpers.EndianBitConverter.CopyBytes(System.UInt16,System.Byte[],System.Int32)">
            <summary>
            Copies the specified 16-bit unsigned integer value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:ImageProcessor.Imaging.Helpers.EndianBitConverter.CopyBytes(System.UInt32,System.Byte[],System.Int32)">
            <summary>
            Copies the specified 32-bit unsigned integer value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:ImageProcessor.Imaging.Helpers.EndianBitConverter.CopyBytes(System.UInt64,System.Byte[],System.Int32)">
            <summary>
            Copies the specified 64-bit unsigned integer value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="T:ImageProcessor.Imaging.Helpers.EndianBitConverter.Int32SingleUnion">
            <summary>
            Union used solely for the equivalent of DoubleToInt64Bits and vice versa.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Helpers.EndianBitConverter.Int32SingleUnion.i">
            <summary>
            Int32 version of the value.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Helpers.EndianBitConverter.Int32SingleUnion.f">
            <summary>
            Single version of the value.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.Helpers.EndianBitConverter.Int32SingleUnion.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Imaging.Helpers.EndianBitConverter.Int32SingleUnion"/> struct. 
            </summary>
            <param name="i">The integer value of the new instance.</param>
        </member>
        <member name="M:ImageProcessor.Imaging.Helpers.EndianBitConverter.Int32SingleUnion.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Imaging.Helpers.EndianBitConverter.Int32SingleUnion"/> struct. 
            </summary>
            <param name="f">
            The floating point value of the new instance.
            </param>
        </member>
        <member name="P:ImageProcessor.Imaging.Helpers.EndianBitConverter.Int32SingleUnion.AsInt32">
            <summary>
            Gets the value of the instance as an integer.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Helpers.EndianBitConverter.Int32SingleUnion.AsSingle">
            <summary>
            Gets the value of the instance as a floating point number.
            </summary>
        </member>
        <member name="T:ImageProcessor.Imaging.Helpers.GraphicsHelper">
            <summary>
            The graphics helper.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.Helpers.GraphicsHelper.SetGraphicsOptions(System.Drawing.Graphics,System.Boolean,System.Boolean)">
            <summary>
            Set the default graphics options for drawing an image.
            </summary>
            <param name="graphics">The graphics.</param>
            <param name="blending">Whether the graphics object will be blending pixels.</param>
            <param name="smoothing">Whether the graphics object will be smoothing pixels.</param>
        </member>
        <member name="T:ImageProcessor.Imaging.Helpers.ImageMaths">
            <summary>
            Provides reusable mathematical methods to apply to images.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.Helpers.ImageMaths.CenteredRectangle(System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Gets a <see cref="T:System.Drawing.Rectangle"/> representing the child centered relative to the parent.
            </summary>
            <param name="parent">
            The parent <see cref="T:System.Drawing.Rectangle"/>.
            </param>
            <param name="child">
            The child <see cref="T:System.Drawing.Rectangle"/>.
            </param>
            <returns>
            The centered <see cref="T:System.Drawing.Rectangle"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Helpers.ImageMaths.Clamp``1(``0,``0,``0)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">
            The The value to clamp.
            </param>
            <param name="min">
            The minimum value. If value is less than min, min will be returned.
            </param>
            <param name="max">
            The maximum value. If value is greater than max, max will be returned.
            </param>
            <typeparam name="T">
            The <see cref="T:System.Type"/> to clamp.
            </typeparam>
            <returns>
            The <see cref="T:System.IComparable`1"/> representing the clamped value.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Helpers.ImageMaths.InRange``1(``0,``0,``0,System.Boolean)">
            <summary>
            Returns value indicating whether the given number is with in the minimum and maximum
            given range.
            </summary>
            <param name="value">The The value to clamp.</param>
            <param name="min">If <paramref name="include"/>The minimum range value.</param>
            <param name="max">The maximum range value.</param>
            <param name="include">Whether to include the minimum and maximum values. Defaults to true.</param>
            <typeparam name="T">The <see cref="T:System.Type"/> to test.</typeparam>
            <returns>
            True if the value falls within the maximum and minimum; otherwise, false.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Helpers.ImageMaths.DegreesToRadians(System.Double)">
            <summary>
            Returns the given degrees converted to radians.
            </summary>
            <param name="angleInDegrees">
            The angle in degrees.
            </param>
            <returns>
            The <see cref="T:System.Double"/> representing the degree as radians.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Helpers.ImageMaths.GetBoundingRectangle(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Gets the bounding <see cref="T:System.Drawing.Rectangle"/> from the given points.
            </summary>
            <param name="topLeft">
            The <see cref="T:System.Drawing.Point"/> designating the top left position.
            </param>
            <param name="bottomRight">
            The <see cref="T:System.Drawing.Point"/> designating the bottom right position.
            </param>
            <returns>
            The bounding <see cref="T:System.Drawing.Rectangle"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Helpers.ImageMaths.GetBoundingRotatedRectangle(System.Int32,System.Int32,System.Single)">
            <summary>
            Calculates the new size after rotation.
            </summary>
            <param name="width">The width of the image.</param>
            <param name="height">The height of the image.</param>
            <param name="angleInDegrees">The angle of rotation.</param>
            <returns>The new size of the image</returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Helpers.ImageMaths.GetFilteredBoundingRectangle(System.Drawing.Image,System.Byte,ImageProcessor.Imaging.Colors.RgbaComponent)">
            <summary>
            Finds the bounding rectangle based on the first instance of any color component other
            than the given one.
            </summary>
            <param name="bitmap">
            The <see cref="T:System.Drawing.Image"/> to search within.
            </param>
            <param name="componentValue">
            The color component value to remove.
            </param>
            <param name="channel">
            The <see cref="T:ImageProcessor.Imaging.Colors.RgbaComponent"/> channel to test against.
            </param>
            <returns>
            The <see cref="T:System.Drawing.Rectangle"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Helpers.ImageMaths.RotatePoint(System.Drawing.Point,System.Double,System.Nullable{System.Drawing.Point})">
            <summary>
            Rotates one point around another
            <see href="http://stackoverflow.com/a/13695630/82333"/>
            </summary>
            <param name="pointToRotate">The point to rotate.</param>
            <param name="angleInDegrees">The rotation angle in degrees.</param>
            <param name="centerPoint">The centre point of rotation. If not set the point will equal
            <see cref="F:System.Drawing.Point.Empty"/>
            </param>
            <returns>Rotated point</returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Helpers.ImageMaths.ToPoints(System.Drawing.Rectangle)">
            <summary>
            Returns the array of <see cref="T:System.Drawing.Point"/> matching the bounds of the given rectangle.
            </summary>
            <param name="rectangle">
            The <see cref="T:System.Drawing.Rectangle"/> to return the points from.
            </param>
            <returns>
            The <see cref="T:System.Drawing.Point"/> array.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Helpers.ImageMaths.ZoomAfterRotation(System.Int32,System.Int32,System.Single)">
            <summary>
            Calculates the zoom needed after the rotation to ensure the canvas is covered
            by the rotated image.
            </summary>
            <param name="imageWidth">Width of the image.</param>
            <param name="imageHeight">Height of the image.</param>
            <param name="angleInDegrees">The angle in degrees.</param>
            <remarks>
            Based on <see href="http://math.stackexchange.com/questions/1070853/"/>
            </remarks>
            <returns>The zoom needed</returns>
        </member>
        <member name="T:ImageProcessor.Imaging.Helpers.PixelOperations">
            <summary>
            Performs per-pixel operations.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Helpers.PixelOperations.LinearBytes">
            <summary>
            The array of bytes representing each possible value of color component
            converted from sRGB to the linear color space.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Helpers.PixelOperations.SRGBBytes">
            <summary>
            The array of bytes representing each possible value of color component
            converted from linear to the sRGB color space.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Helpers.PixelOperations.LinearGammaBytes">
            <summary>
            The array of bytes representing each possible value of color component
            converted from gamma to the linear color space.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Helpers.PixelOperations.GammaLinearBytes">
            <summary>
            The array of bytes representing each possible value of color component
            converted from linear to the gamma color space.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.Helpers.PixelOperations.Gamma(System.Drawing.Color,System.Single)">
            <summary>
            Returns the given color adjusted by the given gamma value.
            </summary>
            <param name="color">
            The <see cref="T:System.Drawing.Color"/> to adjust.
            </param>
            <param name="value">
            The gamma value - Between .1 and 5.
            </param>
            <returns>
            The adjusted <see cref="T:System.Drawing.Color"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the given gamma value is out with the acceptable range.
            </exception>
        </member>
        <member name="M:ImageProcessor.Imaging.Helpers.PixelOperations.ToLinear(System.Drawing.Color)">
            <summary>
            Converts an pixel from an sRGB color-space to the equivalent linear color-space.
            </summary>
            <param name="composite">
            The <see cref="T:System.Drawing.Color"/> to convert.
            </param>
            <returns>
            The <see cref="T:System.Drawing.Color"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Helpers.PixelOperations.ToSRGB(System.Drawing.Color)">
            <summary>
            Converts an image from a linear color-space to the equivalent sRGB color-space.
            </summary>
            <param name="linear">
            The <see cref="T:System.Drawing.Color"/> to convert.
            </param>
            <returns>
            The <see cref="T:System.Drawing.Bitmap"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Helpers.PixelOperations.ToLinearFromGamma(System.Drawing.Color)">
            <summary>
            Converts an pixel from a gamma color-space to the equivalent linear color-space.
            </summary>
            <param name="composite">
            The <see cref="T:System.Drawing.Color"/> to convert.
            </param>
            <returns>
            The <see cref="T:System.Drawing.Color"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Helpers.PixelOperations.ToGammaFromLinear(System.Drawing.Color)">
            <summary>
            Converts an pixel from a linear color-space to the equivalent gamma color-space.
            </summary>
            <param name="composite">
            The <see cref="T:System.Drawing.Color"/> to convert.
            </param>
            <returns>
            The <see cref="T:System.Drawing.Color"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Helpers.PixelOperations.GetLinearGammaBytes">
            <summary>
            Gets an array of bytes representing each possible value of color component
            converted from gamma to the linear color space.
            </summary>
            <returns>
            The <see cref="T:byte[]"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Helpers.PixelOperations.GetGammaLinearBytes">
            <summary>
            Gets an array of bytes representing each possible value of color component
            converted from linear to the gamma color space.
            </summary>
            <returns>
            The <see cref="T:byte[]"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Helpers.PixelOperations.GetLinearBytes">
            <summary>
            Gets an array of bytes representing each possible value of color component
            converted from sRGB to the linear color space.
            </summary>
            <returns>
            The <see cref="T:byte[]"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Helpers.PixelOperations.GetSRGBBytes">
            <summary>
            Gets an array of bytes representing each possible value of color component
            converted from linear to the sRGB color space.
            </summary>
            <returns>
            The <see cref="T:byte[]"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Helpers.PixelOperations.SRGBToLinear(System.Single)">
            <summary>
            Gets the correct linear value from an sRGB signal.
            <see href="http://www.4p8.com/eric.brasseur/gamma.html#formulas"/>
            <see href="http://entropymine.com/imageworsener/srgbformula/"/>
            </summary>
            <param name="signal">The signal value to convert.</param>
            <returns>
            The <see cref="T:System.Single"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Helpers.PixelOperations.LinearToSRGB(System.Single)">
            <summary>
            Gets the correct sRGB value from an linear signal.
            <see href="http://www.4p8.com/eric.brasseur/gamma.html#formulas"/>
            <see href="http://entropymine.com/imageworsener/srgbformula/"/>
            </summary>
            <param name="signal">The signal value to convert.</param>
            <returns>
            The <see cref="T:System.Single"/>.
            </returns>
        </member>
        <member name="T:ImageProcessor.Imaging.Helpers.Adjustments">
            <summary>
            Provides reusable adjustment methods to apply to images.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Helpers.Adjustments.LinearBytes">
            <summary>
            The array of bytes representing each possible value of color component
            converted from sRGB to the linear color space.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Helpers.Adjustments.SRGBBytes">
            <summary>
            The array of bytes representing each possible value of color component
            converted from linear to the sRGB color space.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.Helpers.Adjustments.Alpha(System.Drawing.Image,System.Int32,System.Nullable{System.Drawing.Rectangle})">
            <summary>
            Adjusts the alpha component of the given image.
            </summary>
            <param name="source">
            The <see cref="T:System.Drawing.Image"/> source to adjust.
            </param>
            <param name="percentage">
            The percentage value between 0 and 100 for adjusting the opacity.
            </param>
            <param name="rectangle">The rectangle to define the bounds of the area to adjust the opacity. 
            If null then the effect is applied to the entire image.</param>
            <returns>
            The <see cref="T:System.Drawing.Bitmap"/> with the alpha component adjusted.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the percentage value falls outside the acceptable range.
            </exception>
        </member>
        <member name="M:ImageProcessor.Imaging.Helpers.Adjustments.Brightness(System.Drawing.Image,System.Int32,System.Nullable{System.Drawing.Rectangle})">
            <summary>
            Adjusts the brightness component of the given image.
            </summary>
            <param name="source">
            The <see cref="T:System.Drawing.Image"/> source to adjust.
            </param>
            <param name="threshold">
            The threshold value between -100 and 100 for adjusting the brightness.
            </param>
            <param name="rectangle">The rectangle to define the bounds of the area to adjust the brightness. 
            If null then the effect is applied to the entire image.</param>
            <returns>
            The <see cref="T:System.Drawing.Bitmap"/> with the brightness adjusted.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the threshold value falls outside the acceptable range.
            </exception>
        </member>
        <member name="M:ImageProcessor.Imaging.Helpers.Adjustments.Contrast(System.Drawing.Image,System.Int32,System.Nullable{System.Drawing.Rectangle})">
            <summary>
            Adjusts the contrast component of the given image.
            </summary>
            <param name="source">
            The <see cref="T:System.Drawing.Image"/> source to adjust.
            </param>
            <param name="threshold">
            The threshold value between -100 and 100 for adjusting the contrast.
            </param>
            <param name="rectangle">The rectangle to define the bounds of the area to adjust the contrast. 
            If null then the effect is applied to the entire image.</param>
            <returns>
            The <see cref="T:System.Drawing.Bitmap"/> with the contrast adjusted.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the threshold value falls outside the acceptable range.
            </exception>
        </member>
        <member name="M:ImageProcessor.Imaging.Helpers.Adjustments.Gamma(System.Drawing.Image,System.Single)">
            <summary>
            Adjust the gamma (intensity of the light) component of the given image.
            </summary>
            <param name="source">
            The <see cref="T:System.Drawing.Image"/> source to adjust.
            </param>
            <param name="value">
            The value to adjust the gamma by (typically between .2 and 5).
            </param>
            <returns>
            The <see cref="T:System.Drawing.Bitmap"/> with the gamma adjusted.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the value falls outside the acceptable range.
            </exception>
        </member>
        <member name="M:ImageProcessor.Imaging.Helpers.Adjustments.ToLinear(System.Drawing.Image)">
            <summary>
            Converts an image from an sRGB color-space to the equivalent linear color-space.
            </summary>
            <param name="source">
            The <see cref="T:System.Drawing.Image"/> source to convert.
            </param>
            <returns>
            The <see cref="T:System.Drawing.Bitmap"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Helpers.Adjustments.ToSRGB(System.Drawing.Image)">
            <summary>
            Converts an image from a linear color-space to the equivalent sRGB color-space.
            </summary>
            <param name="source">
            The <see cref="T:System.Drawing.Image"/> source to convert.
            </param>
            <returns>
            The <see cref="T:System.Drawing.Bitmap"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Helpers.Adjustments.GetLinearBytes">
            <summary>
            Gets an array of bytes representing each possible value of color component
            converted from sRGB to the linear color space.
            </summary>
            <returns>
            The <see cref="T:byte[]"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Helpers.Adjustments.GetSRGBBytes">
            <summary>
            Gets an array of bytes representing each possible value of color component
            converted from linear to the sRGB color space.
            </summary>
            <returns>
            The <see cref="T:byte[]"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Helpers.Adjustments.SRGBToLinear(System.Single)">
            <summary>
            Gets the correct linear value from an sRGB signal.
            <see href="http://www.4p8.com/eric.brasseur/gamma.html#formulas"/>
            <see href="http://entropymine.com/imageworsener/srgbformula/"/>
            </summary>
            <param name="signal">The signal value to convert.</param>
            <returns>
            The <see cref="T:System.Single"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Helpers.Adjustments.LinearToSRGB(System.Single)">
            <summary>
            Gets the correct sRGB value from an linear signal.
            <see href="http://www.4p8.com/eric.brasseur/gamma.html#formulas"/>
            <see href="http://entropymine.com/imageworsener/srgbformula/"/>
            </summary>
            <param name="signal">The signal value to convert.</param>
            <returns>
            The <see cref="T:System.Single"/>.
            </returns>
        </member>
        <member name="T:ImageProcessor.Imaging.Helpers.Effects">
            <summary>
            Provides reusable effect methods to apply to images.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.Helpers.Effects.Vignette(System.Drawing.Image,System.Drawing.Color,System.Nullable{System.Drawing.Rectangle},System.Boolean)">
            <summary>
            Adds a vignette effect to the source image based on the given color.
            </summary>
            <param name="source">
            The <see cref="T:System.Drawing.Image"/> source.
            </param>
            <param name="baseColor">
            <see cref="T:System.Drawing.Color"/> to base the vignette on.
            </param>
            <param name="rectangle">
            The rectangle to define the bounds of the area to vignette. If null then the effect is applied
            to the entire image.
            </param>
            <param name="invert">
            Whether to invert the vignette.
            </param>
            <returns>
            The <see cref="T:System.Drawing.Bitmap"/> with the vignette applied.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Helpers.Effects.Glow(System.Drawing.Image,System.Drawing.Color,System.Nullable{System.Drawing.Rectangle})">
            <summary>
            Adds a diffused glow (inverted vignette) effect to the source image based on the given color.
            </summary>
            <param name="source">The <see cref="T:System.Drawing.Image"/> source.</param>
            <param name="baseColor"><see cref="T:System.Drawing.Color"/> to base the vignette on.</param>
            <param name="rectangle">The rectangle to define the bounds of the area to vignette. If null then the effect is applied
            to the entire image.</param>
            <returns>The <see cref="T:System.Drawing.Bitmap"/> with the vignette applied.</returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Helpers.Effects.ApplyMask(System.Drawing.Image,System.Drawing.Image)">
            <summary>
            Applies the given image mask to the source.
            </summary>
            <param name="source">
            The source <see cref="T:System.Drawing.Image"/>.
            </param>
            <param name="mask">
            The mask <see cref="T:System.Drawing.Image"/>.
            </param>
            <exception cref="T:System.ArgumentException">
            Thrown if the two images are of different size.
            </exception>
            <returns>
            The masked <see cref="T:System.Drawing.Bitmap"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Helpers.Effects.Trace(System.Drawing.Image,System.Drawing.Image,System.Byte)">
            <summary>
            Traces the edges of a given <see cref="T:System.Drawing.Image"/>.
            </summary>
            <param name="source">
            The source <see cref="T:System.Drawing.Image"/>.
            </param>
            <param name="destination">
            The destination <see cref="T:System.Drawing.Image"/>.
            </param>
            <param name="threshold">
            The threshold (between 0 and 255).
            </param>
            <returns>
            The a new instance of <see cref="T:System.Drawing.Bitmap"/> traced.
            </returns>
        </member>
        <member name="T:ImageProcessor.Imaging.IComputerArchitectureInfo">
            <summary>
            Encapsulates methods that provide information about the current computer architecture.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.IComputerArchitectureInfo.IsLittleEndian">
            <summary>
            Returns a value indicating whether the current computer architecture is little endian. 
            </summary>
            <returns>The <see cref="T:System.Boolean"/></returns>
        </member>
        <member name="T:ImageProcessor.Imaging.Interpolation">
            <summary>
            Provides interpolation routines for resampling algorithms.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.Interpolation.BiCubicKernel(System.Double)">
            <summary>
            Returns a bicubic kernel for the given value.
            <remarks>
            The function implements bicubic kernel W(x) as described on
            <see href="https://en.wikipedia.org/wiki/Lanczos_resampling#Algorithm">Wikipedia</see>
            (coefficient <c>a</c> is set to <c>-0.5</c>).
            </remarks>
            </summary>
            <param name="x">X value.</param> 
            <returns>
            The <see cref="T:System.Double"/> representing the bicubic coefficient.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Interpolation.BiCubicBSplineKernel(System.Double)">
            <summary>
            Returns a bicubic b-spline kernel for the given value.
            <remarks>
            The function implements bicubic kernel developed by Paul Bourke <see href="http://paulbourke.net"/> 
            described <see href="http://docs-hoffmann.de/bicubic03042002.pdf">here</see>
            </remarks>
            </summary>
            <param name="x">X value.</param> 
            <returns>
            The <see cref="T:System.Double"/> representing the bicubic coefficient.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Interpolation.LanczosKernel3(System.Double)">
            <summary>
            Returns a Lanczos kernel for the given value.
            <remarks>
            The function implements Lanczos kernel as described on
            <see href="https://en.wikipedia.org/wiki/Lanczos_resampling#Algorithm">Wikipedia</see>
            </remarks>
            </summary>
            <param name="x">The value to return the kernel for.</param> 
            <returns>
            The <see cref="T:System.Double"/> representing the bicubic coefficient.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Interpolation.SinC(System.Double)">
            <summary>
            Gets the result of a sine cardinal function for the given value.
            </summary>
            <param name="x">
            The value to calculate the result for.
            </param>
            <returns>
            The <see cref="T:System.Double"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Interpolation.Clean(System.Double)">
            <summary>
            Ensures that any passed double is correctly rounded to zero
            </summary>
            <param name="x">The value to clean.</param>
            <returns>The <see cref="T:System.Double"/>.</returns>
        </member>
        <member name="T:ImageProcessor.Imaging.Colors.CmykColor">
            <summary>
            Represents an CMYK (cyan, magenta, yellow, keyline) color.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Colors.CmykColor.Empty">
            <summary>
            Represents a <see cref="T:ImageProcessor.Imaging.Colors.CmykColor"/> that is null.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Colors.CmykColor.c">
            <summary>
            The cyan color component.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Colors.CmykColor.m">
            <summary>
            The magenta color component.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Colors.CmykColor.y">
            <summary>
            The yellow color component.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Colors.CmykColor.k">
            <summary>
            The keyline black color component.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.Colors.CmykColor.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Imaging.Colors.CmykColor"/> struct.
            </summary>
            <param name="cyan">
            The cyan component.
            </param>
            <param name="magenta">
            The magenta component.
            </param>
            <param name="yellow">
            The yellow component.
            </param>
            <param name="keyline">
            The keyline black component.
            </param>
        </member>
        <member name="M:ImageProcessor.Imaging.Colors.CmykColor.#ctor(System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Imaging.Colors.CmykColor"/> struct.
            </summary>
            <param name="color">
            The <see cref="T:System.Drawing.Color"/> to initialize from.
            </param>
        </member>
        <member name="P:ImageProcessor.Imaging.Colors.CmykColor.C">
            <summary>
            Gets the cyan component.
            <remarks>A value ranging between 0 and 100.</remarks>
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Colors.CmykColor.M">
            <summary>
            Gets the magenta component.
            <remarks>A value ranging between 0 and 100.</remarks>
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Colors.CmykColor.Y">
            <summary>
            Gets the yellow component.
            <remarks>A value ranging between 0 and 100.</remarks>
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Colors.CmykColor.K">
            <summary>
            Gets the keyline black component.
            <remarks>A value ranging between 0 and 100.</remarks>
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.Colors.CmykColor.FromCmykColor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a <see cref="T:ImageProcessor.Imaging.Colors.CmykColor"/> structure from the four 32-bit CMYK 
            components (cyan, magenta, yellow, and keyline) values.
            </summary>
            <param name="cyan">
            The cyan component.
            </param>
            <param name="magenta">
            The magenta component.
            </param>
            <param name="yellow">
            The yellow component.
            </param>
            <param name="keyline">
            The keyline black component.
            </param>
            <returns>
            The <see cref="T:ImageProcessor.Imaging.Colors.CmykColor"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Colors.CmykColor.FromColor(System.Drawing.Color)">
            <summary>
            Creates a <see cref="T:ImageProcessor.Imaging.Colors.CmykColor"/> structure from the specified <see cref="T:System.Drawing.Color"/> structure
            </summary>
            <param name="color">
            The <see cref="T:System.Drawing.Color"/> from which to create the new <see cref="T:ImageProcessor.Imaging.Colors.CmykColor"/>.
            </param>
            <returns>
            The <see cref="T:ImageProcessor.Imaging.Colors.CmykColor"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Colors.CmykColor.op_Implicit(System.Drawing.Color)~ImageProcessor.Imaging.Colors.CmykColor">
            <summary>
            Allows the implicit conversion of an instance of <see cref="T:System.Drawing.Color"/> to a 
            <see cref="T:ImageProcessor.Imaging.Colors.CmykColor"/>.
            </summary>
            <param name="color">
            The instance of <see cref="T:System.Drawing.Color"/> to convert.
            </param>
            <returns>
            An instance of <see cref="T:ImageProcessor.Imaging.Colors.CmykColor"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Colors.CmykColor.op_Implicit(ImageProcessor.Imaging.Colors.RgbaColor)~ImageProcessor.Imaging.Colors.CmykColor">
            <summary>
            Allows the implicit conversion of an instance of <see cref="T:ImageProcessor.Imaging.Colors.RgbaColor"/> to a 
            <see cref="T:ImageProcessor.Imaging.Colors.CmykColor"/>.
            </summary>
            <param name="rgbaColor">
            The instance of <see cref="T:ImageProcessor.Imaging.Colors.RgbaColor"/> to convert.
            </param>
            <returns>
            An instance of <see cref="T:ImageProcessor.Imaging.Colors.CmykColor"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Colors.CmykColor.op_Implicit(ImageProcessor.Imaging.Colors.YCbCrColor)~ImageProcessor.Imaging.Colors.CmykColor">
            <summary>
            Allows the implicit conversion of an instance of <see cref="T:ImageProcessor.Imaging.Colors.YCbCrColor"/> to a 
            <see cref="T:ImageProcessor.Imaging.Colors.HslaColor"/>.
            </summary>
            <param name="ycbcrColor">
            The instance of <see cref="T:ImageProcessor.Imaging.Colors.YCbCrColor"/> to convert.
            </param>
            <returns>
            An instance of <see cref="T:ImageProcessor.Imaging.Colors.YCbCrColor"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Colors.CmykColor.op_Implicit(ImageProcessor.Imaging.Colors.CmykColor)~System.Drawing.Color">
            <summary>
            Allows the implicit conversion of an instance of <see cref="T:ImageProcessor.Imaging.Colors.CmykColor"/> to a 
            <see cref="T:System.Drawing.Color"/>.
            </summary>
            <param name="cmykColor">
            The instance of <see cref="T:ImageProcessor.Imaging.Colors.CmykColor"/> to convert.
            </param>
            <returns>
            An instance of <see cref="T:System.Drawing.Color"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Colors.CmykColor.op_Implicit(ImageProcessor.Imaging.Colors.CmykColor)~ImageProcessor.Imaging.Colors.RgbaColor">
            <summary>
            Allows the implicit conversion of an instance of <see cref="T:ImageProcessor.Imaging.Colors.CmykColor"/> to a 
            <see cref="T:ImageProcessor.Imaging.Colors.RgbaColor"/>.
            </summary>
            <param name="cmykColor">
            The instance of <see cref="T:ImageProcessor.Imaging.Colors.CmykColor"/> to convert.
            </param>
            <returns>
            An instance of <see cref="T:ImageProcessor.Imaging.Colors.RgbaColor"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Colors.CmykColor.op_Implicit(ImageProcessor.Imaging.Colors.CmykColor)~ImageProcessor.Imaging.Colors.YCbCrColor">
            <summary>
            Allows the implicit conversion of an instance of <see cref="T:ImageProcessor.Imaging.Colors.CmykColor"/> to a 
            <see cref="T:ImageProcessor.Imaging.Colors.YCbCrColor"/>.
            </summary>
            <param name="cmykColor">
            The instance of <see cref="T:ImageProcessor.Imaging.Colors.CmykColor"/> to convert.
            </param>
            <returns>
            An instance of <see cref="T:ImageProcessor.Imaging.Colors.YCbCrColor"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Colors.CmykColor.op_Implicit(ImageProcessor.Imaging.Colors.CmykColor)~ImageProcessor.Imaging.Colors.HslaColor">
            <summary>
            Allows the implicit conversion of an instance of <see cref="T:ImageProcessor.Imaging.Colors.CmykColor"/> to a 
            <see cref="T:ImageProcessor.Imaging.Colors.HslaColor"/>.
            </summary>
            <param name="cmykColor">
            The instance of <see cref="T:ImageProcessor.Imaging.Colors.CmykColor"/> to convert.
            </param>
            <returns>
            An instance of <see cref="T:ImageProcessor.Imaging.Colors.HslaColor"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Colors.CmykColor.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Colors.CmykColor.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <returns>
            true if <paramref name="obj"/> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
            <param name="obj">Another object to compare to. </param>
        </member>
        <member name="M:ImageProcessor.Imaging.Colors.CmykColor.Equals(ImageProcessor.Imaging.Colors.CmykColor)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Colors.CmykColor.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Colors.CmykColor.Clamp(System.Single)">
            <summary>
            Checks the range of the given value to ensure that it remains within the acceptable boundaries.
            </summary>
            <param name="value">
            The value to check.
            </param>
            <returns>
            The sanitized <see cref="T:System.Single"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Colors.CmykColor.IsEmpty">
            <summary>
            Returns a value indicating whether the current instance is empty.
            </summary>
            <returns>
            The true if this instance is empty; otherwise, false.
            </returns>
        </member>
        <member name="T:ImageProcessor.Imaging.Colors.Color32">
            <summary>
            Structure that defines a 32 bits per pixel color, used for pixel manipulation not for color conversion.
            </summary>
            <remarks>
            This structure is used to read data from a 32 bits per pixel image
            in memory, and is ordered in this manner as this is the way that
            the data is laid out in memory
            </remarks>
        </member>
        <member name="F:ImageProcessor.Imaging.Colors.Color32.B">
            <summary>
            Holds the blue component of the colour
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Colors.Color32.G">
            <summary>
            Holds the green component of the colour
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Colors.Color32.R">
            <summary>
            Holds the red component of the colour
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Colors.Color32.A">
            <summary>
            Holds the alpha component of the colour
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Colors.Color32.Argb">
            <summary>
            Permits the color32 to be treated as a 32 bit integer.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.Colors.Color32.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Imaging.Colors.Color32"/> struct.
            </summary>
            <param name="alpha">The alpha component.</param>
            <param name="red">The red component.</param>
            <param name="green">The green component.</param>
            <param name="blue">The blue component.</param>
        </member>
        <member name="M:ImageProcessor.Imaging.Colors.Color32.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Imaging.Colors.Color32"/> struct.
            </summary>
            <param name="argb">
            The combined color components.
            </param>
        </member>
        <member name="P:ImageProcessor.Imaging.Colors.Color32.Color">
            <summary>
            Gets the color for this Color32 object
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.Colors.Color32.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <returns>
            true if <paramref name="obj"/> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
            <param name="obj">Another object to compare to. </param>
        </member>
        <member name="M:ImageProcessor.Imaging.Colors.Color32.Equals(ImageProcessor.Imaging.Colors.Color32)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Colors.Color32.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Colors.Color32.GetHashCode(ImageProcessor.Imaging.Colors.Color32)">
            <summary>
            Returns the hash code for the given instance.
            </summary>
            <param name="obj">
            The instance of <see cref="T:ImageProcessor.Imaging.Colors.Color32"/> to return the hash code for.
            </param>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="T:ImageProcessor.Imaging.Colors.ColorExtensions">
            <summary>
            Provides extensions for manipulating colors.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.Colors.ColorExtensions.Add(System.Drawing.Color,System.Drawing.Color[])">
            <summary>
            Adds colors together using the RGBA color format.
            </summary>
            <param name="color">
            The color to add to.
            </param>
            <param name="colors">
            The colors to add to the initial one.
            </param>
            <returns>
            The combined <see cref="T:System.Drawing.Color"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Colors.ColorExtensions.AddAsCmykColor(System.Drawing.Color,System.Drawing.Color[])">
            <summary>
            Adds colors together using the CMYK color format.
            </summary>
            <param name="color">
            The color to add to.
            </param>
            <param name="colors">
            The colors to add to the initial one.
            </param>
            <returns>
            The combined <see cref="T:ImageProcessor.Imaging.Colors.CmykColor"/>.
            </returns>
        </member>
        <member name="T:ImageProcessor.Imaging.Colors.HslaColor">
            <summary>
            Represents an HSLA (hue, saturation, luminosity, alpha) color.
            Adapted from <see href="http://richnewman.wordpress.com/about/code-listings-and-diagrams/hslcolor-class/"/>
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Colors.HslaColor.Empty">
            <summary>
            Represents a <see cref="T:ImageProcessor.Imaging.Colors.HslaColor"/> that is null.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Colors.HslaColor.h">
            <summary>
            The hue component.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Colors.HslaColor.l">
            <summary>
            The luminosity component.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Colors.HslaColor.s">
            <summary>
            The saturation component.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Colors.HslaColor.a">
            <summary>
            The alpha component.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.Colors.HslaColor.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Imaging.Colors.HslaColor"/> struct.
            </summary>
            <param name="hue">The hue component.</param>
            <param name="saturation">The saturation component.</param>
            <param name="luminosity">The luminosity component.</param>
            <param name="alpha">The alpha component.</param>
        </member>
        <member name="M:ImageProcessor.Imaging.Colors.HslaColor.#ctor(System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Imaging.Colors.HslaColor"/> struct.
            </summary>
            <param name="color">
            The <see cref="T:System.Drawing.Color"/> to initialize from.
            </param>
        </member>
        <member name="P:ImageProcessor.Imaging.Colors.HslaColor.H">
            <summary>
            Gets the hue component.
            <remarks>A value ranging between 0 and 1.</remarks>
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Colors.HslaColor.L">
            <summary>
            Gets the luminosity component.
            <remarks>A value ranging between 0 and 1.</remarks>
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Colors.HslaColor.S">
            <summary>
            Gets the saturation component.
            <remarks>A value ranging between 0 and 1.</remarks>
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Colors.HslaColor.A">
            <summary>
            Gets the alpha component.
            <remarks>A value ranging between 0 and 1.</remarks>
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.Colors.HslaColor.FromHslaColor(System.Single,System.Single,System.Single)">
            <summary>
            Creates a <see cref="T:ImageProcessor.Imaging.Colors.HslaColor"/> structure from the three 32-bit HSLA 
            components (hue, saturation, and luminosity) values.
            </summary>
            <param name="hue">The hue component.</param>
            <param name="saturation">The saturation component.</param>
            <param name="luminosity">The luminosity component.</param>
            <returns>
            The <see cref="T:ImageProcessor.Imaging.Colors.HslaColor"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Colors.HslaColor.FromHslaColor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a <see cref="T:ImageProcessor.Imaging.Colors.HslaColor"/> structure from the four 32-bit HSLA 
            components (hue, saturation, luminosity, and alpha) values.
            </summary>
            <param name="hue">The hue component.</param>
            <param name="saturation">The saturation component.</param>
            <param name="luminosity">The luminosity component.</param>
            <param name="alpha">The alpha component.</param>
            <returns>
            The <see cref="T:ImageProcessor.Imaging.Colors.HslaColor"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Colors.HslaColor.FromColor(System.Drawing.Color)">
            <summary>
            Creates a <see cref="T:ImageProcessor.Imaging.Colors.HslaColor"/> structure from the specified <see cref="T:System.Drawing.Color"/> structure
            </summary>
            <param name="color">
            The <see cref="T:System.Drawing.Color"/> from which to create the new <see cref="T:ImageProcessor.Imaging.Colors.HslaColor"/>.
            </param>
            <returns>
            The <see cref="T:ImageProcessor.Imaging.Colors.HslaColor"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Colors.HslaColor.op_Implicit(System.Drawing.Color)~ImageProcessor.Imaging.Colors.HslaColor">
            <summary>
            Allows the implicit conversion of an instance of <see cref="T:System.Drawing.Color"/> to a 
            <see cref="T:ImageProcessor.Imaging.Colors.HslaColor"/>.
            </summary>
            <param name="color">
            The instance of <see cref="T:System.Drawing.Color"/> to convert.
            </param>
            <returns>
            An instance of <see cref="T:ImageProcessor.Imaging.Colors.HslaColor"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Colors.HslaColor.op_Implicit(ImageProcessor.Imaging.Colors.RgbaColor)~ImageProcessor.Imaging.Colors.HslaColor">
            <summary>
            Allows the implicit conversion of an instance of <see cref="T:ImageProcessor.Imaging.Colors.RgbaColor"/> to a 
            <see cref="T:ImageProcessor.Imaging.Colors.HslaColor"/>.
            </summary>
            <param name="rgbaColor">
            The instance of <see cref="T:ImageProcessor.Imaging.Colors.RgbaColor"/> to convert.
            </param>
            <returns>
            An instance of <see cref="T:ImageProcessor.Imaging.Colors.HslaColor"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Colors.HslaColor.op_Implicit(ImageProcessor.Imaging.Colors.YCbCrColor)~ImageProcessor.Imaging.Colors.HslaColor">
            <summary>
            Allows the implicit conversion of an instance of <see cref="T:ImageProcessor.Imaging.Colors.YCbCrColor"/> to a 
            <see cref="T:ImageProcessor.Imaging.Colors.HslaColor"/>.
            </summary>
            <param name="ycbcrColor">
            The instance of <see cref="T:ImageProcessor.Imaging.Colors.YCbCrColor"/> to convert.
            </param>
            <returns>
            An instance of <see cref="T:ImageProcessor.Imaging.Colors.YCbCrColor"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Colors.HslaColor.op_Implicit(ImageProcessor.Imaging.Colors.HslaColor)~System.Drawing.Color">
            <summary>
            Allows the implicit conversion of an instance of <see cref="T:ImageProcessor.Imaging.Colors.HslaColor"/> to a 
            <see cref="T:System.Drawing.Color"/>.
            </summary>
            <param name="hslaColor">
            The instance of <see cref="T:ImageProcessor.Imaging.Colors.HslaColor"/> to convert.
            </param>
            <returns>
            An instance of <see cref="T:System.Drawing.Color"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Colors.HslaColor.op_Implicit(ImageProcessor.Imaging.Colors.HslaColor)~ImageProcessor.Imaging.Colors.YCbCrColor">
            <summary>
            Allows the implicit conversion of an instance of <see cref="T:ImageProcessor.Imaging.Colors.HslaColor"/> to a 
            <see cref="T:ImageProcessor.Imaging.Colors.YCbCrColor"/>.
            </summary>
            <param name="hslaColor">
            The instance of <see cref="T:ImageProcessor.Imaging.Colors.HslaColor"/> to convert.
            </param>
            <returns>
            An instance of <see cref="T:ImageProcessor.Imaging.Colors.YCbCrColor"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Colors.HslaColor.op_Implicit(ImageProcessor.Imaging.Colors.HslaColor)~ImageProcessor.Imaging.Colors.CmykColor">
            <summary>
            Allows the implicit conversion of an instance of <see cref="T:ImageProcessor.Imaging.Colors.HslaColor"/> to a 
            <see cref="T:ImageProcessor.Imaging.Colors.CmykColor"/>.
            </summary>
            <param name="hslaColor">
            The instance of <see cref="T:ImageProcessor.Imaging.Colors.HslaColor"/> to convert.
            </param>
            <returns>
            An instance of <see cref="T:ImageProcessor.Imaging.Colors.CmykColor"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Colors.HslaColor.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Colors.HslaColor.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <returns>
            true if <paramref name="obj"/> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
            <param name="obj">Another object to compare to. </param>
        </member>
        <member name="M:ImageProcessor.Imaging.Colors.HslaColor.Equals(ImageProcessor.Imaging.Colors.HslaColor)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Colors.HslaColor.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Colors.HslaColor.GetColorComponent(System.Single,System.Single,System.Single)">
            <summary>
            Gets the color component from the given hue values.
            </summary>
            <param name="temp1">
            The temp 1.
            </param>
            <param name="temp2">
            The temp 2.
            </param>
            <param name="temp3">
            The temp 3.
            </param>
            <returns>
            The <see cref="T:System.Single"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Colors.HslaColor.GetTemp2(ImageProcessor.Imaging.Colors.HslaColor)">
            <summary>
            The get temp 2.
            </summary>
            <param name="hslColor">
            The <see cref="T:ImageProcessor.Imaging.Colors.HslaColor"/> color.
            </param>
            <returns>
            The <see cref="T:System.Single"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Colors.HslaColor.MoveIntoRange(System.Single)">
            <summary>
            The move into range.
            </summary>
            <param name="temp3">
            The temp 3.
            </param>
            <returns>
            The <see cref="T:System.Single"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Colors.HslaColor.Clamp(System.Single)">
            <summary>
            Checks the range of the given value to ensure that it remains within the acceptable boundaries.
            </summary>
            <param name="value">
            The value to check.
            </param>
            <returns>
            The sanitized <see cref="T:System.Single"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Colors.HslaColor.IsEmpty">
            <summary>
            Returns a value indicating whether the current instance is empty.
            </summary>
            <returns>
            The true if this instance is empty; otherwise, false.
            </returns>
        </member>
        <member name="T:ImageProcessor.Imaging.Colors.RgbaColor">
            <summary>
            Represents an RGBA (red, green, blue, alpha) color.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Colors.RgbaColor.Empty">
            <summary>
            Represents a <see cref="T:ImageProcessor.Imaging.Colors.RgbaColor"/> that is null.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Colors.RgbaColor.r">
            <summary>
            The red component.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Colors.RgbaColor.g">
            <summary>
            The green component.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Colors.RgbaColor.b">
            <summary>
            The blue component.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Colors.RgbaColor.a">
            <summary>
            The alpha component.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.Colors.RgbaColor.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Imaging.Colors.RgbaColor"/> struct. 
            </summary>
            <param name="red">
            The red component.
            </param>
            <param name="green">
            The green component.
            </param>
            <param name="blue">
            The blue component.
            </param>
            <param name="alpha">
            The alpha component.
            </param>
        </member>
        <member name="M:ImageProcessor.Imaging.Colors.RgbaColor.#ctor(System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Imaging.Colors.RgbaColor"/> struct. 
            </summary>
            <param name="color">
            The <see cref="T:System.Drawing.Color">color.</see>
            </param>
        </member>
        <member name="P:ImageProcessor.Imaging.Colors.RgbaColor.R">
            <summary>
            Gets the red component.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Colors.RgbaColor.G">
            <summary>
            Gets the green component.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Colors.RgbaColor.B">
            <summary>
            Gets the blue component.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Colors.RgbaColor.A">
            <summary>
            Gets the alpha component.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.Colors.RgbaColor.FromRgba(System.Byte,System.Byte,System.Byte)">
            <summary>
            Creates a <see cref="T:ImageProcessor.Imaging.Colors.RgbaColor"/> structure from the three 8-bit RGBA 
            components (red, green, and blue) values.
            </summary>
            <param name="red">The red component.</param>
            <param name="green">The green component.</param>
            <param name="blue">The blue component.</param>
            <returns>
            The <see cref="T:ImageProcessor.Imaging.Colors.RgbaColor"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Colors.RgbaColor.FromRgba(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Creates a <see cref="T:ImageProcessor.Imaging.Colors.RgbaColor"/> structure from the four 8-bit RGBA 
            components (red, green, blue, and alpha) values.
            </summary>
            <param name="red">The red component.</param>
            <param name="green">The green component.</param>
            <param name="blue">The blue component.</param>
            <param name="alpha">The alpha component.</param>
            <returns>
            The <see cref="T:ImageProcessor.Imaging.Colors.RgbaColor"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Colors.RgbaColor.FromColor(System.Drawing.Color)">
            <summary>
            Creates a <see cref="T:ImageProcessor.Imaging.Colors.RgbaColor"/> structure from the specified <see cref="T:System.Drawing.Color"/> structure
            </summary>
            <param name="color">
            The <see cref="T:System.Drawing.Color"/> from which to create the new <see cref="T:ImageProcessor.Imaging.Colors.RgbaColor"/>.
            </param>
            <returns>
            The <see cref="T:ImageProcessor.Imaging.Colors.RgbaColor"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Colors.RgbaColor.op_Implicit(System.Drawing.Color)~ImageProcessor.Imaging.Colors.RgbaColor">
            <summary>
            Allows the implicit conversion of an instance of <see cref="T:System.Drawing.Color"/> to a 
            <see cref="T:ImageProcessor.Imaging.Colors.RgbaColor"/>.
            </summary>
            <param name="color">
            The instance of <see cref="T:System.Drawing.Color"/> to convert.
            </param>
            <returns>
            An instance of <see cref="T:ImageProcessor.Imaging.Colors.RgbaColor"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Colors.RgbaColor.op_Implicit(ImageProcessor.Imaging.Colors.HslaColor)~ImageProcessor.Imaging.Colors.RgbaColor">
            <summary>
            Allows the implicit conversion of an instance of <see cref="T:ImageProcessor.Imaging.Colors.HslaColor"/> to a 
            <see cref="T:ImageProcessor.Imaging.Colors.RgbaColor"/>.
            </summary>
            <param name="hslaColor">
            The instance of <see cref="T:ImageProcessor.Imaging.Colors.HslaColor"/> to convert.
            </param>
            <returns>
            An instance of <see cref="T:ImageProcessor.Imaging.Colors.RgbaColor"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Colors.RgbaColor.op_Implicit(ImageProcessor.Imaging.Colors.YCbCrColor)~ImageProcessor.Imaging.Colors.RgbaColor">
            <summary>
            Allows the implicit conversion of an instance of <see cref="T:ImageProcessor.Imaging.Colors.YCbCrColor"/> to a 
            <see cref="T:ImageProcessor.Imaging.Colors.RgbaColor"/>.
            </summary>
            <param name="ycbcrColor">
            The instance of <see cref="T:ImageProcessor.Imaging.Colors.YCbCrColor"/> to convert.
            </param>
            <returns>
            An instance of <see cref="T:ImageProcessor.Imaging.Colors.RgbaColor"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Colors.RgbaColor.op_Implicit(ImageProcessor.Imaging.Colors.RgbaColor)~System.Drawing.Color">
            <summary>
            Allows the implicit conversion of an instance of <see cref="T:ImageProcessor.Imaging.Colors.RgbaColor"/> to a 
            <see cref="T:System.Drawing.Color"/>.
            </summary>
            <param name="rgbaColor">
            The instance of <see cref="T:ImageProcessor.Imaging.Colors.RgbaColor"/> to convert.
            </param>
            <returns>
            An instance of <see cref="T:System.Drawing.Color"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Colors.RgbaColor.op_Implicit(ImageProcessor.Imaging.Colors.RgbaColor)~ImageProcessor.Imaging.Colors.YCbCrColor">
            <summary>
            Allows the implicit conversion of an instance of <see cref="T:ImageProcessor.Imaging.Colors.RgbaColor"/> to a 
            <see cref="T:ImageProcessor.Imaging.Colors.YCbCrColor"/>.
            </summary>
            <param name="rgbaColor">
            The instance of <see cref="T:ImageProcessor.Imaging.Colors.RgbaColor"/> to convert.
            </param>
            <returns>
            An instance of <see cref="T:ImageProcessor.Imaging.Colors.YCbCrColor"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Colors.RgbaColor.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Colors.RgbaColor.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <returns>
            true if <paramref name="obj"/> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
            <param name="obj">Another object to compare to. </param>
        </member>
        <member name="M:ImageProcessor.Imaging.Colors.RgbaColor.Equals(ImageProcessor.Imaging.Colors.RgbaColor)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Colors.RgbaColor.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="T:ImageProcessor.Imaging.Colors.RgbaComponent">
            <summary>
            Enumerates the RGBA (red, green, blue, alpha) color components.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Colors.RgbaComponent.B">
            <summary>
            The blue component.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Colors.RgbaComponent.G">
            <summary>
            The green component.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Colors.RgbaComponent.R">
            <summary>
            The red component.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Colors.RgbaComponent.A">
            <summary>
            The alpha component.
            </summary>
        </member>
        <member name="T:ImageProcessor.Imaging.Colors.YCbCrColor">
            <summary>
            Represents an YCbCr (luminance, chroma, chroma) color conforming to the ITU-R BT.601 standard used in digital imaging systems.
            <see href="http://en.wikipedia.org/wiki/YCbCr"/>
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Colors.YCbCrColor.Empty">
            <summary>
            Represents a <see cref="T:ImageProcessor.Imaging.Colors.YCbCrColor"/> that is null.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Colors.YCbCrColor.y">
            <summary>
            The y luminance component.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Colors.YCbCrColor.cb">
            <summary>
            The u chroma component.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Colors.YCbCrColor.cr">
            <summary>
            The v chroma component.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.Colors.YCbCrColor.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Imaging.Colors.YCbCrColor"/> struct.
            </summary>
            <param name="y">The y luminance component.</param>
            <param name="cb">The u chroma component.</param>
            <param name="cr">The v chroma component.</param> 
        </member>
        <member name="P:ImageProcessor.Imaging.Colors.YCbCrColor.Y">
            <summary>
            Gets the Y luminance component.
            <remarks>A value ranging between 0 and 255.</remarks>
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Colors.YCbCrColor.Cb">
            <summary>
            Gets the U chroma component.
            <remarks>A value ranging between 0 and 255.</remarks>
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Colors.YCbCrColor.Cr">
            <summary>
            Gets the V chroma component.
            <remarks>A value ranging between 0 and 255.</remarks>
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.Colors.YCbCrColor.FromYCbCr(System.Single,System.Single,System.Single)">
            <summary>
            Creates a <see cref="T:ImageProcessor.Imaging.Colors.YCbCrColor"/> structure from the three 32-bit YCbCr 
            components (luminance, chroma, and chroma) values.
            </summary>
            <param name="y">The y luminance component.</param>
            <param name="cb">The u chroma component.</param>
            <param name="cr">The v chroma component.</param> 
            <returns>
            The <see cref="T:ImageProcessor.Imaging.Colors.YCbCrColor"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Colors.YCbCrColor.FromColor(System.Drawing.Color)">
            <summary>
            Creates a <see cref="T:ImageProcessor.Imaging.Colors.YCbCrColor"/> structure from the specified <see cref="T:System.Drawing.Color"/> structure
            </summary>
            <param name="color">
            The <see cref="T:System.Drawing.Color"/> from which to create the new <see cref="T:ImageProcessor.Imaging.Colors.YCbCrColor"/>.
            </param>
            <returns>
            The <see cref="T:ImageProcessor.Imaging.Colors.YCbCrColor"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Colors.YCbCrColor.op_Implicit(System.Drawing.Color)~ImageProcessor.Imaging.Colors.YCbCrColor">
            <summary>
            Allows the implicit conversion of an instance of <see cref="T:System.Drawing.Color"/> to a 
            <see cref="T:ImageProcessor.Imaging.Colors.YCbCrColor"/>.
            </summary>
            <param name="color">
            The instance of <see cref="T:System.Drawing.Color"/> to convert.
            </param>
            <returns>
            An instance of <see cref="T:ImageProcessor.Imaging.Colors.YCbCrColor"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Colors.YCbCrColor.op_Implicit(ImageProcessor.Imaging.Colors.RgbaColor)~ImageProcessor.Imaging.Colors.YCbCrColor">
            <summary>
            Allows the implicit conversion of an instance of <see cref="T:ImageProcessor.Imaging.Colors.RgbaColor"/> to a 
            <see cref="T:ImageProcessor.Imaging.Colors.YCbCrColor"/>.
            </summary>
            <param name="rgbaColor">
            The instance of <see cref="T:ImageProcessor.Imaging.Colors.RgbaColor"/> to convert.
            </param>
            <returns>
            An instance of <see cref="T:ImageProcessor.Imaging.Colors.YCbCrColor"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Colors.YCbCrColor.op_Implicit(ImageProcessor.Imaging.Colors.HslaColor)~ImageProcessor.Imaging.Colors.YCbCrColor">
            <summary>
            Allows the implicit conversion of an instance of <see cref="T:ImageProcessor.Imaging.Colors.HslaColor"/> to a 
            <see cref="T:ImageProcessor.Imaging.Colors.YCbCrColor"/>.
            </summary>
            <param name="hslaColor">
            The instance of <see cref="T:ImageProcessor.Imaging.Colors.HslaColor"/> to convert.
            </param>
            <returns>
            An instance of <see cref="T:ImageProcessor.Imaging.Colors.YCbCrColor"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Colors.YCbCrColor.op_Implicit(ImageProcessor.Imaging.Colors.YCbCrColor)~System.Drawing.Color">
            <summary>
            Allows the implicit conversion of an instance of <see cref="T:ImageProcessor.Imaging.Colors.YCbCrColor"/> to a 
            <see cref="T:System.Drawing.Color"/>.
            </summary>
            <param name="ycbcrColor">
            The instance of <see cref="T:ImageProcessor.Imaging.Colors.YCbCrColor"/> to convert.
            </param>
            <returns>
            An instance of <see cref="T:System.Drawing.Color"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Colors.YCbCrColor.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Colors.YCbCrColor.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <returns>
            true if <paramref name="obj"/> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
            <param name="obj">Another object to compare to. </param>
        </member>
        <member name="M:ImageProcessor.Imaging.Colors.YCbCrColor.Equals(ImageProcessor.Imaging.Colors.YCbCrColor)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Colors.YCbCrColor.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Colors.YCbCrColor.IsEmpty">
            <summary>
            Returns a value indicating whether the current instance is empty.
            </summary>
            <returns>
            The true if this instance is empty; otherwise, false.
            </returns>
        </member>
        <member name="T:ImageProcessor.Imaging.Filters.Artistic.HalftoneFilter">
            <summary>
            The halftone filter applies a classical CMYK filter to the given image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Filters.Artistic.HalftoneFilter.cyanAngle">
            <summary>
            The angle of the cyan component in degrees.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Filters.Artistic.HalftoneFilter.magentaAngle">
            <summary>
            The angle of the magenta component in degrees.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Filters.Artistic.HalftoneFilter.yellowAngle">
            <summary>
            The angle of the yellow component in degrees.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Filters.Artistic.HalftoneFilter.keylineAngle">
            <summary>
            The angle of the keyline component in degrees.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Filters.Artistic.HalftoneFilter.distance">
            <summary>
            The distance between component points.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.Filters.Artistic.HalftoneFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Imaging.Filters.Artistic.HalftoneFilter"/> class.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.Filters.Artistic.HalftoneFilter.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Imaging.Filters.Artistic.HalftoneFilter"/> class.
            </summary>
            <param name="distance">
            The distance.
            </param>
        </member>
        <member name="P:ImageProcessor.Imaging.Filters.Artistic.HalftoneFilter.CyanAngle">
            <summary>
            Gets or sets the angle of the cyan component in degrees.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Filters.Artistic.HalftoneFilter.MagentaAngle">
            <summary>
            Gets or sets the angle of the magenta component in degrees.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Filters.Artistic.HalftoneFilter.YellowAngle">
            <summary>
            Gets or sets the angle of the yellow component in degrees.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Filters.Artistic.HalftoneFilter.KeylineAngle">
            <summary>
            Gets or sets the angle of the keyline black component in degrees.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Filters.Artistic.HalftoneFilter.Distance">
            <summary>
            Gets or sets the distance between component points.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.Filters.Artistic.HalftoneFilter.ApplyFilter(System.Drawing.Bitmap)">
            <summary>
            Applies the halftone filter. 
            </summary>
            <param name="source">
            The <see cref="T:System.Drawing.Bitmap"/> to apply the filter to.
            </param>
            <returns>
            The <see cref="T:System.Drawing.Bitmap"/> with the filter applied.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Filters.Artistic.HalftoneFilter.GetBoundingRectangle(System.Int32,System.Int32)">
            <summary>
            Gets the bounding rectangle of the image based on the rotating angles.
            </summary>
            <param name="width">
            The width of the image.
            </param>
            <param name="height">
            The height of the image.
            </param>
            <returns>
            The <see cref="T:System.Drawing.Rectangle"/>.
            </returns>
        </member>
        <member name="T:ImageProcessor.Imaging.Filters.Artistic.OilPaintingFilter">
            <summary>
            The oil painting filter.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Filters.Artistic.OilPaintingFilter.levels">
            <summary>
            The levels.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Filters.Artistic.OilPaintingFilter.brushSize">
            <summary>
            The brush size.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.Filters.Artistic.OilPaintingFilter.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Imaging.Filters.Artistic.OilPaintingFilter"/> class.
            </summary>
            <param name="levels">
            The number of levels.
            </param>
            <param name="brushSize">
            The brush size.
            </param>
        </member>
        <member name="P:ImageProcessor.Imaging.Filters.Artistic.OilPaintingFilter.Levels">
            <summary>
            Gets or sets the number of levels.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Filters.Artistic.OilPaintingFilter.BrushSize">
            <summary>
            Gets or sets the brush size.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.Filters.Artistic.OilPaintingFilter.ApplyFilter(System.Drawing.Bitmap)">
            <summary>
            Applies the oil painting filter. 
            </summary>
            <param name="source">
            The source.
            </param>
            <returns>
            The <see cref="T:System.Drawing.Bitmap"/>.
            </returns>
        </member>
        <member name="T:ImageProcessor.Imaging.Filters.EdgeDetection.ConvolutionFilter">
            <summary>
            The convolution filter for applying gradient operators to detect edges within an image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Filters.EdgeDetection.ConvolutionFilter.edgeFilter">
            <summary>
            The edge filter.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Filters.EdgeDetection.ConvolutionFilter.greyscale">
            <summary>
            Whether to produce a greyscale output.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.Filters.EdgeDetection.ConvolutionFilter.#ctor(ImageProcessor.Imaging.Filters.EdgeDetection.IEdgeFilter,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Imaging.Filters.EdgeDetection.ConvolutionFilter"/> class.
            </summary>
            <param name="edgeFilter">
            The <see cref="T:ImageProcessor.Imaging.Filters.EdgeDetection.IEdgeFilter"/> to apply.
            </param>
            <param name="greyscale">
            Whether to produce a greyscale output.
            </param>
        </member>
        <member name="M:ImageProcessor.Imaging.Filters.EdgeDetection.ConvolutionFilter.ProcessFilter(System.Drawing.Image)">
            <summary>
            Processes the given bitmap to apply the current instance of <see cref="T:ImageProcessor.Imaging.Filters.EdgeDetection.IEdgeFilter"/>.
            </summary>
            <param name="source">The image to process.</param>
            <returns>A processed bitmap.</returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Filters.EdgeDetection.ConvolutionFilter.Process2DFilter(System.Drawing.Image)">
            <summary>
            Processes the given bitmap to apply the current instance of <see cref="T:ImageProcessor.Imaging.Filters.EdgeDetection.I2DEdgeFilter"/>.
            </summary>
            <param name="source">The image to process.</param>
            <returns>A processed bitmap.</returns>
        </member>
        <member name="T:ImageProcessor.Imaging.Filters.EdgeDetection.I2DEdgeFilter">
            <summary>
            Describes properties for creating 2 dimension edge detection filters.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Filters.EdgeDetection.I2DEdgeFilter.VerticalGradientOperator">
            <summary>
            Gets the vertical gradient operator.
            </summary>
        </member>
        <member name="T:ImageProcessor.Imaging.Filters.EdgeDetection.IEdgeFilter">
            <summary>
            Describes properties for creating edge detection filters.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Filters.EdgeDetection.IEdgeFilter.HorizontalGradientOperator">
            <summary>
            Gets the horizontal gradient operator.
            </summary>
        </member>
        <member name="T:ImageProcessor.Imaging.Filters.EdgeDetection.KirschEdgeFilter">
            <summary>
            The Kirsch operator filter.
            <see href="http://en.wikipedia.org/wiki/Kirsch_operator"/>
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Filters.EdgeDetection.KirschEdgeFilter.HorizontalGradientOperator">
            <summary>
            Gets the horizontal gradient operator.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Filters.EdgeDetection.KirschEdgeFilter.VerticalGradientOperator">
            <summary>
            Gets the vertical gradient operator.
            </summary>
        </member>
        <member name="T:ImageProcessor.Imaging.Filters.EdgeDetection.Laplacian5X5EdgeFilter">
            <summary>
            The Laplacian 5 x 5 operator filter.
            <see href="http://en.wikipedia.org/wiki/Discrete_Laplace_operator"/>
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Filters.EdgeDetection.Laplacian5X5EdgeFilter.HorizontalGradientOperator">
            <summary>
            Gets the horizontal gradient operator.
            </summary>
        </member>
        <member name="T:ImageProcessor.Imaging.Filters.EdgeDetection.Laplacian3X3EdgeFilter">
            <summary>
            The Laplacian 3 x 3 operator filter.
            <see href="http://en.wikipedia.org/wiki/Discrete_Laplace_operator"/>
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Filters.EdgeDetection.Laplacian3X3EdgeFilter.HorizontalGradientOperator">
            <summary>
            Gets the horizontal gradient operator.
            </summary>
        </member>
        <member name="T:ImageProcessor.Imaging.Filters.EdgeDetection.LaplacianOfGaussianEdgeFilter">
            <summary>
            The Laplacian of Gaussian operator filter.
            <see href="http://fourier.eng.hmc.edu/e161/lectures/gradient/node9.html"/>
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Filters.EdgeDetection.LaplacianOfGaussianEdgeFilter.HorizontalGradientOperator">
            <summary>
            Gets the horizontal gradient operator.
            </summary>
        </member>
        <member name="T:ImageProcessor.Imaging.Filters.EdgeDetection.ScharrEdgeFilter">
            <summary>
            The Scharr operator filter.
            <see href="http://en.wikipedia.org/wiki/Sobel_operator#Alternative_operators"/>
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Filters.EdgeDetection.ScharrEdgeFilter.HorizontalGradientOperator">
            <summary>
            Gets the horizontal gradient operator.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Filters.EdgeDetection.ScharrEdgeFilter.VerticalGradientOperator">
            <summary>
            Gets the vertical gradient operator.
            </summary>
        </member>
        <member name="T:ImageProcessor.Imaging.Filters.EdgeDetection.RobertsCrossEdgeFilter">
            <summary>
            The Roberts Cross operator filter.
            <see href="http://en.wikipedia.org/wiki/Roberts_cross"/>
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Filters.EdgeDetection.RobertsCrossEdgeFilter.HorizontalGradientOperator">
            <summary>
            Gets the horizontal gradient operator.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Filters.EdgeDetection.RobertsCrossEdgeFilter.VerticalGradientOperator">
            <summary>
            Gets the vertical gradient operator.
            </summary>
        </member>
        <member name="T:ImageProcessor.Imaging.Filters.EdgeDetection.PrewittEdgeFilter">
            <summary>
            The Prewitt operator filter.
            <see href="http://en.wikipedia.org/wiki/Prewitt_operator"/>
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Filters.EdgeDetection.PrewittEdgeFilter.HorizontalGradientOperator">
            <summary>
            Gets the horizontal gradient operator.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Filters.EdgeDetection.PrewittEdgeFilter.VerticalGradientOperator">
            <summary>
            Gets the vertical gradient operator.
            </summary>
        </member>
        <member name="T:ImageProcessor.Imaging.Filters.EdgeDetection.KayyaliEdgeFilter">
            <summary>
            The Kayyali operator filter.
            <see href="http://edgedetection.webs.com/"/>
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Filters.EdgeDetection.KayyaliEdgeFilter.HorizontalGradientOperator">
            <summary>
            Gets the horizontal gradient operator.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Filters.EdgeDetection.KayyaliEdgeFilter.VerticalGradientOperator">
            <summary>
            Gets the vertical gradient operator.
            </summary>
        </member>
        <member name="T:ImageProcessor.Imaging.Filters.EdgeDetection.SobelEdgeFilter">
            <summary>
            The Sobel operator filter.
            <see href="http://en.wikipedia.org/wiki/Sobel_operator"/>
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Filters.EdgeDetection.SobelEdgeFilter.HorizontalGradientOperator">
            <summary>
            Gets the horizontal gradient operator.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Filters.EdgeDetection.SobelEdgeFilter.VerticalGradientOperator">
            <summary>
            Gets the vertical gradient operator.
            </summary>
        </member>
        <member name="T:ImageProcessor.Imaging.Filters.Photo.MatrixFilterBase">
            <summary>
            The matrix filter base contains equality methods.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Filters.Photo.MatrixFilterBase.Matrix">
            <summary>
            Gets the <see cref="T:System.Drawing.Imaging.ColorMatrix" /> for this filter instance.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.Filters.Photo.MatrixFilterBase.TransformImage(System.Drawing.Image,System.Drawing.Image)">
            <summary>
            Processes the image.
            </summary>
            <param name="image">The current image to process</param>
            <param name="newImage">The new Image to return</param>
            <returns>
            The processed <see cref="T:System.Drawing.Bitmap"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Filters.Photo.MatrixFilterBase.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:ImageProcessor.Imaging.Filters.Photo.IMatrixFilter" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:ImageProcessor.Imaging.Filters.Photo.IMatrixFilter" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:ImageProcessor.Imaging.Filters.Photo.IMatrixFilter" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Filters.Photo.MatrixFilterBase.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="T:ImageProcessor.Imaging.Filters.Photo.MatrixFilters">
            <summary>
            The filters available to the Filter <see cref="T:ImageProcessor.Processors.IGraphicsProcessor"/>.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Filters.Photo.MatrixFilters.BlackWhite">
            <summary>
            Gets the <see cref="T:ImageProcessor.Imaging.Filters.Photo.IMatrixFilter"/> for generating the black and white filter.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Filters.Photo.MatrixFilters.Comic">
            <summary>
            Gets the <see cref="T:ImageProcessor.Imaging.Filters.Photo.IMatrixFilter"/> for generating the comic filter.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Filters.Photo.MatrixFilters.Gotham">
            <summary>
            Gets the <see cref="T:ImageProcessor.Imaging.Filters.Photo.IMatrixFilter"/> for generating the gotham filter.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Filters.Photo.MatrixFilters.GreyScale">
            <summary>
            Gets the <see cref="T:ImageProcessor.Imaging.Filters.Photo.IMatrixFilter"/> for generating the greyscale filter.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Filters.Photo.MatrixFilters.HiSatch">
            <summary>
            Gets the <see cref="T:ImageProcessor.Imaging.Filters.Photo.IMatrixFilter"/> for generating the high saturation filter.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Filters.Photo.MatrixFilters.Invert">
            <summary>
            Gets the <see cref="T:ImageProcessor.Imaging.Filters.Photo.IMatrixFilter"/> for generating the invert filter.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Filters.Photo.MatrixFilters.Lomograph">
            <summary>
            Gets the <see cref="T:ImageProcessor.Imaging.Filters.Photo.IMatrixFilter"/> for generating the lomograph filter.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Filters.Photo.MatrixFilters.LoSatch">
            <summary>
            Gets the <see cref="T:ImageProcessor.Imaging.Filters.Photo.IMatrixFilter"/> for generating the low saturation filter.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Filters.Photo.MatrixFilters.Polaroid">
            <summary>
            Gets the <see cref="T:ImageProcessor.Imaging.Filters.Photo.IMatrixFilter"/> for generating the polaroid filter.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Filters.Photo.MatrixFilters.Sepia">
            <summary>
            Gets the <see cref="T:ImageProcessor.Imaging.Filters.Photo.IMatrixFilter"/> for generating the sepia filter.
            </summary>
        </member>
        <member name="T:ImageProcessor.Imaging.Filters.Photo.BlackWhiteMatrixFilter">
            <summary>
            Encapsulates methods with which to add a black and white filter to an image.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Filters.Photo.BlackWhiteMatrixFilter.Matrix">
            <summary>
            Gets the <see cref="T:System.Drawing.Imaging.ColorMatrix"/> for this filter instance.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.Filters.Photo.BlackWhiteMatrixFilter.TransformImage(System.Drawing.Image,System.Drawing.Image)">
            <summary>
            Processes the image.
            </summary>
            <param name="source">The current image to process</param>
            <param name="destination">The new Image to return</param>
            <returns>
            The processed <see cref="T:System.Drawing.Bitmap"/>.
            </returns>
        </member>
        <member name="T:ImageProcessor.Imaging.Filters.Photo.ColorMatrixes">
            <summary>
            A list of available color matrices to apply to an image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Filters.Photo.ColorMatrixes.blackWhite">
            <summary>
            The <see cref="T:System.Drawing.Imaging.ColorMatrix"/> for generating the black and white filter.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Filters.Photo.ColorMatrixes.comicHigh">
            <summary>
            Gets the <see cref="T:System.Drawing.Imaging.ColorMatrix"/> for generating the high pass
            on the comic book filter.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Filters.Photo.ColorMatrixes.comicLow">
            <summary>
            Gets <see cref="T:System.Drawing.Imaging.ColorMatrix"/> for generating the low pass
            on the comic book filter.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Filters.Photo.ColorMatrixes.greyScale">
            <summary>
            The <see cref="T:System.Drawing.Imaging.ColorMatrix"/> for generating the greyscale filter.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Filters.Photo.ColorMatrixes.hiSatch">
            <summary>
            The <see cref="T:System.Drawing.Imaging.ColorMatrix"/> for generating the high saturation filter.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Filters.Photo.ColorMatrixes.invert">
            <summary>
            The <see cref="T:System.Drawing.Imaging.ColorMatrix"/> for generating the invert filter.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Filters.Photo.ColorMatrixes.lomograph">
            <summary>
            The <see cref="T:System.Drawing.Imaging.ColorMatrix"/> for generating the lomograph filter.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Filters.Photo.ColorMatrixes.loSatch">
            <summary>
            The <see cref="T:System.Drawing.Imaging.ColorMatrix"/> for generating the low saturation filter.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Filters.Photo.ColorMatrixes.polaroid">
            <summary>
            The <see cref="T:System.Drawing.Imaging.ColorMatrix"/> for generating the polaroid filter.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Filters.Photo.ColorMatrixes.sepia">
            <summary>
            The <see cref="T:System.Drawing.Imaging.ColorMatrix"/> for generating the sepia filter.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Filters.Photo.ColorMatrixes.BlackWhite">
            <summary>
            Gets the <see cref="T:System.Drawing.Imaging.ColorMatrix"/> for generating the black and white filter.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Filters.Photo.ColorMatrixes.ComicHigh">
            <summary>
            Gets the <see cref="T:System.Drawing.Imaging.ColorMatrix"/> for generating the high pass
            on the comic book filter.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Filters.Photo.ColorMatrixes.ComicLow">
            <summary>
            Gets <see cref="T:System.Drawing.Imaging.ColorMatrix"/> for generating the low pass
            on the comic book filter.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Filters.Photo.ColorMatrixes.GreyScale">
            <summary>
            Gets the <see cref="T:System.Drawing.Imaging.ColorMatrix"/> for generating the greyscale filter.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Filters.Photo.ColorMatrixes.HiSatch">
            <summary>
            Gets the <see cref="T:System.Drawing.Imaging.ColorMatrix"/> for generating the high saturation filter.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Filters.Photo.ColorMatrixes.Invert">
            <summary>
            Gets the <see cref="T:System.Drawing.Imaging.ColorMatrix"/> for generating the invert filter.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Filters.Photo.ColorMatrixes.Lomograph">
            <summary>
            Gets the <see cref="T:System.Drawing.Imaging.ColorMatrix"/> for generating the lomograph filter.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Filters.Photo.ColorMatrixes.LoSatch">
            <summary>
            Gets the <see cref="T:System.Drawing.Imaging.ColorMatrix"/> for generating the low saturation filter.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Filters.Photo.ColorMatrixes.Polaroid">
            <summary>
            Gets the <see cref="T:System.Drawing.Imaging.ColorMatrix"/> for generating the polaroid filter.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Filters.Photo.ColorMatrixes.Sepia">
            <summary>
            Gets the <see cref="T:System.Drawing.Imaging.ColorMatrix"/> for generating the sepia filter.
            </summary>
        </member>
        <member name="T:ImageProcessor.Imaging.Filters.Photo.ComicMatrixFilter">
            <summary>
            Encapsulates methods with which to add a comic filter to an image.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Filters.Photo.ComicMatrixFilter.Matrix">
            <summary>
            Gets the <see cref="T:System.Drawing.Imaging.ColorMatrix"/> for this filter instance.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.Filters.Photo.ComicMatrixFilter.TransformImage(System.Drawing.Image,System.Drawing.Image)">
            <summary>
            Processes the image.
            </summary>
            <param name="image">The current image to process</param>
            <param name="newImage">The new Image to return</param>
            <returns>
            The processed <see cref="T:System.Drawing.Bitmap"/>.
            </returns>
        </member>
        <member name="T:ImageProcessor.Imaging.Filters.Photo.LoSatchMatrixFilter">
            <summary>
            Encapsulates methods with which to add a low saturated filter to an image.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Filters.Photo.LoSatchMatrixFilter.Matrix">
            <summary>
            Gets the <see cref="T:System.Drawing.Imaging.ColorMatrix"/> for this filter instance.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.Filters.Photo.LoSatchMatrixFilter.TransformImage(System.Drawing.Image,System.Drawing.Image)">
            <summary>
            Processes the image.
            </summary>
            <param name="source">The current image to process</param>
            <param name="destination">The new Image to return</param>
            <returns>
            The processed <see cref="T:System.Drawing.Bitmap"/>.
            </returns>
        </member>
        <member name="T:ImageProcessor.Imaging.Filters.Photo.HiSatchMatrixFilter">
            <summary>
            Encapsulates methods with which to add a high saturated filter to an image.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Filters.Photo.HiSatchMatrixFilter.Matrix">
            <summary>
            Gets the <see cref="T:System.Drawing.Imaging.ColorMatrix"/> for this filter instance.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.Filters.Photo.HiSatchMatrixFilter.TransformImage(System.Drawing.Image,System.Drawing.Image)">
            <summary>
            Processes the image.
            </summary>
            <param name="source">The current image to process</param>
            <param name="destination">The new Image to return</param>
            <returns>
            The processed <see cref="T:System.Drawing.Bitmap"/>.
            </returns>
        </member>
        <member name="T:ImageProcessor.Imaging.Filters.Photo.InvertMatrixFilter">
            <summary>
            Encapsulates methods with which to add an inverted filter to an image.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Filters.Photo.InvertMatrixFilter.Matrix">
            <summary>
            Gets the <see cref="T:System.Drawing.Imaging.ColorMatrix"/> for this filter instance.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.Filters.Photo.InvertMatrixFilter.TransformImage(System.Drawing.Image,System.Drawing.Image)">
            <summary>
            Processes the image.
            </summary>
            <param name="source">The current image to process</param>
            <param name="destination">The new Image to return</param>
            <returns>
            The processed <see cref="T:System.Drawing.Bitmap"/>.
            </returns>
        </member>
        <member name="T:ImageProcessor.Imaging.Filters.Photo.GothamMatrixFilter">
            <summary>
            Encapsulates methods with which to add a gotham filter to an image.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Filters.Photo.GothamMatrixFilter.Matrix">
            <summary>
            Gets the <see cref="T:System.Drawing.Imaging.ColorMatrix"/> for this filter instance.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.Filters.Photo.GothamMatrixFilter.TransformImage(System.Drawing.Image,System.Drawing.Image)">
            <summary>
            Processes the image.
            </summary>
            <param name="source">The current image to process</param>
            <param name="destination">The new Image to return</param>
            <returns>
            The processed <see cref="T:System.Drawing.Bitmap"/>.
            </returns>
        </member>
        <member name="T:ImageProcessor.Imaging.Filters.Photo.GreyScaleMatrixFilter">
            <summary>
            Encapsulates methods with which to add a greyscale filter to an image.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Filters.Photo.GreyScaleMatrixFilter.Matrix">
            <summary>
            Gets the <see cref="T:System.Drawing.Imaging.ColorMatrix"/> for this filter instance.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.Filters.Photo.GreyScaleMatrixFilter.TransformImage(System.Drawing.Image,System.Drawing.Image)">
            <summary>
            Processes the image.
            </summary>
            <param name="source">The current image to process</param>
            <param name="destination">The new Image to return</param>
            <returns>
            The processed <see cref="T:System.Drawing.Bitmap"/>.
            </returns>
        </member>
        <member name="T:ImageProcessor.Imaging.Filters.Photo.LomographMatrixFilter">
            <summary>
            Encapsulates methods with which to add a lomograph filter to an image.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Filters.Photo.LomographMatrixFilter.Matrix">
            <summary>
            Gets the <see cref="T:System.Drawing.Imaging.ColorMatrix"/> for this filter instance.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.Filters.Photo.LomographMatrixFilter.TransformImage(System.Drawing.Image,System.Drawing.Image)">
            <summary>
            Processes the image.
            </summary>
            <param name="source">The current image to process</param>
            <param name="destination">The new Image to return</param>
            <returns>
            The processed <see cref="T:System.Drawing.Bitmap"/>.
            </returns>
        </member>
        <member name="T:ImageProcessor.Imaging.Filters.Photo.PolaroidMatrixFilter">
            <summary>
            Encapsulates methods with which to add a Polaroid filter to an image.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Filters.Photo.PolaroidMatrixFilter.Matrix">
            <summary>
            Gets the <see cref="T:System.Drawing.Imaging.ColorMatrix"/> for this filter instance.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.Filters.Photo.PolaroidMatrixFilter.TransformImage(System.Drawing.Image,System.Drawing.Image)">
            <summary>
            Processes the image.
            </summary>
            <param name="source">The current image to process</param>
            <param name="destination">The new Image to return</param>
            <returns>
            The processed <see cref="T:System.Drawing.Bitmap"/>.
            </returns>
        </member>
        <member name="T:ImageProcessor.Imaging.Filters.Photo.SepiaMatrixFilter">
            <summary>
            Encapsulates methods with which to add a sepia filter to an image.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Filters.Photo.SepiaMatrixFilter.Matrix">
            <summary>
            Gets the <see cref="T:System.Drawing.Imaging.ColorMatrix"/> for this filter instance.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.Filters.Photo.SepiaMatrixFilter.TransformImage(System.Drawing.Image,System.Drawing.Image)">
            <summary>
            Processes the image.
            </summary>
            <param name="source">The current image to process</param>
            <param name="destination">The new Image to return</param>
            <returns>
            The processed <see cref="T:System.Drawing.Bitmap"/>.
            </returns>
        </member>
        <member name="T:ImageProcessor.Imaging.Filters.Photo.IMatrixFilter">
            <summary>
            Defines properties and methods for ColorMatrix based filters.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Filters.Photo.IMatrixFilter.Matrix">
            <summary>
            Gets the <see cref="T:System.Drawing.Imaging.ColorMatrix"/> for this filter instance.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.Filters.Photo.IMatrixFilter.TransformImage(System.Drawing.Image,System.Drawing.Image)">
            <summary>
            Processes the image.
            </summary>
            <param name="source">The current image to process</param>
            <param name="destination">The new Image to return</param>
            <returns>
            The processed <see cref="T:System.Drawing.Bitmap"/>.
            </returns>
        </member>
        <member name="T:ImageProcessor.Imaging.Filters.Binarization.BinaryThreshold">
            <summary>
            Performs binary threshold filtering against a given greyscale image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Filters.Binarization.BinaryThreshold.threshold">
            <summary>
            The threshold value.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.Filters.Binarization.BinaryThreshold.#ctor(System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Imaging.Filters.Binarization.BinaryThreshold"/> class.
            </summary>
            <param name="threshold">
            The threshold.
            </param>
        </member>
        <member name="P:ImageProcessor.Imaging.Filters.Binarization.BinaryThreshold.Threshold">
            <summary>
            Gets or sets the threshold.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.Filters.Binarization.BinaryThreshold.ProcessFilter(System.Drawing.Bitmap)">
            <summary>
            Processes the given bitmap to apply the threshold.
            </summary>
            <param name="source">
            The image to process.
            </param>
            <returns>
            A processed bitmap.
            </returns>
        </member>
        <member name="T:ImageProcessor.Imaging.FastBitmap">
            <summary>
            Allows fast access to <see cref="T:System.Drawing.Bitmap"/>'s pixel data.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.FastBitmap.Format8bppIndexed">
            <summary>
            The integral representation of the 8bppIndexed pixel format.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.FastBitmap.Format24bppRgb">
            <summary>
            The integral representation of the 24bppRgb pixel format.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.FastBitmap.Format32bppArgb">
            <summary>
            The integral representation of the 32bppArgb pixel format.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.FastBitmap.Format32bppPArgb">
            <summary>
            The integral representation of the 32bppPArgb pixel format.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.FastBitmap.bitmap">
            <summary>
            The bitmap.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.FastBitmap.width">
            <summary>
            The width of the bitmap.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.FastBitmap.height">
            <summary>
            The height of the bitmap.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.FastBitmap.channel">
            <summary>
            The color channel - blue, green, red, alpha.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.FastBitmap.computeIntegrals">
            <summary>
            Whether to compute integral rectangles.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.FastBitmap.computeTilted">
            <summary>
            Whether to compute tilted integral rectangles.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.FastBitmap.normalSumImage">
            <summary>
            The normal integral image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.FastBitmap.squaredSumImage">
            <summary>
            The squared integral image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.FastBitmap.tiltedSumImage">
            <summary>
            The tilted sum image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.FastBitmap.normalWidth">
            <summary>
            The normal width.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.FastBitmap.tiltedWidth">
            <summary>
            The tilted width.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.FastBitmap.bytesInARow">
            <summary>
            The number of bytes in a row.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.FastBitmap.normalSum">
            <summary>
            The normal integral sum.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.FastBitmap.squaredSum">
            <summary>
            The squared integral sum.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.FastBitmap.tiltedSum">
            <summary>
            The tilted integral sum.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.FastBitmap.normalSumHandle">
            <summary>
            The normal sum handle.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.FastBitmap.squaredSumHandle">
            <summary>
            The squared sum handle.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.FastBitmap.tiltedSumHandle">
            <summary>
            The tilted sum handle.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.FastBitmap.pixelSize">
            <summary>
            The size of the color32 structure.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.FastBitmap.bitmapData">
            <summary>
            The bitmap data.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.FastBitmap.pixelBase">
            <summary>
            The position of the first pixel in the bitmap.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.FastBitmap.isDisposed">
            <summary>
            A value indicating whether this instance of the given entity has been disposed.
            </summary>
            <value><see langword="true"/> if this instance has been disposed; otherwise, <see langword="false"/>.</value>
            <remarks>
            If the entity is disposed, it must not be disposed a second
            time. The isDisposed field is set the first time the entity
            is disposed. If the isDisposed field is true, then the Dispose()
            method will not dispose again. This help not to prolong the entity's
            life in the Garbage Collector.
            </remarks>
        </member>
        <member name="M:ImageProcessor.Imaging.FastBitmap.#ctor(System.Drawing.Image)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Imaging.FastBitmap"/> class.
            </summary>
            <param name="bitmap">The input bitmap.</param>
        </member>
        <member name="M:ImageProcessor.Imaging.FastBitmap.#ctor(System.Drawing.Image,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Imaging.FastBitmap"/> class.
            </summary>
            <param name="bitmap">The input bitmap.</param>
            <param name="computeIntegrals">
            Whether to compute integral rectangles.
            </param>
        </member>
        <member name="M:ImageProcessor.Imaging.FastBitmap.#ctor(System.Drawing.Image,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Imaging.FastBitmap"/> class.
            </summary>
            <param name="bitmap">The input bitmap.</param>
            <param name="computeIntegrals">
            Whether to compute integral rectangles.
            </param>
            <param name="computeTilted">
            Whether to compute tilted integral rectangles.
            </param>
        </member>
        <member name="P:ImageProcessor.Imaging.FastBitmap.Width">
            <summary>
            Gets the width, in pixels of the <see cref="T:System.Drawing.Bitmap"/>.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.FastBitmap.Height">
            <summary>
            Gets the height, in pixels of the <see cref="T:System.Drawing.Bitmap"/>.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.FastBitmap.NormalImage">
            <summary>
            Gets the Integral Image for values' sum.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.FastBitmap.SquaredImage">
            <summary>
            Gets the Integral Image for values' squared sum.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.FastBitmap.TiltedImage">
            <summary>
            Gets the Integral Image for tilted values' sum.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.FastBitmap.Item(System.Int32,System.Int32)">
            <summary>
            Gets the pixel data for the given position.
            </summary>
            <param name="x">
            The x position of the pixel.
            </param>
            <param name="y">
            The y position of the pixel.
            </param>
            <returns>
            The <see cref="T:ImageProcessor.Imaging.Colors.Color32"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.FastBitmap.op_Implicit(ImageProcessor.Imaging.FastBitmap)~System.Drawing.Image">
            <summary>
            Allows the implicit conversion of an instance of <see cref="T:ImageProcessor.Imaging.FastBitmap"/> to a 
            <see cref="T:System.Drawing.Image"/>.
            </summary>
            <param name="fastBitmap">
            The instance of <see cref="T:ImageProcessor.Imaging.FastBitmap"/> to convert.
            </param>
            <returns>
            An instance of <see cref="T:System.Drawing.Image"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.FastBitmap.op_Implicit(ImageProcessor.Imaging.FastBitmap)~System.Drawing.Bitmap">
            <summary>
            Allows the implicit conversion of an instance of <see cref="T:ImageProcessor.Imaging.FastBitmap"/> to a 
            <see cref="T:System.Drawing.Bitmap"/>.
            </summary>
            <param name="fastBitmap">
            The instance of <see cref="T:ImageProcessor.Imaging.FastBitmap"/> to convert.
            </param>
            <returns>
            An instance of <see cref="T:System.Drawing.Bitmap"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.FastBitmap.GetPixel(System.Int32,System.Int32)">
            <summary>
            Gets the color at the specified pixel of the <see cref="T:System.Drawing.Bitmap"/>.
            </summary>
            <param name="x">The x-coordinate of the pixel to retrieve.</param>
            <param name="y">The y-coordinate of the pixel to retrieve.</param>
            <returns>The <see cref="T:System.Drawing.Color"/> at the given pixel.</returns>
        </member>
        <member name="M:ImageProcessor.Imaging.FastBitmap.SetPixel(System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
            Sets the color of the specified pixel of the <see cref="T:System.Drawing.Bitmap"/>.
            </summary>
            <param name="x">The x-coordinate of the pixel to set.</param>
            <param name="y">The y-coordinate of the pixel to set.</param>
            <param name="color">
            A <see cref="T:System.Drawing.Color"/> color structure that represents the 
            color to set the specified pixel.
            </param>
        </member>
        <member name="M:ImageProcessor.Imaging.FastBitmap.GetSum(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the sum of the pixels in a rectangle of the Integral image.
            </summary>
            <param name="x">The horizontal position of the rectangle <c>x</c>.</param>
            <param name="y">The vertical position of the rectangle <c>y</c>.</param>
            <param name="rectangleWidth">The rectangle's width <c>w</c>.</param>
            <param name="rectangleHeight">The rectangle's height <c>h</c>.</param>
            <returns>
            The sum of all pixels contained in the rectangle, computed
            as I[y, x] + I[y + h, x + w] - I[y + h, x] - I[y, x + w].
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.FastBitmap.GetSum2(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the sum of the squared pixels in a rectangle of the Integral image.
            </summary>
            <param name="x">The horizontal position of the rectangle <c>x</c>.</param>
            <param name="y">The vertical position of the rectangle <c>y</c>.</param>
            <param name="rectangleWidth">The rectangle's width <c>w</c>.</param>
            <param name="rectangleHeight">The rectangle's height <c>h</c>.</param>
            <returns>
            The sum of all pixels contained in the rectangle, computed
            as I²[y, x] + I²[y + h, x + w] - I²[y + h, x] - I²[y, x + w].
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.FastBitmap.GetSumT(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the sum of the pixels in a tilted rectangle of the Integral image.
            </summary>
            <param name="x">The horizontal position of the rectangle <c>x</c>.</param>
            <param name="y">The vertical position of the rectangle <c>y</c>.</param>
            <param name="rectangleWidth">The rectangle's width <c>w</c>.</param>
            <param name="rectangleHeight">The rectangle's height <c>h</c>.</param>
            <returns>
            The sum of all pixels contained in the rectangle, computed
            as T[y + w, x + w + 1] + T[y + h, x - h + 1] - T[y, x + 1] - T[y + w + h, x + w - h + 1].
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.FastBitmap.Dispose">
            <summary>
            Disposes the object and frees resources for the Garbage Collector.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.FastBitmap.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:ImageProcessor.Imaging.FastBitmap.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.FastBitmap.Dispose(System.Boolean)">
            <summary>
            Disposes the object and frees resources for the Garbage Collector.
            </summary>
            <param name="disposing">If true, the object gets disposed.</param>
        </member>
        <member name="M:ImageProcessor.Imaging.FastBitmap.LockBitmap">
            <summary>
            Locks the bitmap into system memory.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.FastBitmap.CalculateIntegrals">
            <summary>
            Computes all possible rectangular areas in the image.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.FastBitmap.UnlockBitmap">
            <summary>
            Unlocks the bitmap from system memory.
            </summary>
        </member>
        <member name="T:ImageProcessor.Imaging.AnchorPosition">
            <summary>
            Enumerated anchor positions to apply to resized images.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.AnchorPosition.Center">
            <summary>
            Anchors the position of the image to the center of it's bounding container.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.AnchorPosition.Top">
            <summary>
            Anchors the position of the image to the top of it's bounding container.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.AnchorPosition.Bottom">
            <summary>
            Anchors the position of the image to the bottom of it's bounding container.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.AnchorPosition.Left">
            <summary>
            Anchors the position of the image to the left of it's bounding container.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.AnchorPosition.Right">
            <summary>
            Anchors the position of the image to the right of it's bounding container.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.AnchorPosition.TopLeft">
            <summary>
            Anchors the position of the image to the top left side of it's bounding container.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.AnchorPosition.TopRight">
            <summary>
            Anchors the position of the image to the top right side of it's bounding container.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.AnchorPosition.BottomRight">
            <summary>
            Anchors the position of the image to the bottom right side of it's bounding container.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.AnchorPosition.BottomLeft">
            <summary>
            Anchors the position of the image to the bottom left side of it's bounding container.
            </summary>
        </member>
        <member name="T:ImageProcessor.Imaging.ImageLayer">
            <summary>
            Encapsulates the properties required to add an image layer to an image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.ImageLayer.isDisposed">
            <summary>
            A value indicating whether this instance of the given entity has been disposed.
            </summary>
            <value><see langword="true"/> if this instance has been disposed; otherwise, <see langword="false"/>.</value>
            <remarks>
            If the entity is disposed, it must not be disposed a second
            time. The isDisposed field is set the first time the entity
            is disposed. If the isDisposed field is true, then the Dispose()
            method will not dispose again. This help not to prolong the entity's
            life in the Garbage Collector.
            </remarks>
        </member>
        <member name="P:ImageProcessor.Imaging.ImageLayer.Image">
            <summary>
            Gets or sets the image.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.ImageLayer.Size">
            <summary>
            Gets or sets the size.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.ImageLayer.Opacity">
            <summary>
            Gets or sets the Opacity of the text layer.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.ImageLayer.Position">
            <summary>
            Gets or sets the Position of the text layer.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.ImageLayer.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the specified object is an
            <see cref="T:ImageProcessor.Imaging.ImageLayer"/> object that is equivalent to
            this <see cref="T:ImageProcessor.Imaging.ImageLayer"/> object.
            </summary>
            <param name="obj">
            The object to test.
            </param>
            <returns>
            True if the given object  is an <see cref="T:ImageProcessor.Imaging.ImageLayer"/> object that is equivalent to
            this <see cref="T:ImageProcessor.Imaging.ImageLayer"/> object; otherwise, false.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.ImageLayer.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.ImageLayer.Dispose">
            <summary>
            Disposes the object and frees resources for the Garbage Collector.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.ImageLayer.Dispose(System.Boolean)">
            <summary>
            Disposes the object and frees resources for the Garbage Collector.
            </summary>
            <param name="disposing">If true, the object gets disposed.</param>
        </member>
        <member name="T:ImageProcessor.Imaging.MetaData.Rational`1">
            <summary>
            Represents a rational number. Any number that can be expressed as the quotient or fraction p/q of two 
            numbers, p and q, with the denominator q not equal to zero.
            <remarks>
            Adapted from <see href="https://github.com/mckamey/exif-utils.net"/> by Stephen McKamey.
            </remarks>
            </summary>
            <typeparam name="T">
            The type to assign to the numerator and denominator components.
            </typeparam>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.Rational`1.Empty">
            <summary>
            Represents an empty instance of <see cref="T:ImageProcessor.Imaging.MetaData.Rational`1"/>.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.Rational`1.Delim">
            <summary>
            The delimiter.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.Rational`1.DelimSet">
            <summary>
            The array containing the delimiter.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.Rational`1.parser">
            <summary>
            The parser delegate method.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.Rational`1.tryParser">
            <summary>
            The try parser delegate method.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.Rational`1.maxValue">
            <summary>
            The max value.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.Rational`1.numerator">
            <summary>
            The numerator.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.Rational`1.denominator">
            <summary>
            The denominator.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.MetaData.Rational`1.#ctor(`0,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Imaging.MetaData.Rational`1"/> struct. 
            </summary>
            <param name="numerator">The numerator of the rational number.</param>
            <param name="denominator">The denominator of the rational number.</param>
            <remarks>
            Reduces by default
            </remarks>
        </member>
        <member name="M:ImageProcessor.Imaging.MetaData.Rational`1.#ctor(`0,`0,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Imaging.MetaData.Rational`1"/> struct. 
            </summary>
            <param name="numerator">The numerator of the rational number.</param>
            <param name="denominator">The denominator of the rational number.</param>
            <param name="reduce">determines if should reduce by greatest common divisor</param>
        </member>
        <member name="T:ImageProcessor.Imaging.MetaData.Rational`1.ParseDelegate">
            <summary>
            The parse delegate method.
            </summary>
            <param name="value">The value to parse.</param>
            <returns>
            The <see cref="T:ImageProcessor.Imaging.MetaData.Rational`1"/>
            </returns>
        </member>
        <member name="T:ImageProcessor.Imaging.MetaData.Rational`1.TryParseDelegate">
            <summary>
            The try parse delegate method.
            </summary>
            <param name="value">The value to parse.</param>
            <param name="rational">The parsed result.</param>
            <returns>
            The <see cref="T:System.Boolean"/>
            </returns>
        </member>
        <member name="P:ImageProcessor.Imaging.MetaData.Rational`1.Numerator">
            <summary>
            Gets and sets the numerator of the rational number
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.MetaData.Rational`1.Denominator">
            <summary>
            Gets and sets the denominator of the rational number
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.MetaData.Rational`1.IsEmpty">
            <summary>
            Gets a value indicating whether the current instance is empty.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.MetaData.Rational`1.MaxValue">
            <summary>
            Gets the MaxValue
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.MetaData.Rational`1.Approximate(System.Decimal)">
            <summary>
            Approximate the decimal value accurate to a precision of 0.000001m
            </summary>
            <param name="value">decimal value to approximate</param>
            <returns>an approximation of the value as a rational number</returns>
            <remarks>
            <see href="http://stackoverflow.com/questions/95727"/>
            </remarks>
        </member>
        <member name="M:ImageProcessor.Imaging.MetaData.Rational`1.Approximate(System.Decimal,System.Decimal)">
            <summary>
            Approximate the decimal value accurate to a certain precision
            </summary>
            <param name="value">decimal value to approximate</param>
            <param name="epsilon">maximum precision to converge</param>
            <returns>an approximation of the value as a rational number</returns>
            <remarks>
            <see href="http://stackoverflow.com/questions/95727"/>
            </remarks>
        </member>
        <member name="M:ImageProcessor.Imaging.MetaData.Rational`1.Parse(System.String)">
            <summary>
            Converts the string representation of a number to its <see cref="T:ImageProcessor.Imaging.MetaData.Rational`1"/> equivalent.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>
            The <see cref="T:ImageProcessor.Imaging.MetaData.Rational`1"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.MetaData.Rational`1.TryParse(System.String,ImageProcessor.Imaging.MetaData.Rational{`0}@)">
            <summary>
            Converts the string representation of a number to its <see cref="T:ImageProcessor.Imaging.MetaData.Rational`1"/> equivalent.
            A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="rational">The converted <see cref="T:ImageProcessor.Imaging.MetaData.Rational`1"/>.</param>
            <returns>
            The <see cref="T:ImageProcessor.Imaging.MetaData.Rational`1"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.MetaData.Rational`1.BuildParser">
            <summary>
            Builds a parser to convert objects.
            </summary>
            <returns>
            The <see cref="T:ImageProcessor.Imaging.MetaData.Rational`1"/>.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            Thrown when the underlying rational type does not support a parse method.
            </exception>
            <exception cref="T:System.Reflection.TargetInvocationException">
            Thrown when a reflection error occurs.
            </exception>
        </member>
        <member name="M:ImageProcessor.Imaging.MetaData.Rational`1.BuildTryParser">
            <summary>
            Tries to build a parser to convert objects.
            </summary>
            <returns>
            The <see cref="T:ImageProcessor.Imaging.MetaData.Rational`1"/>.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            Thrown when the underlying rational type does not support a parse method.
            </exception>
            <exception cref="T:System.Reflection.TargetInvocationException">
            Thrown when a reflection error occurs.
            </exception>
        </member>
        <member name="M:ImageProcessor.Imaging.MetaData.Rational`1.Reduce">
            <summary>
            Finds the greatest common divisor and reduces the fraction by this amount.
            </summary>
            <returns>the reduced rational</returns>
        </member>
        <member name="M:ImageProcessor.Imaging.MetaData.Rational`1.Reduce(`0@,`0@)">
            <summary>
            Finds the greatest common divisor and reduces the fraction by this amount.
            </summary>
            <param name="numerator">The numerator.</param>
            <param name="denominator">The denominator.</param>
        </member>
        <member name="M:ImageProcessor.Imaging.MetaData.Rational`1.Lcd(System.Decimal,System.Decimal)">
            <summary>
            The least common multiple of the denominators of a set of fractions
            </summary>
            <param name="a">The first decimal.</param>
            <param name="b">The second decimal.</param>
            <returns>The lowest common denominator.</returns>
        </member>
        <member name="M:ImageProcessor.Imaging.MetaData.Rational`1.Gcd(System.Decimal,System.Decimal)">
            <summary>
            The largest positive decimal that divides the numbers without a remainder
            </summary>
            <param name="a">The first decimal.</param>
            <param name="b">The second decimal.</param>
            <returns>The greatest common divisor.</returns>
        </member>
        <member name="M:ImageProcessor.Imaging.MetaData.Rational`1.ToString(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent <see cref="T:System.String"/> using the specified 
            culture-specific formatting information.
            </summary>
            <returns>
            A <see cref="T:System.String"/> instance equivalent to the value of this instance.
            </returns>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific 
            formatting information. 
            </param>
        </member>
        <member name="M:ImageProcessor.Imaging.MetaData.Rational`1.ToDecimal(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent <see cref="T:System.Decimal"/> number using the 
            specified culture-specific formatting information.
            </summary>
            <returns>
            A <see cref="T:System.Decimal"/> number equivalent to the value of this instance.
            </returns>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific 
            formatting information. 
            </param>
        </member>
        <member name="M:ImageProcessor.Imaging.MetaData.Rational`1.ToDouble(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent double-precision floating-point number using 
            the specified culture-specific formatting information.
            </summary>
            <returns>
            A double-precision floating-point number equivalent to the value of this instance.
            </returns>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific 
            formatting information. 
            </param>
        </member>
        <member name="M:ImageProcessor.Imaging.MetaData.Rational`1.ToSingle(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent single-precision floating-point number 
            using the specified culture-specific formatting information.
            </summary>
            <returns>
            A single-precision floating-point number equivalent to the value of this instance.
            </returns>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific 
            formatting information. 
            </param>
        </member>
        <member name="M:ImageProcessor.Imaging.MetaData.Rational`1.System#IConvertible#ToBoolean(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent Boolean value using the specified 
            culture-specific formatting information.
            </summary>
            <returns>
            A Boolean value equivalent to the value of this instance.
            </returns>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific 
            formatting information. 
            </param>
        </member>
        <member name="M:ImageProcessor.Imaging.MetaData.Rational`1.System#IConvertible#ToByte(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 8-bit unsigned integer using the specified 
            culture-specific formatting information.
            </summary>
            <returns>
            An 8-bit unsigned integer equivalent to the value of this instance.
            </returns>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> interface implementation that 
            supplies culture-specific formatting information. 
            </param>
        </member>
        <member name="M:ImageProcessor.Imaging.MetaData.Rational`1.System#IConvertible#ToChar(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent Unicode character using the specified 
            culture-specific formatting information.
            </summary>
            <returns>
            A Unicode character equivalent to the value of this instance.
            </returns>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific 
            formatting information. 
            </param>
        </member>
        <member name="M:ImageProcessor.Imaging.MetaData.Rational`1.System#IConvertible#ToInt16(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 16-bit signed integer using the specified 
            culture-specific formatting information.
            </summary>
            <returns>
            An 16-bit signed integer equivalent to the value of this instance.
            </returns>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific 
            formatting information. 
            </param>
        </member>
        <member name="M:ImageProcessor.Imaging.MetaData.Rational`1.System#IConvertible#ToInt32(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 32-bit signed integer using the specified 
            culture-specific formatting information.
            </summary>
            <returns>
            An 32-bit signed integer equivalent to the value of this instance.
            </returns>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific 
            formatting information. 
            </param>
        </member>
        <member name="M:ImageProcessor.Imaging.MetaData.Rational`1.System#IConvertible#ToInt64(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 64-bit signed integer using the specified 
            culture-specific formatting information.
            </summary>
            <returns>
            An 64-bit signed integer equivalent to the value of this instance.
            </returns>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific 
            formatting information. 
            </param>
        </member>
        <member name="M:ImageProcessor.Imaging.MetaData.Rational`1.System#IConvertible#ToSByte(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 8-bit signed integer using the specified 
            culture-specific formatting information.
            </summary>
            <returns>
            An 8-bit signed integer equivalent to the value of this instance.
            </returns>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific 
            formatting information. 
            </param>
        </member>
        <member name="M:ImageProcessor.Imaging.MetaData.Rational`1.System#IConvertible#ToUInt16(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 16-bit unsigned integer using the specified 
            culture-specific formatting information.
            </summary>
            <returns>
            An 16-bit unsigned integer equivalent to the value of this instance.
            </returns>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific 
            formatting information. 
            </param>
        </member>
        <member name="M:ImageProcessor.Imaging.MetaData.Rational`1.System#IConvertible#ToUInt32(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 32-bit unsigned integer using the specified 
            culture-specific formatting information.
            </summary>
            <returns>
            An 32-bit unsigned integer equivalent to the value of this instance.
            </returns>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific 
            formatting information. 
            </param>
        </member>
        <member name="M:ImageProcessor.Imaging.MetaData.Rational`1.System#IConvertible#ToUInt64(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 64-bit unsigned integer using the specified 
            culture-specific formatting information.
            </summary>
            <returns>
            An 64-bit unsigned integer equivalent to the value of this instance.
            </returns>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> interface implementation that 
            supplies culture-specific formatting information. 
            </param>
        </member>
        <member name="M:ImageProcessor.Imaging.MetaData.Rational`1.System#IConvertible#ToDateTime(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent <see cref="T:System.DateTime"/> using the specified 
            culture-specific formatting information.
            </summary>
            <returns>
            A <see cref="T:System.DateTime"/> instance equivalent to the value of this instance.
            </returns>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific 
            formatting information. 
            </param>
        </member>
        <member name="M:ImageProcessor.Imaging.MetaData.Rational`1.System#IConvertible#GetTypeCode">
            <summary>
            Returns the <see cref="T:System.TypeCode"/> for this instance.
            </summary>
            <returns>
            The enumerated constant that is the <see cref="T:System.TypeCode"/> of the class or value type that 
            implements this interface.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.MetaData.Rational`1.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an <see cref="T:System.Object"/> of the specified 
            <see cref="T:System.Type"/> that has an equivalent value, using the specified culture-specific 
            formatting information.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> instance of type <paramref name="conversionType"/> whose value is 
            equivalent to the value of this instance.
            </returns>
            <param name="conversionType">
            The <see cref="T:System.Type"/> to which the value of this instance is converted. 
            </param>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific 
            formatting information. 
            </param>
        </member>
        <member name="M:ImageProcessor.Imaging.MetaData.Rational`1.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates 
            whether the current instance precedes, follows, or occurs in the same position in the sort order as the 
            other object.
            </summary>
            <returns>
            A value that indicates the relative order of the objects being compared. 
            The return value has these meanings: Value Meaning Less than zero This instance precedes 
            <paramref name="obj"/> in the sort order. Zero This instance occurs in the same position in the sort order 
            as <paramref name="obj"/>. Greater than zero This instance follows <paramref name="obj"/> in the sort order. 
            </returns>
            <param name="obj">An object to compare with this instance. </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="obj"/> is not the same type as this instance. 
            </exception>
        </member>
        <member name="M:ImageProcessor.Imaging.MetaData.Rational`1.CompareTo(`0)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates 
            whether the current instance precedes, follows, or occurs in the same position in the sort order as the 
            other object. 
            </summary>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has these 
            meanings: Value Meaning Less than zero This instance precedes <paramref name="other"/> in the sort order.  
            Zero This instance occurs in the same position in the sort order as <paramref name="other"/>. Greater than 
            zero This instance follows <paramref name="other"/> in the sort order. 
            </returns>
            <param name="other">An object to compare with this instance. </param>
        </member>
        <member name="M:ImageProcessor.Imaging.MetaData.Rational`1.op_UnaryNegation(ImageProcessor.Imaging.MetaData.Rational{`0})">
            <summary>
            Performs a numeric negation of the operand.
            </summary>
            <param name="rational">The rational to negate.</param>
            <returns>
            The negated rational.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.MetaData.Rational`1.op_Addition(ImageProcessor.Imaging.MetaData.Rational{`0},ImageProcessor.Imaging.MetaData.Rational{`0})">
            <summary>
            Computes the sum of two rational instances.
            </summary>
            <param name="r1">The first rational operand.</param>
            <param name="r2">The second rational operand.</param>
            <returns>The computed sum.</returns>
        </member>
        <member name="M:ImageProcessor.Imaging.MetaData.Rational`1.op_Subtraction(ImageProcessor.Imaging.MetaData.Rational{`0},ImageProcessor.Imaging.MetaData.Rational{`0})">
            <summary>
            Computes the subtraction of one rational instance from another.
            </summary>
            <param name="r1">The first rational operand.</param>
            <param name="r2">The second rational operand.</param>
            <returns>The computed result.</returns>
        </member>
        <member name="M:ImageProcessor.Imaging.MetaData.Rational`1.op_Multiply(ImageProcessor.Imaging.MetaData.Rational{`0},ImageProcessor.Imaging.MetaData.Rational{`0})">
            <summary>
            Computes the product of multiplying two rational instances.
            </summary>
            <param name="r1">The first rational operand.</param>
            <param name="r2">The second rational operand.</param>
            <returns>The computed product.</returns>
        </member>
        <member name="M:ImageProcessor.Imaging.MetaData.Rational`1.op_Division(ImageProcessor.Imaging.MetaData.Rational{`0},ImageProcessor.Imaging.MetaData.Rational{`0})">
            <summary>
            Computes the product of dividing two rational instances.
            </summary>
            <param name="r1">The first rational operand.</param>
            <param name="r2">The second rational operand.</param>
            <returns>The computed product.</returns>
        </member>
        <member name="M:ImageProcessor.Imaging.MetaData.Rational`1.op_LessThan(ImageProcessor.Imaging.MetaData.Rational{`0},ImageProcessor.Imaging.MetaData.Rational{`0})">
            <summary>
            Determines whether the first rational operand is less than the second.
            </summary>
            <param name="r1">The first rational operand.</param>
            <param name="r2">The second rational operand.</param>
            <returns>The computed result.</returns>
        </member>
        <member name="M:ImageProcessor.Imaging.MetaData.Rational`1.op_LessThanOrEqual(ImageProcessor.Imaging.MetaData.Rational{`0},ImageProcessor.Imaging.MetaData.Rational{`0})">
            <summary>
            Determines whether the first rational operand is less than or equal to the second.
            </summary>
            <param name="r1">The first rational operand.</param>
            <param name="r2">The second rational operand.</param>
            <returns>The computed result.</returns>
        </member>
        <member name="M:ImageProcessor.Imaging.MetaData.Rational`1.op_GreaterThan(ImageProcessor.Imaging.MetaData.Rational{`0},ImageProcessor.Imaging.MetaData.Rational{`0})">
            <summary>
            Determines whether the first rational operand is greater than the second.
            </summary>
            <param name="r1">The first rational operand.</param>
            <param name="r2">The second rational operand.</param>
            <returns>The computed result.</returns>
        </member>
        <member name="M:ImageProcessor.Imaging.MetaData.Rational`1.op_GreaterThanOrEqual(ImageProcessor.Imaging.MetaData.Rational{`0},ImageProcessor.Imaging.MetaData.Rational{`0})">
            <summary>
            Determines whether the first rational operand is greater than or equal to the second.
            </summary>
            <param name="r1">The first rational operand.</param>
            <param name="r2">The second rational operand.</param>
            <returns>The computed result.</returns>
        </member>
        <member name="M:ImageProcessor.Imaging.MetaData.Rational`1.op_Equality(ImageProcessor.Imaging.MetaData.Rational{`0},ImageProcessor.Imaging.MetaData.Rational{`0})">
            <summary>
            Determines whether the first rational operand is equal to the second.
            </summary>
            <param name="r1">The first rational operand.</param>
            <param name="r2">The second rational operand.</param>
            <returns>The computed result.</returns>
        </member>
        <member name="M:ImageProcessor.Imaging.MetaData.Rational`1.op_Inequality(ImageProcessor.Imaging.MetaData.Rational{`0},ImageProcessor.Imaging.MetaData.Rational{`0})">
            <summary>
            Determines whether the first rational operand is not equal to the second.
            </summary>
            <param name="r1">The first rational operand.</param>
            <param name="r2">The second rational operand.</param>
            <returns>The computed result.</returns>
        </member>
        <member name="M:ImageProcessor.Imaging.MetaData.Rational`1.ToString">
            <summary>
            Returns the fully qualified type name of this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing a fully qualified type name.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.MetaData.Rational`1.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <returns>
            true if <paramref name="obj"/> and this instance are the same type and represent the same value; 
            otherwise, false. 
            </returns>
            <param name="obj">The object to compare with the current instance. </param>
        </member>
        <member name="M:ImageProcessor.Imaging.MetaData.Rational`1.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="T:ImageProcessor.Imaging.MetaData.ExifBitConverter">
            <summary>
            The exif bit converter. Converts based on the endianness of the current machine.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifBitConverter.computerArchitectureInfo">
            <summary>
            The computer architecture info.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.MetaData.ExifBitConverter.#ctor(ImageProcessor.Imaging.IComputerArchitectureInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Imaging.MetaData.ExifBitConverter"/> class.
            </summary>
            <param name="computerArchitectureInfo">
            The computer architecture info.
            </param>
        </member>
        <member name="P:ImageProcessor.Imaging.MetaData.ExifBitConverter.Endianness">
            <summary>
            Indicates the byte order ("endianness") in which data is converted using this class.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.MetaData.ExifBitConverter.IsLittleEndian">
            <summary>
            Indicates the byte order ("endianness") in which data is converted using this class.
            </summary>
            <remarks>
            Different computer architectures store data using different byte orders. "Big-endian"
            means the most significant byte is on the left end of a word. "Little-endian" means the 
            most significant byte is on the right end of a word.
            </remarks>
            <returns>true if this converter is little-endian, false otherwise.</returns>
        </member>
        <member name="M:ImageProcessor.Imaging.MetaData.ExifBitConverter.GetBytes(System.String,System.Boolean)">
            <summary>
            Converts the given ascii string to an array of bytes optionally adding a null terminator.
            </summary>
            <param name="value">The string to convert</param>
            <param name="addnull">Whether to add a null terminator to the end of the string.</param>
            <returns>
            The <see cref="T:byte[]"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.MetaData.ExifBitConverter.GetBytes(System.String)">
            <summary>
            Converts the given ascii string to an array of bytes without adding a null terminator.
            </summary>
            <param name="value">The string to convert.</param>
            <returns>
            The <see cref="T:byte[]"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.MetaData.ExifBitConverter.GetBytes(ImageProcessor.Imaging.MetaData.Rational{System.UInt32})">
            <summary>
            Converts the given unsigned rational number to an array of bytes.
            </summary>
            <param name="value">
            The <see cref="T:Rational{int}"/> containing the numerator and denominator.
            </param>
            <returns>
            The <see cref="T:byte[]"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.MetaData.ExifBitConverter.GetBytes(ImageProcessor.Imaging.MetaData.Rational{System.Int32})">
            <summary>
            Converts the given signed rational number to an array of bytes.
            </summary>
            <param name="value">
            The <see cref="T:Rational{int}"/> containing the numerator and denominator.
            </param>
            <returns>
            The <see cref="T:byte[]"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.MetaData.ExifBitConverter.FromBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Convert the given number of bytes from the given array, from the given start
            position, into a long, using the bytes as the least significant part of the long.
            By the time this is called, the arguments have been checked for validity.
            </summary>
            <param name="value">The bytes to convert</param>
            <param name="startIndex">The index of the first byte to convert</param>
            <param name="bytesToConvert">The number of bytes to use in the conversion</param>
            <returns>The converted number</returns>
        </member>
        <member name="M:ImageProcessor.Imaging.MetaData.ExifBitConverter.CopyBytesImpl(System.Int64,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Copies the given number of bytes from the least-specific
            end of the specified value into the specified byte array, beginning
            at the specified index.
            This must be implemented in concrete derived classes, but the implementation
            may assume that the value will fit into the buffer.
            </summary>
            <param name="value">The value to copy bytes for</param>
            <param name="bytes">The number of significant bytes to copy</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="T:ImageProcessor.Imaging.MetaData.ImageFactoryMetaExtensions">
            <summary>
            Extension methods for writing EXIF metadata to the image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ImageFactoryMetaExtensions.BitConverter">
            <summary>
            The converter for converting inputs into byte arrays.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.MetaData.ImageFactoryMetaExtensions.SetPropertyItem(ImageProcessor.ImageFactory,ImageProcessor.Imaging.MetaData.ExifPropertyTag,System.Byte)">
            <summary>
            Sets a property item with the given id to the collection within the current
            <see cref="T:ImageProcessor.ImageFactory"/> instance.
            </summary>
            <param name="imageFactory">The image factory.</param>
            <param name="id">The id to assign to the property item.</param>
            <param name="value">The value to assign to the property item.</param>
            <returns>
            The <see cref="T:ImageProcessor.ImageFactory"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.MetaData.ImageFactoryMetaExtensions.SetPropertyItem(ImageProcessor.ImageFactory,ImageProcessor.Imaging.MetaData.ExifPropertyTag,System.String)">
            <summary>
            Sets a property item with the given id to the collection within the current
            <see cref="T:ImageProcessor.ImageFactory"/> instance.
            </summary>
            <param name="imageFactory">The image factory.</param>
            <param name="id">The id to assign to the property item.</param>
            <param name="value">The value to assign to the property item.</param>
            <returns>
            The <see cref="T:ImageProcessor.ImageFactory"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.MetaData.ImageFactoryMetaExtensions.SetPropertyItem(ImageProcessor.ImageFactory,ImageProcessor.Imaging.MetaData.ExifPropertyTag,System.UInt16)">
            <summary>
            Sets a property item with the given id to the collection within the current
            <see cref="T:ImageProcessor.ImageFactory"/> instance.
            </summary>
            <param name="imageFactory">The image factory.</param>
            <param name="id">The id to assign to the property item.</param>
            <param name="value">The value to assign to the property item.</param>
            <returns>
            The <see cref="T:ImageProcessor.ImageFactory"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.MetaData.ImageFactoryMetaExtensions.SetPropertyItem(ImageProcessor.ImageFactory,ImageProcessor.Imaging.MetaData.ExifPropertyTag,System.UInt32)">
            <summary>
            Sets a property item with the given id to the collection within the current
            <see cref="T:ImageProcessor.ImageFactory"/> instance.
            </summary>
            <param name="imageFactory">The image factory.</param>
            <param name="id">The id to assign to the property item.</param>
            <param name="value">The value to assign to the property item.</param>
            <returns>
            The <see cref="T:ImageProcessor.ImageFactory"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.MetaData.ImageFactoryMetaExtensions.SetPropertyItem(ImageProcessor.ImageFactory,ImageProcessor.Imaging.MetaData.ExifPropertyTag,ImageProcessor.Imaging.MetaData.Rational{System.UInt32})">
            <summary>
            Sets a property item with the given id to the collection within the current
            <see cref="T:ImageProcessor.ImageFactory"/> instance.
            </summary>
            <param name="imageFactory">The image factory.</param>
            <param name="id">The id to assign to the property item.</param>
            <param name="value">The value to assign to the property item.</param>
            <returns>
            The <see cref="T:ImageProcessor.ImageFactory"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.MetaData.ImageFactoryMetaExtensions.SetPropertyItem(ImageProcessor.ImageFactory,ImageProcessor.Imaging.MetaData.ExifPropertyTag,System.Byte[])">
            <summary>
            Sets a property item with the given id to the collection within the current
            <see cref="T:ImageProcessor.ImageFactory"/> instance.
            </summary>
            <param name="imageFactory">The image factory.</param>
            <param name="id">The id to assign to the property item.</param>
            <param name="value">The value to assign to the property item.</param>
            <returns>
            The <see cref="T:ImageProcessor.ImageFactory"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.MetaData.ImageFactoryMetaExtensions.SetPropertyItem(ImageProcessor.ImageFactory,ImageProcessor.Imaging.MetaData.ExifPropertyTag,System.Int32)">
            <summary>
            Sets a property item with the given id to the collection within the current
            <see cref="T:ImageProcessor.ImageFactory"/> instance.
            </summary>
            <param name="imageFactory">The image factory.</param>
            <param name="id">The id to assign to the property item.</param>
            <param name="value">The value to assign to the property item.</param>
            <returns>
            The <see cref="T:ImageProcessor.ImageFactory"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.MetaData.ImageFactoryMetaExtensions.SetPropertyItem(ImageProcessor.ImageFactory,ImageProcessor.Imaging.MetaData.ExifPropertyTag,ImageProcessor.Imaging.MetaData.Rational{System.Int32})">
            <summary>
            Sets a property item with the given id to the collection within the current
            <see cref="T:ImageProcessor.ImageFactory"/> instance.
            </summary>
            <param name="imageFactory">The image factory.</param>
            <param name="id">The id to assign to the property item.</param>
            <param name="value">The value to assign to the property item.</param>
            <returns>
            The <see cref="T:ImageProcessor.ImageFactory"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.MetaData.ImageFactoryMetaExtensions.SetPropertyItem(ImageProcessor.ImageFactory,ImageProcessor.Imaging.MetaData.ExifPropertyTag,ImageProcessor.Imaging.MetaData.ExifPropertyTagType,System.Int32,System.Byte[])">
            <summary>
            Sets a property item with the given id to the collection within the current
            <see cref="T:ImageProcessor.ImageFactory"/> instance.
            </summary>
            <param name="imageFactory">The image factory.</param>
            <param name="id">The id to assign to the property item.</param>
            <param name="type">The type to assign to the property item.</param>
            <param name="length">The length to assign to the property item.</param>
            <param name="value">The value to assign to the property item.</param>
            <returns>
            The <see cref="T:ImageProcessor.ImageFactory"/>.
            </returns>
        </member>
        <member name="T:ImageProcessor.Imaging.MetaData.PropertyTagResolutionUnit">
            <summary>
            The following enum gives the unit of measure for the horizontal resolution and the vertical resolution 
            supported by Windows GDI+.
            <see href="https://msdn.microsoft.com/en-us/library/ms534416(v=vs.85).aspx#_gdiplus_constant_propertytagresolutionunit"/>
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.PropertyTagResolutionUnit.Inch">
            <summary>
            The resolution is measured in pixels per inch.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.PropertyTagResolutionUnit.Cm">
            <summary>
            The resolution is measured in pixels per centimeter.
            </summary>
        </member>
        <member name="T:ImageProcessor.Imaging.MetaData.Int32Converter">
            <summary>
            Provides a way to convert integers to an array of bytes without creating multiple
            short term arrays.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.Int32Converter.Value">
            <summary>
            The value of the byte array as an integer.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.Int32Converter.Byte1">
            <summary>
            The first byte.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.Int32Converter.Byte2">
            <summary>
            The second byte.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.Int32Converter.Byte3">
            <summary>
            The third byte.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.Int32Converter.Byte4">
            <summary>
            The fourth byte.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.MetaData.Int32Converter.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Imaging.MetaData.Int32Converter"/> struct.
            </summary>
            <param name="value">
            The value to convert from.
            </param>
        </member>
        <member name="M:ImageProcessor.Imaging.MetaData.Int32Converter.op_Implicit(ImageProcessor.Imaging.MetaData.Int32Converter)~System.Int32">
            <summary>
            Allows the implicit conversion of an instance of <see cref="T:ImageProcessor.Imaging.MetaData.Int32Converter"/> to a 
            <see cref="T:System.Int32"/>.
            </summary>
            <param name="value">
            The instance of <see cref="T:ImageProcessor.Imaging.MetaData.Int32Converter"/> to convert.
            </param>
            <returns>
            An instance of <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.MetaData.Int32Converter.op_Implicit(System.Int32)~ImageProcessor.Imaging.MetaData.Int32Converter">
            <summary>
            Allows the implicit conversion of an instance of <see cref="T:System.Int32"/> to a 
            <see cref="T:ImageProcessor.Imaging.MetaData.Int32Converter"/>.
            </summary>
            <param name="value">
            The instance of <see cref="T:System.Int32"/> to convert.
            </param>
            <returns>
            An instance of <see cref="T:ImageProcessor.Imaging.MetaData.Int32Converter"/>.
            </returns>
        </member>
        <member name="T:ImageProcessor.Imaging.MetaData.ExifPropertyTagType">
            <summary>
            Specifies the data type of the values stored in the value data member of that same PropertyItem object.
            <see href="http://msdn.microsoft.com/en-us/library/system.drawing.imaging.propertyitem.type.aspx"/>
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTagType.Byte">
            <summary>
            Specifies that the value data member is an array of bytes.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTagType.ASCII">
            <summary>
            Specifies that the value data member is a null-terminated ASCII string. If you set the type data member of a
            PropertyItem object to ExifPropertyTagTypeASCII, you should set the length data member to the length of the string
            including the NULL terminator. For example, the string HELLO would have a length of 6.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTagType.UShort">
            <summary>Specifies that the value data member is an array of unsigned short (16-bit) integers.</summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTagType.ULong">
            <summary>Specifies that the value data member is an array of unsigned long (32-bit) integers.</summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTagType.Rational">
            <summary>
            Specifies that the value data member is an array of pairs of unsigned long integers. Each pair represents a
            fraction; the first integer is the numerator and the second integer is the denominator.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTagType.Undefined">
            <summary>
            Specifies that the value data member is an array of bytes that can hold values of any data type.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTagType.SLong">
            <summary>
            Specifies that the value data member is an array of signed long (32-bit) integers.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTagType.SRational">
            <summary>
            Specifies that the value data member is an array of pairs of signed long integers. Each pair represents a
            fraction; the first integer is the numerator and the second integer is the denominator.
            </summary>
        </member>
        <member name="T:ImageProcessor.Imaging.MetaData.ExifPropertyTag">
            <summary>
            The following enum gives descriptions of the property items supported by Windows GDI+.
            <see href="http://msdn.microsoft.com/en-us/library/ms534417%28VS.85%29.aspx"/>
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.Artist">
            <summary>
            Null-terminated character string that specifies the name of the person who created the image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.BitsPerSample">
            <summary>
            Number of bits per color component. See also <see cref="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.SamplesPerPixel"/>
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.CellHeight">
            <summary>
            Height of the dithering or halftoning matrix.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.CellWidth">
            <summary>
            Width of the dithering or halftoning matrix.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ChrominanceTable">
            <summary>
            Chrominance table. The luminance table and the chrominance table are used to control JPEG quality. 
            A valid luminance or chrominance table has 64 entries. 
            If an image has either a luminance table or a chrominance table, then it must have both tables.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ColorMap">
            <summary>
            Color palette (lookup table) for a palette-indexed image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ColorTransferFunction">
            <summary>
            Table of values that specify color transfer functions.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.Compression">
            <summary>
            Compression scheme used for the image data.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.Copyright">
            <summary>
            Null-terminated character string that contains copyright information.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.DateTime">
            <summary>
            Date and time the image was created.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.DocumentName">
            <summary>
            Null-terminated character string that specifies the name of the document from 
            which the image was scanned.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.DotRange">
            <summary>
            Color component values that correspond to a 0 percent dot and a 100 percent dot.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.EquipMake">
            <summary>
            Null-terminated character string that specifies the manufacturer of the 
            equipment used to record the image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.EquipModel">
            <summary>
            Null-terminated character string that specifies the model name or model number
            of the equipment used to record the image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ExifAperture">
            <summary>
            Lens aperture. The unit is the APEX value.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ExifBrightness">
            <summary>
            Brightness value. The unit is the APEX value. Ordinarily it is given 
            in the range of -99.99 to 99.99.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ExifCfaPattern">
            <summary>
            The color filter array (CFA) geometric pattern of the image sensor when a one-chip color 
            area sensor is used. It does not apply to all sensing methods.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ExifColorSpace">
            <summary>
            Color space specifier. Normally sRGB (=1) is used to define the color space 
            based on the PC monitor conditions and environment. If a color space other 
            than sRGB is used, Uncalibrated (=0xFFFF) is set. Image data recorded as 
            Uncalibrated can be treated as sRGB when it is converted to FlashPix.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ExifCompBPP">
            <summary>
            Information specific to compressed data. The compression mode used for a 
            compressed image is indicated in unit BPP.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ExifCompConfig">
            <summary>
            Information specific to compressed data. The channels of each component are 
            arranged in order from the first component to the fourth. For 
            uncompressed data, the data arrangement is given in the 
            PhotometricInterp tag.
            <para>
            However, because PhotometricInterp can only express the order of Y, Cb, and Cr, 
            this tag is provided for cases when compressed data uses components other than 
            Y, Cb, and Cr and to support other sequences.
            </para>
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ExifDTDigitized">
            <summary>
            Date and time when the image was stored as digital data. If, for example, an image 
            was captured by DSC and at the same time the file was recorded, then DateTimeOriginal 
            and DateTimeDigitized will have the same contents.
            <para>
            The format is YYYY:MM:DD HH:MM:SS with time shown in 24-hour format and the date and 
            time separated by one blank character (0x2000). The character string length is 20 bytes 
            including the NULL terminator. When the field is empty, it is treated as unknown.
            </para>
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ExifDTDigSS">
            <summary>
            Null-terminated character string that specifies a fraction of a second for the ExifDTDigitized tag.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ExifDTOrig">
            <summary>
            Date and time when the original image data was generated. For a DSC, the date and time when the picture was taken. The format is YYYY:MM:DD HH:MM:SS with time shown in 24-hour format and the date and time separated by one blank character (0x2000). The character string length is 20 bytes including the NULL terminator. When the field is empty, it is treated as unknown.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ExifDTOrigSS">
            <summary>
            Null-terminated character string that specifies a fraction of a second for the <see cref="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ExifDTOrig"/> tag.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ExifDTSubsec">
            <summary>
            Null-terminated character string that specifies a fraction of a second for the <see cref="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.DateTime"/> tag.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ExifExposureBias">
            <summary>
            Exposure bias. The unit is the APEX value. Ordinarily it is given in the range -99.99 to 99.99.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ExifExposureIndex">
            <summary>
            Exposure index selected on the camera or input device at the time the image was captured.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ExifExposureProg">
            <summary>
            Class of the program used by the camera to set exposure when the picture is taken.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ExifExposureTime">
            <summary>
            Exposure time, measured in seconds.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ExifFileSource">
            <summary>
            The image source. If a DSC recorded the image, the value of this tag is 3.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ExifFlash">
            <summary>
            Flash status. This tag is recorded when an image is taken using a strobe light (flash). Bit 0 indicates the flash firing status, and bits 1 and 2 indicate the flash return status.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ExifFlashEnergy">
            <summary>
            Strobe energy, in Beam Candle Power Seconds (BCPS), at the time the image was captured.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ExifFNumber">
            <summary>
            F number.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ExifFocalLength">
            <summary>
            Actual focal length, in millimeters, of the lens. Conversion is not made to the focal length of a 35 millimeter film camera.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ExifFocalResUnit">
            <summary>
            Unit of measure for <see cref="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ExifFocalXRes"/> and <see cref="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ExifFocalYRes"/>.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ExifFocalXRes">
            <summary>
            Number of pixels in the image width (x) direction per unit on the camera focal plane. The unit is specified 
            in <see cref="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ExifFocalResUnit"/>.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ExifFocalYRes">
            <summary>
            Number of pixels in the image height (y) direction per unit on the camera focal plane. The unit is specified 
            in <see cref="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ExifFocalResUnit"/>.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ExifFPXVer">
            <summary>
            FlashPix format version supported by an FPXR file. If the FPXR function supports FlashPix format version 1.0, 
            this is indicated similarly to <see cref="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ExifVer"/> by recording 0100 as a 4-byte ASCII string. 
            Because the type is <see cref="F:ImageProcessor.Imaging.MetaData.ExifPropertyTagType.Undefined"/>, there is no NULL terminator.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ExifIFD">
            <summary>
            Private tag used by GDI+. Not for public use. GDI+ uses this tag to locate Exif specific information.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ExifInterop">
            <summary>
            Offset to a block of property items that contain interoperability information.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ExifISOSpeed">
            <summary>
            ISO speed and ISO latitude of the camera or input device as specified in ISO 12232.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ExifLightSource">
            <summary>
            Type of light source.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ExifMakerNote">
            <summary>
            Note tag. A tag used by manufacturers of EXIF writers to record information. The contents are up to the manufacturer.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ExifMaxAperture">
            <summary>
            Smallest F number of the lens. The unit is the APEX value. Ordinarily it is given in the range of 00.00 to 99.99, but it is not limited to this range.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ExifMeteringMode">
            <summary>
            Metering mode.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ExifOECF">
            <summary>
            Optoelectronic conversion function (OECF) specified in ISO 14524. The OECF is the relationship between the camera optical input and the image values.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ExifPixXDim">
            <summary>
            Information specific to compressed data. When a compressed file is recorded, the valid width of the meaningful image must be recorded in this tag, whether or not there is padding data or a restart marker. This tag should not exist in an uncompressed file.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ExifPixYDim">
            <summary>
            Information specific to compressed data. When a compressed file is recorded, the valid height of the meaningful image must be recorded in this tag whether or not there is padding data or a restart marker. This tag should not exist in an uncompressed file. Because data padding is unnecessary in the vertical direction, the number of lines recorded in this valid image height tag will be the same as that recorded in the SOF.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ExifRelatedWav">
            <summary>
            The name of an audio file related to the image data. The only relational information recorded is the EXIF audio file name and extension (an ASCII string that consists of 8 characters plus a period (.), plus 3 characters). The path is not recorded. When you use this tag, audio files must be recorded in conformance with the EXIF audio format. Writers can also store audio data within APP2 as FlashPix extension stream data.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ExifSceneType">
            <summary>
            The type of scene. If a DSC recorded the image, the value of this tag must be set to 1, indicating that the image was directly photographed.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ExifSensingMethod">
            <summary>
            Image sensor type on the camera or input device.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ExifShutterSpeed">
            <summary>
            Shutter speed. The unit is the Additive System of Photographic Exposure (APEX) value.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ExifSpatialFR">
            <summary>
            Camera or input device spatial frequency table and SFR values in the image width, image height, and diagonal direction, as specified in ISO 12233.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ExifSpectralSense">
            <summary>
            Null-terminated character string that specifies the spectral sensitivity of each channel of the camera used. The string is compatible with the standard developed by the ASTM Technical Committee.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ExifSubjectDist">
            <summary>
            Distance to the subject, measured in meters.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ExifSubjectLoc">
            <summary>
            Location of the main subject in the scene. The value of this tag represents the pixel at the center 
            of the main subject relative to the left edge. The first value indicates the column number, and 
            the second value indicates the row number.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ExifUserComment">
            <summary>
            Comment tag. A tag used by EXIF users to write keywords or comments about the image besides those 
            in <see cref="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ImageDescription"/> and without the character-code limitations of 
            the <see cref="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ImageDescription"/> tag.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ExifVer">
            <summary>
            Version of the EXIF standard supported. Nonexistence of this field is taken to mean non-conformance to the 
            standard. Conformance to the standard is indicated by recording 0210 as a 4-byte ASCII string. 
            Because the type is <see cref="F:ImageProcessor.Imaging.MetaData.ExifPropertyTagType.Undefined"/>, there is no NULL terminator.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ExtraSamples">
            <summary>
            Number of extra color components. For example, one extra component might hold an alpha value.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.FillOrder">
            <summary>
            Logical order of bits in a byte.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.FrameDelay">
            <summary>
            Time delay, in hundredths of a second, between two frames in an animated GIF image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.FreeByteCounts">
            <summary>
            For each string of contiguous unused bytes, the number of bytes in that string.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.FreeOffset">
            <summary>
            For each string of contiguous unused bytes, the byte offset of that string.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.Gamma">
            <summary>
            Gamma value attached to the image. The gamma value is stored as a rational number (pair of long) with a numerator of 100000. For example, a gamma value of 2.2 is stored as the pair (100000, 45455).
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.GlobalPalette">
            <summary>
            Color palette for an indexed bitmap in a GIF image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.GpsAltitude">
            <summary>
            Altitude, in meters, based on the reference altitude specified by <see cref="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.GpsAltitudeRef"/>.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.GpsAltitudeRef">
            <summary>
            Reference altitude, in meters.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.GpsDestBear">
            <summary>
            Bearing to the destination point. The range of values is from 0.00 to 359.99.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.GpsDestBearRef">
            <summary>
            Null-terminated character string that specifies the reference used for giving the bearing to the destination point. T specifies true direction, and M specifies magnetic direction.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.GpsDestDist">
            <summary>
            Distance to the destination point.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.GpsDestDistRef">
            <summary>
            Null-terminated character string that specifies the unit used to express the distance to the destination point. 
            K, M, and N represent kilometers, miles, and knots respectively.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.GpsDestLat">
            <summary>
            Latitude of the destination point. The latitude is expressed as three rational values giving the degrees, 
            minutes, and seconds respectively. When degrees, minutes, and seconds are expressed, the format is 
            dd/1, mm/1, ss/1. When degrees and minutes are used and, for example, fractions of minutes are given up to 
            two decimal places, the format is dd/1, mmmm/100, 0/1.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.GpsDestLatRef">
            <summary>
            Null-terminated character string that specifies whether the latitude of the destination point is north or south 
            latitude. N specifies north latitude, and S specifies south latitude.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.GpsDestLong">
            <summary>
            Longitude of the destination point. The longitude is expressed as three rational values giving the degrees, minutes, and seconds respectively. When degrees, minutes, and seconds are expressed, the format is ddd/1, mm/1, ss/1. When degrees and minutes are used and, for example, fractions of minutes are given up to two decimal places, the format is ddd/1, mmmm/100, 0/1.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.GpsDestLongRef">
            <summary>
            Null-terminated character string that specifies whether the longitude of the destination point is east or west longitude. E specifies east longitude, and W specifies west longitude.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.GpsGpsDop">
            <summary>
            GPS DOP (data degree of precision). An HDOP value is written during 2-D measurement, and a PDOP value is written during 3-D measurement.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.GpsGpsMeasureMode">
            <summary>
            Null-terminated character string that specifies the GPS measurement mode. 2 specifies 2-D measurement, and 3 specifies 3-D measurement.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.GpsGpsSatellites">
            <summary>
            Null-terminated character string that specifies the GPS satellites used for measurements. This tag can be used to specify the ID number, angle of elevation, azimuth, SNR, and other information about each satellite. The format is not specified. If the GPS receiver is incapable of taking measurements, the value of the tag must be set to NULL.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.GpsGpsStatus">
            <summary>
            Null-terminated character string that specifies the status of the GPS receiver when the image is recorded. A means measurement is in progress, and V means the measurement is Interoperability.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.GpsGpsTime">
            <summary>
            Time as coordinated universal time (UTC). The value is expressed as three rational numbers that give the hour, minute, and second.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.GpsIFD">
            <summary>
            Offset to a block of GPS property items. Property items whose tags have the prefix Gps are stored in the GPS block. 
            The GPS property items are defined in the EXIF specification. GDI+ uses this tag to locate GPS information, 
            but GDI+ does not expose this tag for public use.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.GpsImgDir">
            <summary>
            Direction of the image when it was captured. The range of values is from 0.00 to 359.99.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.GpsImgDirRef">
            <summary>
            Null-terminated character string that specifies the reference for the direction of the image when it is captured. T specifies true direction, and M specifies magnetic direction.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.GpsLatitude">
            <summary>
            Latitude. Latitude is expressed as three rational values giving the degrees, minutes, and seconds respectively. When degrees, minutes, and seconds are expressed, the format is dd/1, mm/1, ss/1. When degrees and minutes are used and, for example, fractions of minutes are given up to two decimal places, the format is dd/1, mmmm/100, 0/1.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.GpsLatitudeRef">
            <summary>
            Null-terminated character string that specifies whether the longitude is east or west longitude. 
            E specifies east longitude, and W specifies west longitude.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.GpsLongitude">
            <summary>
            Longitude. Longitude is expressed as three rational values giving the degrees, minutes, and seconds 
            respectively. When degrees, minutes and seconds are expressed, the format is ddd/1, mm/1, ss/1. 
            When degrees and minutes are used and, for example, fractions of minutes are given up to two 
            decimal places, the format is ddd/1, mmmm/100, 0/1.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.GpsLongitudeRef">
            <summary>
            Null-terminated character string that specifies whether the longitude is east or west longitude. 
            E specifies east longitude, and W specifies west longitude.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.GpsMapDatum">
            <summary>
            Null-terminated character string that specifies geodetic survey data used by the GPS receiver. 
            If the survey data is restricted to Japan, the value of this tag is TOKYO or WGS-84.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.GpsSpeed">
            <summary>
            Speed of the GPS receiver movement.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.GpsSpeedRef">
            <summary>
            Null-terminated character string that specifies the unit used to express the GPS receiver speed of movement. 
            K, M, and N represent kilometers per hour, miles per hour, and knots respectively.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.GpsTrack">
            <summary>
            Direction of GPS receiver movement. The range of values is from 0.00 to 359.99.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.GpsTrackRef">
            <summary>
            Null-terminated character string that specifies the reference for giving the direction of 
            GPS receiver movement. T specifies true direction, and M specifies magnetic direction.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.GpsVer">
            <summary>
            Version of the Global Positioning Systems (GPS) IFD, given as 2.0.0.0. This tag is mandatory when 
            the <see cref="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.GpsIFD"/> tag is present. When the version is 2.0.0.0, the tag value is 0x02000000.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.GrayResponseCurve">
            <summary>
            For each possible pixel value in a grayscale image, the optical density of that pixel value.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.GrayResponseUnit">
            <summary>
            Precision of the number specified by <see cref="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.GrayResponseCurve"/>. 1 specifies tenths, 
            2 specifies hundredths, 3 specifies thousandths, and so on.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.GridSize">
            <summary>
            Block of information about grids and guides.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.HalftoneDegree">
            <summary>
            Angle for screen.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.HalftoneHints">
            <summary>
            Information used by the halftone function.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.HalftoneLPI">
            <summary>
            Ink's screen frequency, in lines per inch.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.HalftoneLPIUnit">
            <summary>
            Units for the screen frequency.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.HalftoneMisc">
            <summary>
            Miscellaneous halftone information.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.HalftoneScreen">
            <summary>
            Boolean value that specifies whether to use the printer's default screens.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.HalftoneShape">
            <summary>
            Shape of the halftone dots.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.HostComputer">
            <summary>
            Null-terminated character string that specifies the computer and/or operating system used to create the image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ICCProfile">
            <summary>
            ICC profile embedded in the image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ICCProfileDescriptor">
            <summary>
            Null-terminated character string that identifies an ICC profile.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ImageDescription">
            <summary>
            Null-terminated character string that specifies the title of the image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ImageHeight">
            <summary>
            Number of pixel rows.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ImageTitle">
            <summary>
            Null-terminated character string that specifies the title of the image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ImageWidth">
            <summary>
            Number of pixels per row.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.IndexBackground">
            <summary>
            Index of the background color in the palette of a GIF image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.IndexTransparent">
            <summary>
            Index of the transparent color in the palette of a GIF image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.InkNames">
            <summary>
            Sequence of concatenated, null-terminated, character strings that specify the names of the 
            inks used in a separated image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.InkSet">
            <summary>
            Set of inks used in a separated image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.JPEGACTables">
            <summary>
            For each color component, the offset to the AC Huffman table for that component. 
            See also <see cref="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.SamplesPerPixel"/>.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.JPEGDCTables">
            <summary>
            For each color component, the offset to the DC Huffman table (or lossless Huffman table) for that 
            component. See also <see cref="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.SamplesPerPixel"/>.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.JPEGInterFormat">
            <summary>
            Offset to the start of a JPEG bitstream.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.JPEGInterLength">
            <summary>
            Length, in bytes, of the JPEG bitstream.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.JPEGLosslessPredictors">
            <summary>
            For each color component, a lossless predictor-selection value for that component. 
            See also <see cref="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.SamplesPerPixel"/>.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.JPEGPointTransforms">
            <summary>
            For each color component, a point transformation value for that component. 
            See also <see cref="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.SamplesPerPixel"/>.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.JPEGProc">
            <summary>
            JPEG compression process.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.JPEGQTables">
            <summary>
            For each color component, the offset to the quantization table for that 
            component. See also <see cref="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.SamplesPerPixel"/>.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.JPEGQuality">
            <summary>
            Private tag used by the Adobe Photoshop format. Not for public use.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.JPEGRestartInterval">
            <summary>
            Length of the restart interval.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.LoopCount">
            <summary>
            For an animated GIF image, the number of times to display the animation. 
            A value of 0 specifies that the animation should be displayed infinitely.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.LuminanceTable">
            <summary>
            Luminance table. The luminance table and the chrominance table are used to control JPEG quality. 
            A valid luminance or chrominance table has 64 entries of type <see cref="F:ImageProcessor.Imaging.MetaData.ExifPropertyTagType.UShort"/>. 
            If an image has either a luminance table or a chrominance table, then it must have both tables.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.MaxSampleValue">
            <summary>
            For each color component, the maximum value assigned to that component. 
            See also <see cref="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.SamplesPerPixel"/>.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.MinSampleValue">
            <summary>
            For each color component, the minimum value assigned to that component. 
            See also <see cref="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.SamplesPerPixel"/>.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.NewSubfileType">
            <summary>
            Type of data in a subfile.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.NumberOfInks">
            <summary>
            The number of inks.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.Orientation">
            <summary>
            Image orientation viewed in terms of rows and columns.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.PageName">
            <summary>
            Null-terminated character string that specifies the name of the page from which the image was scanned.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.PageNumber">
            <summary>
            Page number of the page from which the image was scanned.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.PaletteHistogram">
            <summary>
            The palette histogram.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.PhotometricInterp">
            <summary>
            How pixel data will be interpreted.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.PixelPerUnitX">
            <summary>
            Pixels per unit in the x direction.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.PixelPerUnitY">
            <summary>
            Pixels per unit in the y direction.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.PixelUnit">
            <summary>
            Unit for <see cref="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.PixelPerUnitX"/> and <see cref="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.PixelPerUnitY"/>.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.PlanarConfig">
            <summary>
            Whether pixel components are recorded in chunky or planar format.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.Predictor">
            <summary>
            TType of prediction scheme that was applied to the image data before the encoding scheme was applied.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.PrimaryChromaticities">
            <summary>
            For each of the three primary colors in the image, the chromaticity of that color.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.PrintFlags">
            <summary>
            Sequence of one-byte Boolean values that specify printing options.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.PrintFlagsBleedWidth">
            <summary>
            The print flags bleed width.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.PrintFlagsBleedWidthScale">
            <summary>
            The print flags bleed width scale.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.PrintFlagsCrop">
            <summary>
            The print flags crop marks.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.PrintFlagsVersion">
            <summary>
            The print flags version.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.REFBlackWhite">
            <summary>
            Reference black point value and reference white point value.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ResolutionUnit">
            <summary>
            Unit of measure for the horizontal resolution and the vertical resolution.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ResolutionXLengthUnit">
            <summary>
            Units in which to display the image width.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ResolutionXUnit">
            <summary>
            Units in which to display horizontal resolution.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ResolutionYLengthUnit">
            <summary>
            Units in which to display the image height.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ResolutionYUnit">
            <summary>
            Units in which to display vertical resolution.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.RowsPerStrip">
            <summary>
            Number of rows per strip. See also <see cref="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.StripBytesCount"/> and <see cref="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.StripOffsets"/>.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.SampleFormat">
            <summary>
            For each color component, the numerical format (unsigned, signed, floating point) of that component. 
            See also <see cref="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.SamplesPerPixel"/>.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.SamplesPerPixel">
            <summary>
            Number of color components per pixel.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.SMaxSampleValue">
            <summary>
            For each color component, the maximum value of that component. See also <see cref="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.SamplesPerPixel"/>.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.SMinSampleValue">
            <summary>
            For each color component, the minimum value of that component. See also <see cref="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.SamplesPerPixel"/>.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.SoftwareUsed">
            <summary>
            Null-terminated character string that specifies the name and version of the software or 
            firmware of the device used to generate the image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.SRGBRenderingIntent">
            <summary>
            How the image should be displayed as defined by the International Color Consortium (ICC). If a GDI+ Image object
            is constructed with the useEmbeddedColorManagement parameter set to TRUE, then GDI+ renders the image 
            according to the specified rendering intent. The intent can be set to perceptual, relative colorimetric, 
            saturation, or absolute colorimetric.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.StripBytesCount">
            <summary>
            For each strip, the total number of bytes in that strip.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.StripOffsets">
            <summary>
            For each strip, the byte offset of that strip. See also <see cref="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.RowsPerStrip"/> 
            and <see cref="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.StripBytesCount"/>.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.SubfileType">
            <summary>
            The type of data in a subfile.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.T4Option">
            <summary>
            Set of flags that relate to T4 encoding.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.T6Option">
            <summary>
            Set of flags that relate to T6 encoding.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.TargetPrinter">
            <summary>
            Null-terminated character string that describes the intended printing environment.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ThreshHolding">
            <summary>
            Technique used to convert from gray pixels to black and white pixels.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ThumbnailArtist">
            <summary>
            Null-terminated character string that specifies the name of the person who created the thumbnail image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ThumbnailBitsPerSample">
            <summary>
            Number of bits per color component in the thumbnail image. See also <see cref="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ThumbnailSamplesPerPixel"/>.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ThumbnailColorDepth">
            <summary>
            Bits per pixel (BPP) for the thumbnail image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ThumbnailCompressedSize">
            <summary>
            Compressed size, in bytes, of the thumbnail image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ThumbnailCompression">
            <summary>
            Compression scheme used for thumbnail image data.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ThumbnailCopyRight">
            <summary>
            Null-terminated character string that contains copyright information for the thumbnail image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ThumbnailData">
            <summary>
            Raw thumbnail bits in JPEG or RGB format. Depends on <see cref="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ThumbnailFormat"/>.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ThumbnailDateTime">
            <summary>
            Date and time the thumbnail image was created. See also <see cref="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.DateTime"/>.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ThumbnailEquipMake">
            <summary>
            Null-terminated character string that specifies the manufacturer of the equipment used to 
            record the thumbnail image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ThumbnailEquipModel">
            <summary>
            Null-terminated character string that specifies the model name or model number of the 
            equipment used to record the thumbnail image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ThumbnailFormat">
            <summary>
            Format of the thumbnail image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ThumbnailHeight">
            <summary>
            Height, in pixels, of the thumbnail image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ThumbnailImageDescription">
            <summary>
            Null-terminated character string that specifies the title of the image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ThumbnailImageHeight">
            <summary>
            Number of pixel rows in the thumbnail image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ThumbnailImageWidth">
            <summary>
            Number of pixels per row in the thumbnail image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ThumbnailOrientation">
            <summary>
            Thumbnail image orientation in terms of rows and columns. See also <see cref="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.Orientation"/>.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ThumbnailPhotometricInterp">
            <summary>
            How thumbnail pixel data will be interpreted.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ThumbnailPlanarConfig">
            <summary>
            Whether pixel components in the thumbnail image are recorded in chunky or planar format. 
            See also <see cref="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.PlanarConfig"/>.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ThumbnailPlanes">
            <summary>
            Number of color planes for the thumbnail image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ThumbnailPrimaryChromaticities">
            <summary>
            For each of the three primary colors in the thumbnail image, the chromaticity 
            of that color. See also <see cref="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.PrimaryChromaticities"/>.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ThumbnailRawBytes">
            <summary>
            Byte offset between rows of pixel data.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ThumbnailRefBlackWhite">
            <summary>
            Reference black point value and reference white point value 
            for the thumbnail image. See also <see cref="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.REFBlackWhite"/>.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ThumbnailResolutionUnit">
            <summary>
            Unit of measure for the horizontal resolution and the vertical resolution of 
            the thumbnail image. See also <see cref="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ResolutionUnit"/>.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ThumbnailResolutionX">
            <summary>
            Thumbnail resolution in the width direction. 
            The resolution unit is given in <see cref="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ThumbnailResolutionUnit"/>.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ThumbnailResolutionY">
            <summary>
            Thumbnail resolution in the height direction. The resolution unit is given 
            in <see cref="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ThumbnailResolutionUnit"/>.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ThumbnailRowsPerStrip">
            <summary>
            Number of rows per strip in the thumbnail image. See also <see cref="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ThumbnailStripBytesCount"/> 
            and <see cref="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ThumbnailStripOffsets"/>.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ThumbnailSamplesPerPixel">
            <summary>
            Number of color components per pixel in the thumbnail image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ThumbnailSize">
            <summary>
            Total size, in bytes, of the thumbnail image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ThumbnailSoftwareUsed">
            <summary>
            Null-terminated character string that specifies the name and version of the software 
            or firmware of the device used to generate the thumbnail image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ThumbnailStripBytesCount">
            <summary>
            For each thumbnail image strip, the total number of bytes in that strip.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ThumbnailStripOffsets">
            <summary>
            For each strip in the thumbnail image, the byte offset of that strip. See also <see cref="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ThumbnailRowsPerStrip"/> 
            and <see cref="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ThumbnailStripBytesCount"/>.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ThumbnailTransferFunction">
            <summary>
            Tables that specify transfer functions for the thumbnail image. See also <see cref="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.TransferFunction"/>.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ThumbnailWhitePoint">
            <summary>
            Chromaticity of the white point of the thumbnail image. See also <see cref="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.WhitePoint"/>.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ThumbnailWidth">
            <summary>
            Width, in pixels, of the thumbnail image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ThumbnailYCbCrCoefficients">
            <summary>
            Coefficients for transformation from RGB to YCbCr data for the thumbnail image. 
            See also <see cref="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.YCbCrCoefficients"/>.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ThumbnailYCbCrPositioning">
            <summary>
            Position of chrominance components in relation to the luminance component for 
            the thumbnail image. See also <see cref="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.YCbCrPositioning"/>.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ThumbnailYCbCrSubsampling">
            <summary>
            Sampling ratio of chrominance components in relation to the luminance component for 
            the thumbnail image. See also <see cref="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.YCbCrSubsampling"/>.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.TileByteCounts">
            <summary>
            For each tile, the number of bytes in that tile.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.TileLength">
            <summary>
            Number of pixel rows in each tile.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.TileOffset">
            <summary>
            For each tile, the byte offset of that tile.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.TileWidth">
            <summary>
            Number of pixel columns in each tile.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.TransferFunction">
            <summary>
            Tables that specify transfer functions for the image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.TransferRange">
            <summary>
            Table of values that extends the range of the transfer function.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.WhitePoint">
            <summary>
            Chromaticity of the white point of the image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.XPosition">
            <summary>
            Offset from the left side of the page to the left side of the image. 
            The unit of measure is specified by <see cref="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ResolutionUnit"/>.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.XResolution">
            <summary>
            Number of pixels per unit in the image width (x) direction. 
            The unit is specified by <see cref="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ResolutionUnit"/>.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.YCbCrCoefficients">
            <summary>
            Coefficients for transformation from RGB to YCbCr image data.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.YCbCrPositioning">
            <summary>
            Position of chrominance components in relation to the luminance component.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.YCbCrSubsampling">
            <summary>
            Sampling ratio of chrominance components in relation to the luminance component.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.YPosition">
            <summary>
            Offset from the top of the page to the top of the image. The unit of measure 
            is specified by <see cref="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ResolutionUnit"/>.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.YResolution">
            <summary>
            Number of pixels per unit in the image height (y) direction. The unit is specified 
            by <see cref="F:ImageProcessor.Imaging.MetaData.ExifPropertyTag.ResolutionUnit"/>.
            </summary>
        </member>
        <member name="T:ImageProcessor.Imaging.Convolution">
            <summary>
            Provides methods for applying blurring and sharpening effects to an image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Convolution.standardDeviation">
            <summary>
            The standard deviation 'sigma' value for calculating Gaussian curves.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.Convolution.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Imaging.Convolution"/> class.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.Convolution.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Imaging.Convolution"/> class.
            </summary>
            <param name="standardDeviation">
            The standard deviation.
            </param>
        </member>
        <member name="P:ImageProcessor.Imaging.Convolution.Threshold">
            <summary>
            Gets or sets the threshold to add to the weighted sum.
            <remarks>
            <para>
            Specifies the threshold value, which is added to each weighted
            sum of pixels.
            </para>
            </remarks>
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Convolution.Divider">
            <summary>
            Gets or sets the value used to divide convolution; the weighted sum
            of pixels is divided by this value.
            <remarks>
            <para>If not set this value will be automatically calculated.</para>
            </remarks>
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Convolution.UseDynamicDividerForEdges">
            <summary>
            Gets or sets a value indicating whether to use the dynamic divider for edges.
            <remarks>
            <para>
            If it is set to <see langword="false" />, then the same divider, specified by <see cref="P:ImageProcessor.Imaging.Convolution.Divider" />
            property or calculated automatically, will be applied both for non-edge regions
            and for edge regions. If the value is set to <see langword="true" />, then the dynamically
            calculated divider will be used for edge regions. This is calculated from the sum of the kernel
            elements used at that region, which are taken into account for particular processed pixel
            (elements, which are not outside image).
            </para>
            <para>Default value is set to <see langword="true" />.</para>
            </remarks>
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.Convolution.CreateGaussianKernel(System.Int32)">
            <summary>
            Create a 1 dimensional Gaussian kernel using the Gaussian G(x) function
            </summary>
            <param name="kernelSize">Kernel Size</param>
            <returns>A Gaussian Kernel with the given size and deviation.</returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Convolution.CreateGaussianKernel2D(System.Int32)">
            <summary>
            Create a 2 dimensional Gaussian kernel using the Gaussian G(x y) function
            </summary>
            <param name="kernelSize">Kernel Size</param>
            <returns>A Gaussian Kernel with the given size and deviation.</returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Convolution.CreateGuassianBlurFilter(System.Int32)">
            <summary>
            Create a 2 dimensional Gaussian kernel using the Gaussian G(x y) function for 
            blurring images.
            </summary>
            <param name="kernelSize">Kernel Size</param>
            <returns>A Gaussian Kernel with the given size.</returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Convolution.CreateGuassianSharpenFilter(System.Int32)">
            <summary>
            Create a 2 dimensional Gaussian kernel using the Gaussian G(x y) function for 
            sharpening images.
            </summary>
            <param name="kernelSize">Kernel Size</param>
            <returns>A Gaussian Kernel with the given size.</returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Convolution.ProcessKernel(System.Drawing.Bitmap,System.Double[0:,0:],System.Boolean)">
            <summary>
            Processes the given kernel to produce an array of pixels representing a bitmap.
            </summary>
            <param name="source">The image to process.</param>
            <param name="kernel">The Gaussian kernel to use when performing the method</param>
            <param name="fixGamma">Whether to process the image using the linear color space.</param>
            <returns>A processed bitmap.</returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Convolution.ProcessKernel(System.Drawing.Color[0:,0:],System.Double[0:,0:],System.Boolean)">
            <summary>
            Processes the given kernel to produce an array of pixels representing a bitmap.
            </summary>
            <param name="source">The image to process.</param>
            <param name="kernel">The Gaussian kernel to use when performing the method</param>
            <param name="fixGamma">Whether to process the image using the linear color space.</param>
            <returns>A processed bitmap.</returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Convolution.Gaussian(System.Double)">
            <summary>
            Implementation of 1D Gaussian G(x) function
            </summary>
            <param name="x">The x provided to G(x)</param>
            <returns>The Gaussian G(x)</returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Convolution.Gaussian2D(System.Double,System.Double)">
            <summary>
            Implementation of 2D Gaussian G(x) function
            </summary>
            <param name="x">The x provided to G(x y)</param>
            <param name="y">The y provided to G(x y)</param>
            <returns>The Gaussian G(x y)</returns>
        </member>
        <member name="T:ImageProcessor.Imaging.CropLayer">
            <summary>
            Encapsulates the properties required to crop an image.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.CropLayer.#ctor(System.Single,System.Single,System.Single,System.Single,ImageProcessor.Imaging.CropMode)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Imaging.CropLayer"/> class.
            </summary>
            <param name="left">The left coordinate of the crop layer.</param>
            <param name="top">The top coordinate of the crop layer.</param>
            <param name="right">The right coordinate of the crop layer.</param>
            <param name="bottom">The bottom coordinate of the crop layer.</param>
            <param name="cropMode">The <see cref="P:ImageProcessor.Imaging.CropLayer.CropMode"/>.</param>
            <remarks>
            If the <see cref="P:ImageProcessor.Imaging.CropLayer.CropMode"/> is set to <value>CropMode.Percentage</value> then the four coordinates
            become percentages to reduce from each edge.
            </remarks>
        </member>
        <member name="P:ImageProcessor.Imaging.CropLayer.Left">
            <summary>
            Gets or sets the left coordinate of the crop layer.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.CropLayer.Top">
            <summary>
            Gets or sets the top coordinate of the crop layer.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.CropLayer.Right">
            <summary>
            Gets or sets the right coordinate of the crop layer.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.CropLayer.Bottom">
            <summary>
            Gets or sets the bottom coordinate of the crop layer.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.CropLayer.CropMode">
            <summary>
            Gets or sets the <see cref="P:ImageProcessor.Imaging.CropLayer.CropMode"/>.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.CropLayer.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is 
            equal to this instance.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object" /> to compare with this instance.
            </param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to 
              this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.CropLayer.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:ImageProcessor.Imaging.CropMode">
            <summary>
            Enumerated cop modes to apply to cropped images.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.CropMode.Pixels">
            <summary>
            Crops the image using the standard rectangle model of x, y, width, height.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.CropMode.Percentage">
            <summary>
            Crops the image using percentages model left, top, right, bottom.
            </summary>
        </member>
        <member name="T:ImageProcessor.Imaging.GaussianLayer">
            <summary>
            A Gaussian layer for applying sharpening and blurring methods to an image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.GaussianLayer.size">
            <summary>
            The size.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.GaussianLayer.sigma">
            <summary>
            The sigma.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.GaussianLayer.threshold">
            <summary>
            The threshold.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.GaussianLayer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Imaging.GaussianLayer"/> class.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.GaussianLayer.#ctor(System.Int32,System.Double,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Imaging.GaussianLayer"/> class.
            </summary>
            <param name="size">
            The size to set the Gaussian kernel to.
            </param>
            <param name="sigma">
            The Sigma value (standard deviation) for Gaussian function used to calculate the kernel.
            </param>
            <param name="threshold">
            The threshold value, which is added to each weighted sum of pixels.
            </param>
        </member>
        <member name="P:ImageProcessor.Imaging.GaussianLayer.Size">
            <summary>
            Gets or sets the size of the Gaussian kernel.
            <remarks>
            <para>
            If set to a value below 0, the property will be set to 0.
            </para>
            </remarks>
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.GaussianLayer.Sigma">
            <summary>
            Gets or sets the sigma value (standard deviation) for Gaussian function used to calculate the kernel.
            <remarks>
            <para>
            If set to a value below 0, the property will be set to 0.
            </para>
            </remarks>
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.GaussianLayer.Threshold">
            <summary>
            Gets or sets the threshold value, which is added to each weighted sum of pixels.
            <remarks>
            <para>
            If set to a value below 0, the property will be set to 0.
            </para>
            </remarks>
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.GaussianLayer.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the specified object is an 
            <see cref="T:ImageProcessor.Imaging.GaussianLayer"/> object that is equivalent to 
            this <see cref="T:ImageProcessor.Imaging.GaussianLayer"/> object.
            </summary>
            <param name="obj">
            The object to test.
            </param>
            <returns>
            True if the given object  is an <see cref="T:ImageProcessor.Imaging.GaussianLayer"/> object that is equivalent to 
            this <see cref="T:ImageProcessor.Imaging.GaussianLayer"/> object; otherwise, false.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.GaussianLayer.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:ImageProcessor.Imaging.Quantizers.IQuantizer">
            <summary>
            The Quantizer interface for allowing quantization of images.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.Quantizers.IQuantizer.Quantize(System.Drawing.Image)">
            <summary>
            Quantize an image and return the resulting output bitmap.
            </summary>
            <param name="source">
            The image to quantize.
            </param>
            <returns>
            A quantized version of the image.
            </returns>
        </member>
        <member name="T:ImageProcessor.Imaging.Quantizers.OctreeQuantizer">
            <summary>
            Encapsulates methods to calculate the colour palette if an image using an Octree pattern.
            <see href="http://msdn.microsoft.com/en-us/library/aa479306.aspx"/>
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Quantizers.OctreeQuantizer.maxColors">
            <summary>
            Maximum allowed color depth
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Quantizers.OctreeQuantizer.maxColorBits">
            <summary>
            Maximum allowed color bit depth
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Quantizers.OctreeQuantizer.octree">
            <summary>
            Stores the tree
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Quantizers.OctreeQuantizer.threshold">
            <summary>
            The transparency threshold.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.Quantizers.OctreeQuantizer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Imaging.Quantizers.OctreeQuantizer"/> class.
            </summary>
            <remarks>
            The Octree quantizer is a two pass algorithm. The initial pass sets up the Octree,
            the second pass quantizes a color based on the nodes in the tree.
            <para>
            Defaults to return a maximum of 255 colors plus transparency with 8 significant bits.
            </para>
            </remarks>
        </member>
        <member name="M:ImageProcessor.Imaging.Quantizers.OctreeQuantizer.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Imaging.Quantizers.OctreeQuantizer"/> class.
            </summary>
            <remarks>
            The Octree quantizer is a two pass algorithm. The initial pass sets up the Octree,
            the second pass quantizes a color based on the nodes in the tree
            </remarks>
            <param name="maxColors">
            The maximum number of colors to return
            </param>
            <param name="maxColorBits">
            The number of significant bits
            </param>
        </member>
        <member name="P:ImageProcessor.Imaging.Quantizers.OctreeQuantizer.Threshold">
            <summary>
            Gets or sets the transparency threshold (0 - 255)
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.Quantizers.OctreeQuantizer.FirstPass(System.Drawing.Imaging.BitmapData,System.Int32,System.Int32)">
            <summary>
            Execute the first pass through the pixels in the image
            </summary>
            <param name="sourceData">The source data</param>
            <param name="width">The width in pixels of the image</param>
            <param name="height">The height in pixels of the image</param>
        </member>
        <member name="M:ImageProcessor.Imaging.Quantizers.OctreeQuantizer.InitialQuantizePixel(ImageProcessor.Imaging.Colors.Color32*)">
            <summary>
            Process the pixel in the first pass of the algorithm
            </summary>
            <param name="pixel">
            The pixel to quantize
            </param>
            <remarks>
            This function need only be overridden if your quantize algorithm needs two passes,
            such as an Octree quantizer.
            </remarks>
        </member>
        <member name="M:ImageProcessor.Imaging.Quantizers.OctreeQuantizer.QuantizePixel(ImageProcessor.Imaging.Colors.Color32*)">
            <summary>
            Override this to process the pixel in the second pass of the algorithm
            </summary>
            <param name="pixel">
            The pixel to quantize
            </param>
            <returns>
            The quantized value
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Quantizers.OctreeQuantizer.GetPalette(System.Drawing.Imaging.ColorPalette)">
            <summary>
            Retrieve the palette for the quantized image
            </summary>
            <param name="original">
            Any old palette, this is overwritten
            </param>
            <returns>
            The new color palette
            </returns>
        </member>
        <member name="T:ImageProcessor.Imaging.Quantizers.OctreeQuantizer.Octree">
            <summary>
            Class which does the actual quantization
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Quantizers.OctreeQuantizer.Octree.Mask">
            <summary>
            Mask used when getting the appropriate pixels for a given node
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Quantizers.OctreeQuantizer.Octree.root">
            <summary>
            The root of the Octree
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Quantizers.OctreeQuantizer.Octree.reducibleNodes">
            <summary>
            Array of reducible nodes
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Quantizers.OctreeQuantizer.Octree.maxColorBits">
            <summary>
            Maximum number of significant bits in the image
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Quantizers.OctreeQuantizer.Octree.leafCount">
            <summary>
            Number of leaves in the tree
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Quantizers.OctreeQuantizer.Octree.previousNode">
            <summary>
            Store the last node quantized
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Quantizers.OctreeQuantizer.Octree.previousColor">
            <summary>
            Cache the previous color quantized
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.Quantizers.OctreeQuantizer.Octree.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Imaging.Quantizers.OctreeQuantizer.Octree"/> class.
            </summary>
            <param name="maxColorBits">
            The maximum number of significant bits in the image
            </param>
        </member>
        <member name="P:ImageProcessor.Imaging.Quantizers.OctreeQuantizer.Octree.Leaves">
            <summary>
            Gets or sets the number of leaves in the tree
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Quantizers.OctreeQuantizer.Octree.ReducibleNodes">
            <summary>
            Gets the array of reducible nodes
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.Quantizers.OctreeQuantizer.Octree.AddColor(ImageProcessor.Imaging.Colors.Color32*)">
            <summary>
            Add a given color value to the Octree
            </summary>
            <param name="pixel">
            The <see cref="T:ImageProcessor.Imaging.Colors.Color32"/>containing color information to add.
            </param>
        </member>
        <member name="M:ImageProcessor.Imaging.Quantizers.OctreeQuantizer.Octree.Palletize(System.Int32)">
            <summary>
            Convert the nodes in the Octree to a palette with a maximum of colorCount colors
            </summary>
            <param name="colorCount">
            The maximum number of colors
            </param>
            <returns>
            An <see cref="T:System.Collections.Generic.List`1"/> with the palletized colors
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Quantizers.OctreeQuantizer.Octree.GetPaletteIndex(ImageProcessor.Imaging.Colors.Color32*)">
            <summary>
            Get the palette index for the passed color
            </summary>
            <param name="pixel">
            The <see cref="T:ImageProcessor.Imaging.Colors.Color32"/> containing the pixel data.
            </param>
            <returns>
            The index of the given structure.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Quantizers.OctreeQuantizer.Octree.TrackPrevious(ImageProcessor.Imaging.Quantizers.OctreeQuantizer.Octree.OctreeNode)">
            <summary>
            Keep track of the previous node that was quantized
            </summary>
            <param name="node">
            The node last quantized
            </param>
        </member>
        <member name="M:ImageProcessor.Imaging.Quantizers.OctreeQuantizer.Octree.Reduce">
            <summary>
            Reduce the depth of the tree
            </summary>
        </member>
        <member name="T:ImageProcessor.Imaging.Quantizers.OctreeQuantizer.Octree.OctreeNode">
            <summary>
            Class which encapsulates each node in the tree
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Quantizers.OctreeQuantizer.Octree.OctreeNode.children">
            <summary>
            Pointers to any child nodes
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Quantizers.OctreeQuantizer.Octree.OctreeNode.leaf">
            <summary>
            Flag indicating that this is a leaf node
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Quantizers.OctreeQuantizer.Octree.OctreeNode.pixelCount">
            <summary>
            Number of pixels in this node
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Quantizers.OctreeQuantizer.Octree.OctreeNode.red">
            <summary>
            Red component
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Quantizers.OctreeQuantizer.Octree.OctreeNode.green">
            <summary>
            Green Component
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Quantizers.OctreeQuantizer.Octree.OctreeNode.blue">
            <summary>
            Blue component
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Quantizers.OctreeQuantizer.Octree.OctreeNode.paletteIndex">
            <summary>
            The index of this node in the palette
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.Quantizers.OctreeQuantizer.Octree.OctreeNode.#ctor(System.Int32,System.Int32,ImageProcessor.Imaging.Quantizers.OctreeQuantizer.Octree)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Imaging.Quantizers.OctreeQuantizer.Octree.OctreeNode"/> class.
            </summary>
            <param name="level">
            The level in the tree = 0 - 7
            </param>
            <param name="colorBits">
            The number of significant color bits in the image
            </param>
            <param name="octree">
            The tree to which this node belongs
            </param>
        </member>
        <member name="P:ImageProcessor.Imaging.Quantizers.OctreeQuantizer.Octree.OctreeNode.NextReducible">
            <summary>
            Gets the next reducible node
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.Quantizers.OctreeQuantizer.Octree.OctreeNode.AddColor(ImageProcessor.Imaging.Colors.Color32*,System.Int32,System.Int32,ImageProcessor.Imaging.Quantizers.OctreeQuantizer.Octree)">
            <summary>
            Add a color into the tree
            </summary>
            <param name="pixel">
            The color
            </param>
            <param name="colorBits">
            The number of significant color bits
            </param>
            <param name="level">
            The level in the tree
            </param>
            <param name="octree">
            The tree to which this node belongs
            </param>
        </member>
        <member name="M:ImageProcessor.Imaging.Quantizers.OctreeQuantizer.Octree.OctreeNode.Reduce">
            <summary>
            Reduce this node by removing all of its children
            </summary>
            <returns>The number of leaves removed</returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Quantizers.OctreeQuantizer.Octree.OctreeNode.ConstructPalette(System.Collections.Generic.List{System.Drawing.Color},System.Int32@)">
            <summary>
            Traverse the tree, building up the color palette
            </summary>
            <param name="palette">
            The palette
            </param>
            <param name="index">
            The current palette index
            </param>
        </member>
        <member name="M:ImageProcessor.Imaging.Quantizers.OctreeQuantizer.Octree.OctreeNode.GetPaletteIndex(ImageProcessor.Imaging.Colors.Color32*,System.Int32)">
            <summary>
            Return the palette index for the passed color
            </summary>
            <param name="pixel">
            The <see cref="T:ImageProcessor.Imaging.Colors.Color32"/> representing the pixel.
            </param>
            <param name="level">
            The level.
            </param>
            <returns>
            The <see cref="T:System.Int32"/> representing the index of the pixel in the palette.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Quantizers.OctreeQuantizer.Octree.OctreeNode.Increment(ImageProcessor.Imaging.Colors.Color32*)">
            <summary>
            Increment the pixel count and add to the color information
            </summary>
            <param name="pixel">
            The pixel to add.
            </param>
        </member>
        <member name="T:ImageProcessor.Imaging.Quantizers.Quantizer">
            <summary>
            Encapsulates methods to calculate the color palette of an image.
            <see href="http://msdn.microsoft.com/en-us/library/aa479306.aspx"/>
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Quantizers.Quantizer.singlePass">
            <summary>
            Flag used to indicate whether a single pass or two passes are needed for quantization.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.Quantizers.Quantizer.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Imaging.Quantizers.Quantizer"/> class.
            </summary>
            <param name="singlePass">
            If true, the quantization only needs to loop through the source pixels once
            </param>
            <remarks>
            If you construct this class with a true value for singlePass, then the code will, when quantizing your image,
            only call the 'QuantizeImage' function. If two passes are required, the code will call 'InitialQuantizeImage'
            and then 'QuantizeImage'.
            </remarks>
        </member>
        <member name="M:ImageProcessor.Imaging.Quantizers.Quantizer.Quantize(System.Drawing.Image)">
            <summary>
            Quantize an image and return the resulting output bitmap.
            </summary>
            <param name="source">
            The image to quantize.
            </param>
            <returns>
            A quantized version of the image.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Quantizers.Quantizer.FirstPass(System.Drawing.Imaging.BitmapData,System.Int32,System.Int32)">
            <summary>
            Execute the first pass through the pixels in the image
            </summary>
            <param name="sourceData">The source data</param>
            <param name="width">The width in pixels of the image</param>
            <param name="height">The height in pixels of the image</param>
        </member>
        <member name="M:ImageProcessor.Imaging.Quantizers.Quantizer.SecondPass(System.Drawing.Imaging.BitmapData,System.Drawing.Bitmap,System.Int32,System.Int32,System.Drawing.Rectangle)">
            <summary>
            Execute a second pass through the bitmap
            </summary>
            <param name="sourceData">
            The source bitmap, locked into memory
            </param>
            <param name="output">
            The output bitmap
            </param>
            <param name="width">
            The width in pixels of the image
            </param>
            <param name="height">
            The height in pixels of the image
            </param>
            <param name="bounds">
            The bounding rectangle
            </param>
        </member>
        <member name="M:ImageProcessor.Imaging.Quantizers.Quantizer.InitialQuantizePixel(ImageProcessor.Imaging.Colors.Color32*)">
            <summary>
            Override this to process the pixel in the first pass of the algorithm
            </summary>
            <param name="pixel">
            The pixel to quantize
            </param>
            <remarks>
            This function need only be overridden if your quantize algorithm needs two passes,
            such as an Octree quantizer.
            </remarks>
        </member>
        <member name="M:ImageProcessor.Imaging.Quantizers.Quantizer.QuantizePixel(ImageProcessor.Imaging.Colors.Color32*)">
            <summary>
            Override this to process the pixel in the second pass of the algorithm
            </summary>
            <param name="pixel">
            The pixel to quantize
            </param>
            <returns>
            The quantized value
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Quantizers.Quantizer.GetPalette(System.Drawing.Imaging.ColorPalette)">
            <summary>
            Retrieve the palette for the quantized image
            </summary>
            <param name="original">
            Any old palette, this is overwritten
            </param>
            <returns>
            The new color palette
            </returns>
        </member>
        <member name="T:ImageProcessor.Imaging.Quantizers.WuQuantizer.Box">
            <summary>
            The box for storing color attributes.
            Adapted from <see href="https://github.com/drewnoakes"/>
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Quantizers.WuQuantizer.Box.AlphaMaximum">
            <summary>
            The alpha maximum.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Quantizers.WuQuantizer.Box.AlphaMinimum">
            <summary>
            The alpha minimum.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Quantizers.WuQuantizer.Box.BlueMaximum">
            <summary>
            The blue maximum.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Quantizers.WuQuantizer.Box.BlueMinimum">
            <summary>
            The blue minimum.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Quantizers.WuQuantizer.Box.GreenMaximum">
            <summary>
            The green maximum.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Quantizers.WuQuantizer.Box.GreenMinimum">
            <summary>
            The green minimum.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Quantizers.WuQuantizer.Box.RedMaximum">
            <summary>
            The red maximum.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Quantizers.WuQuantizer.Box.RedMinimum">
            <summary>
            The red minimum.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Quantizers.WuQuantizer.Box.Size">
            <summary>
            The size.
            </summary>
        </member>
        <member name="T:ImageProcessor.Imaging.Quantizers.WuQuantizer.Histogram">
            <summary>
            The histogram representing the distribution of color data.
            Adapted from <see href="https://github.com/drewnoakes" />
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Quantizers.WuQuantizer.Histogram.Moments">
            <summary>
            The moments.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Quantizers.WuQuantizer.Histogram.SideSize">
            <summary>
            The side size.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.Quantizers.WuQuantizer.Histogram.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Imaging.Quantizers.WuQuantizer.Histogram"/> class.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.Quantizers.WuQuantizer.Histogram.Clear">
            <summary>
            The clear.
            </summary>
        </member>
        <member name="T:ImageProcessor.Imaging.Quantizers.WuQuantizer.ColorMoment">
            <summary>
            The cumulative color moment for holding pixel information.
            Adapted from <see href="https://github.com/drewnoakes" />
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Quantizers.WuQuantizer.ColorMoment.Alpha">
            <summary>
            The alpha component.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Quantizers.WuQuantizer.ColorMoment.Blue">
            <summary>
            The blue component.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Quantizers.WuQuantizer.ColorMoment.Green">
            <summary>
            The green component.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Quantizers.WuQuantizer.ColorMoment.Moment">
            <summary>
            The moment.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Quantizers.WuQuantizer.ColorMoment.Red">
            <summary>
            The red.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Quantizers.WuQuantizer.ColorMoment.Weight">
            <summary>
            The weight.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.Quantizers.WuQuantizer.ColorMoment.op_Addition(ImageProcessor.Imaging.Quantizers.WuQuantizer.ColorMoment,ImageProcessor.Imaging.Quantizers.WuQuantizer.ColorMoment)">
            <summary>
            Adds one <see cref="T:ImageProcessor.Imaging.Quantizers.WuQuantizer.ColorMoment"/> to another.
            </summary>
            <param name="firstAddend">
            The first <see cref="T:ImageProcessor.Imaging.Quantizers.WuQuantizer.ColorMoment"/>.
            </param>
            <param name="secondAddend">
            The second <see cref="T:ImageProcessor.Imaging.Quantizers.WuQuantizer.ColorMoment"/>.
            </param>
            <returns>
            The <see cref="T:ImageProcessor.Imaging.Quantizers.WuQuantizer.ColorMoment"/> representing the sum of the addition.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Quantizers.WuQuantizer.ColorMoment.op_Subtraction(ImageProcessor.Imaging.Quantizers.WuQuantizer.ColorMoment,ImageProcessor.Imaging.Quantizers.WuQuantizer.ColorMoment)">
            <summary>
            Subtracts one <see cref="T:ImageProcessor.Imaging.Quantizers.WuQuantizer.ColorMoment"/> from another.
            </summary>
            <param name="minuend">
            The <see cref="T:ImageProcessor.Imaging.Quantizers.WuQuantizer.ColorMoment"/> from which the other <see cref="T:ImageProcessor.Imaging.Quantizers.WuQuantizer.ColorMoment"/> will be subtracted
            </param>
            <param name="subtrahend">
            The <see cref="T:ImageProcessor.Imaging.Quantizers.WuQuantizer.ColorMoment"/> that is to be subtracted.
            </param>
            <returns>
            The <see cref="T:ImageProcessor.Imaging.Quantizers.WuQuantizer.ColorMoment"/> representing the difference of the subtraction.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Quantizers.WuQuantizer.ColorMoment.op_UnaryNegation(ImageProcessor.Imaging.Quantizers.WuQuantizer.ColorMoment)">
            <summary>
            Negates the given <see cref="T:ImageProcessor.Imaging.Quantizers.WuQuantizer.ColorMoment"/> .
            </summary>
            <param name="moment">
            The <see cref="T:ImageProcessor.Imaging.Quantizers.WuQuantizer.ColorMoment"/> to negate.
            </param>
            <returns>
            The negated result
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Quantizers.WuQuantizer.ColorMoment.Add(ImageProcessor.Imaging.Colors.Color32)">
            <summary>
            Adds a pixel to the current instance.
            </summary>
            <param name="pixel">
            The pixel to add.
            </param>
        </member>
        <member name="M:ImageProcessor.Imaging.Quantizers.WuQuantizer.ColorMoment.AddFast(ImageProcessor.Imaging.Quantizers.WuQuantizer.ColorMoment@)">
            <summary>
            Adds a color moment to the current instance more quickly.
            </summary>
            <param name="moment">
            The <see cref="T:ImageProcessor.Imaging.Quantizers.WuQuantizer.ColorMoment"/> to add.
            </param>
        </member>
        <member name="M:ImageProcessor.Imaging.Quantizers.WuQuantizer.ColorMoment.Amplitude">
            <summary>
            The amplitude.
            </summary>
            <returns>
            The <see cref="T:System.Int64"/> representing the amplitude.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Quantizers.WuQuantizer.ColorMoment.Variance">
            <summary>
            The variance.
            </summary>
            <returns>
            The <see cref="T:System.Single"/> representing the variance.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Quantizers.WuQuantizer.ColorMoment.WeightedDistance">
            <summary>
            The weighted distance.
            </summary>
            <returns>
            The <see cref="T:System.Int64"/>.
            </returns>
        </member>
        <member name="T:ImageProcessor.Imaging.Quantizers.WuQuantizer.PaletteColorHistory">
            <summary>
            The palette color history containing the sum of all pixel data.
            Adapted from <see href="https://github.com/drewnoakes" />
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Quantizers.WuQuantizer.PaletteColorHistory.Alpha">
            <summary>
            The alpha component.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Quantizers.WuQuantizer.PaletteColorHistory.Red">
            <summary>
            The red component.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Quantizers.WuQuantizer.PaletteColorHistory.Green">
            <summary>
            The green component.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Quantizers.WuQuantizer.PaletteColorHistory.Blue">
            <summary>
            The blue component.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Quantizers.WuQuantizer.PaletteColorHistory.Sum">
            <summary>
            The sum of the color components.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.Quantizers.WuQuantizer.PaletteColorHistory.ToNormalizedColor">
            <summary>
            Normalizes the color.
            </summary>
            <returns>
            The normalized <see cref="T:System.Drawing.Color"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Quantizers.WuQuantizer.PaletteColorHistory.AddPixel(ImageProcessor.Imaging.Colors.Color32)">
            <summary>
            Adds a pixel to the color history.
            </summary>
            <param name="pixel">
            The pixel to add.
            </param>
        </member>
        <member name="T:ImageProcessor.Imaging.Quantizers.WuQuantizer.PaletteLookup">
            <summary>
            Stores the indexed color palette of an image for fast access.
            Adapted from <see href="https://github.com/drewnoakes" />
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Quantizers.WuQuantizer.PaletteLookup.lookupNodes">
            <summary>
            The dictionary for caching lookup nodes.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Quantizers.WuQuantizer.PaletteLookup.paletteMask">
            <summary>
            The palette mask.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.Quantizers.WuQuantizer.PaletteLookup.#ctor(ImageProcessor.Imaging.Colors.Color32[])">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Imaging.Quantizers.WuQuantizer.PaletteLookup"/> class.
            </summary>
            <param name="palette">
            The palette.
            </param>
        </member>
        <member name="P:ImageProcessor.Imaging.Quantizers.WuQuantizer.PaletteLookup.Palette">
            <summary>
            Gets the palette.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.Quantizers.WuQuantizer.PaletteLookup.GetPaletteIndex(ImageProcessor.Imaging.Colors.Color32)">
            <summary>
            Gets palette index for the given pixel.
            </summary>
            <param name="pixel">
            The pixel to return the index for.
            </param>
            <returns>
            The <see cref="T:System.Byte"/> representing the index.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Quantizers.WuQuantizer.PaletteLookup.ComputeBitMask(System.Byte,System.Int32)">
            <summary>
            Computes the bit mask.
            </summary>
            <param name="max">
            The maximum byte value.
            </param>
            <param name="bits">
            The number of bits.
            </param>
            <returns>
            The <see cref="T:System.Byte"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Quantizers.WuQuantizer.PaletteLookup.GetMask(ImageProcessor.Imaging.Colors.Color32[])">
            <summary>
            Gets the mask value from the palette.
            </summary>
            <param name="palette">
            The palette.
            </param>
            <returns>
            The <see cref="T:System.Int32"/> representing the component value of the mask.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Quantizers.WuQuantizer.PaletteLookup.HighestSetBitIndex(System.Byte)">
            <summary>
            Gets the highest set bit index.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            The <see cref="T:System.Byte"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Quantizers.WuQuantizer.PaletteLookup.BuildLookup(ImageProcessor.Imaging.Colors.Color32[])">
            <summary>
            The build lookup.
            </summary>
            <param name="palette">
            The palette.
            </param>
        </member>
        <member name="T:ImageProcessor.Imaging.Quantizers.WuQuantizer.PaletteLookup.LookupNode">
            <summary>
            Represents a single node containing the index and pixel.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Quantizers.WuQuantizer.PaletteLookup.LookupNode.PaletteIndex">
            <summary>
            The palette index.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Quantizers.WuQuantizer.PaletteLookup.LookupNode.Color32">
            <summary>
            The pixel.
            </summary>
        </member>
        <member name="T:ImageProcessor.Imaging.Quantizers.WuQuantizer.CubeCut">
            <summary>
            Represents a cube cut.
            Adapted from <see href="https://github.com/drewnoakes"/>
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Quantizers.WuQuantizer.CubeCut.Position">
            <summary>
            The position.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Quantizers.WuQuantizer.CubeCut.Value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.Quantizers.WuQuantizer.CubeCut.#ctor(System.Nullable{System.Byte},System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Imaging.Quantizers.WuQuantizer.CubeCut"/> struct.
            </summary>
            <param name="cutPoint">
            The cut point.
            </param>
            <param name="result">
            The result.
            </param>
        </member>
        <member name="T:ImageProcessor.Imaging.Quantizers.WuQuantizer.ImageBuffer">
            <summary>
            The image buffer for storing and manipulating pixel information.
            Adapted from <see href="https://github.com/drewnoakes"/>
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.Quantizers.WuQuantizer.ImageBuffer.#ctor(System.Drawing.Bitmap)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Imaging.Quantizers.WuQuantizer.ImageBuffer"/> class.
            </summary>
            <param name="image">
            The image to store.
            </param>
        </member>
        <member name="P:ImageProcessor.Imaging.Quantizers.WuQuantizer.ImageBuffer.Image">
            <summary>
            Gets the image.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Quantizers.WuQuantizer.ImageBuffer.PixelLines">
            <summary>
            Gets the enumerable pixel array representing each row of pixels.
            </summary>
            <exception cref="T:ImageProcessor.Common.Exceptions.QuantizationException">
            Thrown if the given image is not a 32 bit per pixel image.
            </exception>
        </member>
        <member name="M:ImageProcessor.Imaging.Quantizers.WuQuantizer.ImageBuffer.UpdatePixelIndexes(System.Collections.Generic.IEnumerable{System.Byte[]})">
            <summary>
            Updates the pixel indexes.
            </summary>
            <param name="lineIndexes">
            The enumerable byte array representing each row of pixels.
            </param>
        </member>
        <member name="T:ImageProcessor.Imaging.Quantizers.WuQuantizer.IWuQuantizer">
            <summary>
            Encapsulates methods to calculate the color palette of an image using 
            a Wu color quantizer <see href="http://www.ece.mcmaster.ca/~xwu/cq.c"/>.
            Adapted from <see href="https://github.com/drewnoakes" />
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.Quantizers.WuQuantizer.IWuQuantizer.Quantize(System.Drawing.Image,System.Int32,System.Int32)">
            <summary>
            Quantizes the given image.
            </summary>
            <param name="image">
            The 32 bit per pixel <see cref="T:System.Drawing.Image"/>.
            </param>
            <param name="alphaThreshold">
            The alpha threshold. All colors with an alpha value less than this will be 
            considered fully transparent
            </param>
            <param name="alphaFader">
            The alpha fader. Alpha values will be normalized to the nearest multiple of this value.
            </param>
            <returns>
            The quantized <see cref="T:System.Drawing.Image"/>.
            </returns>
        </member>
        <member name="T:ImageProcessor.Imaging.Quantizers.WuQuantizer.WuQuantizer">
            <summary>
            Encapsulates methods to calculate the color palette of an image using 
            a Wu color quantizer <see href="http://www.ece.mcmaster.ca/~xwu/cq.c"/>.
            Adapted from <see href="https://github.com/drewnoakes"/>
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.Quantizers.WuQuantizer.WuQuantizer.GetQuantizedImage(ImageProcessor.Imaging.Quantizers.WuQuantizer.ImageBuffer,System.Int32,ImageProcessor.Imaging.Colors.Color32[],System.Int32)">
            <summary>
            Quantizes the image contained within the <see cref="T:ImageProcessor.Imaging.Quantizers.WuQuantizer.ImageBuffer"/> returning the result.
            </summary>
            <param name="imageBuffer">
            The <see cref="T:ImageProcessor.Imaging.Quantizers.WuQuantizer.ImageBuffer"/> for storing and manipulating pixel information..
            </param>
            <param name="colorCount">
            The maximum number of colors apply to the image.
            </param>
            <param name="lookups">
            The array of <see cref="T:ImageProcessor.Imaging.Colors.Color32"/> containing indexed versions of the images colors.
            </param>
            <param name="alphaThreshold">
            All colors with an alpha value less than this will be considered fully transparent.
            </param>
            <returns>
            The quantized <see cref="T:System.Drawing.Bitmap"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Quantizers.WuQuantizer.WuQuantizer.BuildPalette(System.Drawing.Imaging.ColorPalette,ImageProcessor.Imaging.Quantizers.WuQuantizer.PaletteColorHistory[])">
            <summary>
            Builds a color palette from the given <see cref="T:ImageProcessor.Imaging.Quantizers.WuQuantizer.PaletteColorHistory"/>.
            </summary>
            <param name="palette">
            The <see cref="T:System.Drawing.Imaging.ColorPalette"/> to fill.
            </param>
            <param name="paletteHistory">
            The <see cref="T:ImageProcessor.Imaging.Quantizers.WuQuantizer.PaletteColorHistory"/> containing the sum of all pixel data.
            </param>
            <returns>
            The <see cref="T:System.Drawing.Imaging.ColorPalette"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Quantizers.WuQuantizer.WuQuantizer.IndexedPixels(ImageProcessor.Imaging.Quantizers.WuQuantizer.ImageBuffer,ImageProcessor.Imaging.Colors.Color32[],System.Int32,ImageProcessor.Imaging.Quantizers.WuQuantizer.PaletteColorHistory[])">
            <summary>
            Gets an enumerable array of bytes representing each row of the image.
            </summary>
            <param name="image">
            The <see cref="T:ImageProcessor.Imaging.Quantizers.WuQuantizer.ImageBuffer"/> for storing and manipulating pixel information.
            </param>
            <param name="lookups">
            The array of <see cref="T:ImageProcessor.Imaging.Colors.Color32"/> containing indexed versions of the images colors.
            </param>
            <param name="alphaThreshold">
            The alpha threshold.
            </param>
            <param name="paletteHistogram">
            The palette histogram.
            </param>
            <returns>
            The enumerable list of <see cref="T:System.Byte"/> representing each pixel.
            </returns>
        </member>
        <member name="T:ImageProcessor.Imaging.Quantizers.WuQuantizer.WuQuantizerBase">
            <summary>
            Encapsulates methods to calculate the color palette of an image using 
            a Wu color quantizer <see href="http://www.ece.mcmaster.ca/~xwu/cq.c"/>.
            Adapted from <see href="https://github.com/drewnoakes"/>
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Quantizers.WuQuantizer.WuQuantizerBase.AlphaMax">
            <summary>
            The maximum value for an alpha color component.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Quantizers.WuQuantizer.WuQuantizerBase.AlphaMin">
            <summary>
            The minimum value for an alpha color component.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Quantizers.WuQuantizer.WuQuantizerBase.Alpha">
            <summary>
            The position of the alpha component within a byte array.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Quantizers.WuQuantizer.WuQuantizerBase.Red">
            <summary>
            The position of the red component within a byte array.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Quantizers.WuQuantizer.WuQuantizerBase.Green">
            <summary>
            The position of the green component within a byte array.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Quantizers.WuQuantizer.WuQuantizerBase.Blue">
            <summary>
            The position of the blue component within a byte array.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Quantizers.WuQuantizer.WuQuantizerBase.SideSize">
            <summary>
            The size of a color cube side.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Quantizers.WuQuantizer.WuQuantizerBase.MaxSideIndex">
            <summary>
            The maximum index within a color cube side
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Quantizers.WuQuantizer.WuQuantizerBase.threshold">
            <summary>
            The transparency threshold.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.Quantizers.WuQuantizer.WuQuantizerBase.fade">
            <summary>
            The transparency fade.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Quantizers.WuQuantizer.WuQuantizerBase.Threshold">
            <summary>
            Gets or sets the transparency threshold (0 - 255)
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Quantizers.WuQuantizer.WuQuantizerBase.Fade">
            <summary>
            Gets or sets the alpha fade (0 - 255)
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.Quantizers.WuQuantizer.WuQuantizerBase.Quantize(System.Drawing.Image)">
            <summary>
            Quantize an image and return the resulting output bitmap
            </summary>
            <param name="source">
            The 32 bit per pixel image to quantize.
            </param>
            <returns>
            A quantized version of the image.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Quantizers.WuQuantizer.WuQuantizerBase.Quantize(System.Drawing.Image,System.Int32,System.Int32)">
            <summary>
            Quantize an image and return the resulting output bitmap
            </summary>
            <param name="source">
            The 32 bit per pixel image to quantize.
            </param>
            <param name="alphaThreshold">
            All colors with an alpha value less than this will be considered fully transparent.
            </param>
            <param name="alphaFader">
            Alpha values will be normalized to the nearest multiple of this value.
            </param>
            <returns>
            A quantized version of the image.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Quantizers.WuQuantizer.WuQuantizerBase.Quantize(System.Drawing.Image,System.Int32,System.Int32,ImageProcessor.Imaging.Quantizers.WuQuantizer.Histogram,System.Int32)">
            <summary>
            Quantize an image and return the resulting output bitmap
            </summary>
            <param name="source">
            The 32 bit per pixel image to quantize.
            </param>
            <param name="alphaThreshold">
            All colors with an alpha value less than this will be considered fully transparent.
            </param>
            <param name="alphaFader">
            Alpha values will be normalized to the nearest multiple of this value.
            </param>
            <param name="histogram">
            The <see cref="T:ImageProcessor.Imaging.Quantizers.WuQuantizer.Histogram"/> representing the distribution of color data.
            </param>
            <param name="maxColors">
            The maximum number of colors apply to the image.
            </param>
            <returns>
            A quantized version of the image.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Quantizers.WuQuantizer.WuQuantizerBase.GetQuantizedImage(ImageProcessor.Imaging.Quantizers.WuQuantizer.ImageBuffer,System.Int32,ImageProcessor.Imaging.Colors.Color32[],System.Int32)">
            <summary>
            Quantizes the image contained within the <see cref="T:ImageProcessor.Imaging.Quantizers.WuQuantizer.ImageBuffer"/> returning the result.
            </summary>
            <param name="imageBuffer">
            The <see cref="T:ImageProcessor.Imaging.Quantizers.WuQuantizer.ImageBuffer"/> for storing and manipulating pixel information..
            </param>
            <param name="colorCount">
            The maximum number of colors apply to the image.
            </param>
            <param name="lookups">
            The array of <see cref="T:ImageProcessor.Imaging.Colors.Color32"/> containing indexed versions of the images colors.
            </param>
            <param name="alphaThreshold">
            All colors with an alpha value less than this will be considered fully transparent.
            </param>
            <returns>
            The quantized <see cref="T:System.Drawing.Bitmap"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Quantizers.WuQuantizer.WuQuantizerBase.BuildHistogram(ImageProcessor.Imaging.Quantizers.WuQuantizer.Histogram,ImageProcessor.Imaging.Quantizers.WuQuantizer.ImageBuffer,System.Int32,System.Int32)">
            <summary>
            Builds a histogram from the current image.
            </summary>
            <param name="histogram">
            The <see cref="T:ImageProcessor.Imaging.Quantizers.WuQuantizer.Histogram"/> representing the distribution of color data.
            </param>
            <param name="imageBuffer">
            The <see cref="T:ImageProcessor.Imaging.Quantizers.WuQuantizer.ImageBuffer"/> for storing pixel information.
            </param>
            <param name="alphaThreshold">
            All colors with an alpha value less than this will be considered fully transparent.
            </param>
            <param name="alphaFader">
            Alpha values will be normalized to the nearest multiple of this value.
            </param>
        </member>
        <member name="M:ImageProcessor.Imaging.Quantizers.WuQuantizer.WuQuantizerBase.CalculateMoments(ImageProcessor.Imaging.Quantizers.WuQuantizer.ColorMoment[0:,0:,0:,0:])">
            <summary>
            Calculates the color moments from the histogram of moments.
            </summary>
            <param name="moments">
            The three dimensional array of <see cref="T:ImageProcessor.Imaging.Quantizers.WuQuantizer.ColorMoment"/> to process.
            </param>
        </member>
        <member name="M:ImageProcessor.Imaging.Quantizers.WuQuantizer.WuQuantizerBase.Top(ImageProcessor.Imaging.Quantizers.WuQuantizer.Box,System.Int32,System.Int32,ImageProcessor.Imaging.Quantizers.WuQuantizer.ColorMoment[0:,0:,0:,0:])">
            <summary>
            Calculates the volume of the top of the cube.
            </summary>
            <param name="cube">
            The cube to calculate the volume from.
            </param>
            <param name="direction">
            The direction to calculate.
            </param>
            <param name="position">
            The position at which to begin.
            </param>
            <param name="moment">
            The three dimensional moment.
            </param>
            <returns>
            The <see cref="T:ImageProcessor.Imaging.Quantizers.WuQuantizer.ColorMoment"/> representing the top of the cube.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Quantizers.WuQuantizer.WuQuantizerBase.Bottom(ImageProcessor.Imaging.Quantizers.WuQuantizer.Box,System.Int32,ImageProcessor.Imaging.Quantizers.WuQuantizer.ColorMoment[0:,0:,0:,0:])">
            <summary>
            Calculates the volume of the bottom of the cube.
            </summary>
            <param name="cube">
            The cube to calculate the volume from.
            </param>
            <param name="direction">
            The direction to calculate.
            </param>
            <param name="moment">
            The three dimensional moment.
            </param>
            <returns>
            The <see cref="T:ImageProcessor.Imaging.Quantizers.WuQuantizer.ColorMoment"/> representing the bottom of the cube.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Quantizers.WuQuantizer.WuQuantizerBase.Maximize(ImageProcessor.Imaging.Quantizers.WuQuantizer.ColorMoment[0:,0:,0:,0:],ImageProcessor.Imaging.Quantizers.WuQuantizer.Box,System.Int32,System.Byte,System.Byte,ImageProcessor.Imaging.Quantizers.WuQuantizer.ColorMoment)">
            <summary>
            Maximizes the sum of the two boxes.
            </summary>
            <param name="moments">
            The <see cref="T:ImageProcessor.Imaging.Quantizers.WuQuantizer.ColorMoment"/>.
            </param>
            <param name="cube">
            The <see cref="T:ImageProcessor.Imaging.Quantizers.WuQuantizer.Box"/> cube.
            </param>
            <param name="direction">
            The direction.
            </param>
            <param name="first">
            The first byte.
            </param>
            <param name="last">
            The last byte.
            </param>
            <param name="whole">
            The whole <see cref="T:ImageProcessor.Imaging.Quantizers.WuQuantizer.ColorMoment"/>.
            </param>
            <returns>
            The <see cref="T:ImageProcessor.Imaging.Quantizers.WuQuantizer.CubeCut"/> representing the sum.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Quantizers.WuQuantizer.WuQuantizerBase.Cut(ImageProcessor.Imaging.Quantizers.WuQuantizer.ColorMoment[0:,0:,0:,0:],ImageProcessor.Imaging.Quantizers.WuQuantizer.Box@,ImageProcessor.Imaging.Quantizers.WuQuantizer.Box@)">
            <summary>
            Returns a value indicating whether a cube can be cut.
            </summary>
            <param name="moments">
            The three dimensional array of <see cref="T:ImageProcessor.Imaging.Quantizers.WuQuantizer.ColorMoment"/>.
            </param>
            <param name="first">
            The first <see cref="T:ImageProcessor.Imaging.Quantizers.WuQuantizer.Box"/>.
            </param>
            <param name="second">
            The second <see cref="T:ImageProcessor.Imaging.Quantizers.WuQuantizer.Box"/>.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/> indicating the result.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Quantizers.WuQuantizer.WuQuantizerBase.CalculateVariance(ImageProcessor.Imaging.Quantizers.WuQuantizer.ColorMoment[0:,0:,0:,0:],ImageProcessor.Imaging.Quantizers.WuQuantizer.Box)">
            <summary>
            Calculates the variance of the volume of the cube.
            </summary>
            <param name="moments">
            The three dimensional array of <see cref="T:ImageProcessor.Imaging.Quantizers.WuQuantizer.ColorMoment"/>.
            </param>
            <param name="cube">
            The <see cref="T:ImageProcessor.Imaging.Quantizers.WuQuantizer.Box"/> cube.
            </param>
            <returns>
            The <see cref="T:System.Single"/> representing the variance.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Quantizers.WuQuantizer.WuQuantizerBase.Volume(ImageProcessor.Imaging.Quantizers.WuQuantizer.ColorMoment[0:,0:,0:,0:],ImageProcessor.Imaging.Quantizers.WuQuantizer.Box)">
            <summary>
            Calculates the volume of the colors.
            </summary>
            <param name="moments">
            The three dimensional array of <see cref="T:ImageProcessor.Imaging.Quantizers.WuQuantizer.ColorMoment"/>.
            </param>
            <param name="cube">
            The <see cref="T:ImageProcessor.Imaging.Quantizers.WuQuantizer.Box"/> cube.
            </param>
            <returns>
            The <see cref="T:System.Single"/> representing the volume.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Quantizers.WuQuantizer.WuQuantizerBase.SplitData(System.Int32@,ImageProcessor.Imaging.Quantizers.WuQuantizer.ColorMoment[0:,0:,0:,0:])">
            <summary>
            Splits the data.
            </summary>
            <param name="colorCount">
            The color count.
            </param>
            <param name="moments">
            The three dimensional array of <see cref="T:ImageProcessor.Imaging.Quantizers.WuQuantizer.ColorMoment"/>.
            </param>
            <returns>
            The array <see cref="T:ImageProcessor.Imaging.Quantizers.WuQuantizer.Box"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Quantizers.WuQuantizer.WuQuantizerBase.BuildLookups(ImageProcessor.Imaging.Quantizers.WuQuantizer.Box[],ImageProcessor.Imaging.Quantizers.WuQuantizer.ColorMoment[0:,0:,0:,0:])">
            <summary>
            Builds an array of pixel data to look within.
            </summary>
            <param name="cubes">
            The array of <see cref="T:ImageProcessor.Imaging.Quantizers.WuQuantizer.Box"/> cubes.
            </param>
            <param name="moments">
            The three dimensional array of <see cref="T:ImageProcessor.Imaging.Quantizers.WuQuantizer.ColorMoment"/>.
            </param>
            <returns>
            The array of <see cref="T:ImageProcessor.Imaging.Colors.Color32"/>.
            </returns>
        </member>
        <member name="T:ImageProcessor.Imaging.ResizeLayer">
            <summary>
            Encapsulates the properties required to resize an image.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.ResizeLayer.#ctor(System.Drawing.Size,ImageProcessor.Imaging.ResizeMode,ImageProcessor.Imaging.AnchorPosition,System.Boolean,System.Single[],System.Nullable{System.Drawing.Size},System.Collections.Generic.List{System.Drawing.Size},System.Nullable{System.Drawing.Point})">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Imaging.ResizeLayer"/> class.
            </summary>
            <param name="size">
            The <see cref="T:System.Drawing.Size"/> containing the width and height to set the image to.
            </param>
            <param name="resizeMode">
            The resize mode to apply to resized image. (Default ResizeMode.Pad)
            </param>
            <param name="anchorPosition">
            The <see cref="P:ImageProcessor.Imaging.ResizeLayer.AnchorPosition"/> to apply to resized image. (Default AnchorPosition.Center)
            </param>
            <param name="upscale">
            Whether to allow up-scaling of images. (Default true)
            </param>
            <param name="centerCoordinates">
            The center coordinates (Default null)
            </param>
            <param name="maxSize">
            The maximum size to resize an image to. 
            Used to restrict resizing based on calculated resizing
            </param>
            <param name="restrictedSizes">
            The range of sizes to restrict resizing an image to. 
            Used to restrict resizing based on calculated resizing
            </param>
            <param name="anchorPoint">
            The anchor point (Default null)
            </param>
        </member>
        <member name="P:ImageProcessor.Imaging.ResizeLayer.Size">
            <summary>
            Gets or sets the size.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.ResizeLayer.MaxSize">
            <summary>
            Gets or sets the max size.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.ResizeLayer.RestrictedSizes">
            <summary>
            Gets or sets the restricted range of sizes. to restrict resizing methods to.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.ResizeLayer.ResizeMode">
            <summary>
            Gets or sets the resize mode.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.ResizeLayer.AnchorPosition">
            <summary>
            Gets or sets the anchor position.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.ResizeLayer.Upscale">
            <summary>
            Gets or sets a value indicating whether to allow up-scaling of images.
            For <see cref="T:ResizeMode.BoxPad"/> this is always true.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.ResizeLayer.CenterCoordinates">
            <summary>
            Gets or sets the center coordinates.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.ResizeLayer.AnchorPoint">
            <summary>
            Gets or sets the anchor point.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.ResizeLayer.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the specified object is an 
            <see cref="T:ImageProcessor.Imaging.ResizeLayer"/> object that is equivalent to 
            this <see cref="T:ImageProcessor.Imaging.ResizeLayer"/> object.
            </summary>
            <param name="obj">
            The object to test.
            </param>
            <returns>
            True if the given object  is an <see cref="T:ImageProcessor.Imaging.ResizeLayer"/> object that is equivalent to 
            this <see cref="T:ImageProcessor.Imaging.ResizeLayer"/> object; otherwise, false.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.ResizeLayer.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="T:ImageProcessor.Imaging.ResizeMode">
            <summary>
            Enumerated resize modes to apply to resized images.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.ResizeMode.Pad">
            <summary>
            Pads the resized image to fit the bounds of its container.
            If only one dimension is passed, will maintain the original aspect ratio.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.ResizeMode.Stretch">
            <summary>
            Stretches the resized image to fit the bounds of its container.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.ResizeMode.Crop">
            <summary>
            Crops the resized image to fit the bounds of its container.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.ResizeMode.Max">
            <summary>
            Constrains the resized image to fit the bounds of its container maintaining
            the original aspect ratio. 
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.ResizeMode.Min">
            <summary>
            Resizes the image until the shortest side reaches the set given dimension.
            Sets <see cref="P:ImageProcessor.Imaging.ResizeLayer.Upscale"/> to <c>false</c> only allowing downscaling.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.ResizeMode.BoxPad">
            <summary>
            Pads the image to fit the bound of the container without resizing the 
            original source. Sets <see cref="P:ImageProcessor.Imaging.ResizeLayer.Upscale"/> to <c>true</c>.
            When downscaling, performs the same functionality as <see cref="F:ImageProcessor.Imaging.ResizeMode.Pad"/>
            </summary>
        </member>
        <member name="T:ImageProcessor.Imaging.Resizer">
            <summary>
            Provides methods to resize images.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.Resizer.#ctor(System.Drawing.Size)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Imaging.Resizer"/> class.
            </summary>
            <param name="size">
            The <see cref="T:System.Drawing.Size"/> to resize the image to.
            </param>
        </member>
        <member name="M:ImageProcessor.Imaging.Resizer.#ctor(ImageProcessor.Imaging.ResizeLayer)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Imaging.Resizer"/> class.
            </summary>
            <param name="resizeLayer">
            The <see cref="P:ImageProcessor.Imaging.Resizer.ResizeLayer"/>.
            </param>
        </member>
        <member name="P:ImageProcessor.Imaging.Resizer.ResizeLayer">
            <summary>
            Gets or sets the <see cref="P:ImageProcessor.Imaging.Resizer.ResizeLayer"/>.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Resizer.ImageFormat">
            <summary>
            Gets or sets the <see cref="T:ImageProcessor.Imaging.Formats.ISupportedImageFormat"/>.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.Resizer.AnimationProcessMode">
            <summary>
            Gets or sets process mode for frames in animated images.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.Resizer.ResizeImage(System.Drawing.Image,System.Boolean)">
            <summary>
            Resizes the given image.
            </summary>
            <param name="source">The source <see cref="T:System.Drawing.Image"/> to resize.</param>
            <param name="linear">Whether to resize the image using the linear color space.</param>
            <returns>
            The resized <see cref="T:System.Drawing.Image"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Resizer.ResizeComposite(System.Drawing.Image,System.Int32,System.Int32,System.Drawing.Rectangle)">
            <summary>
            Gets an image resized using the composite color space without any gamma correction adjustments.
            </summary>
            <param name="source">The source image.</param>
            <param name="width">The width to resize to.</param>
            <param name="height">The height to resize to.</param>
            <param name="destination">The destination rectangle.</param>
            <returns>
            The <see cref="T:System.Drawing.Bitmap"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Resizer.ResizeLinear(System.Drawing.Image,System.Int32,System.Int32,System.Drawing.Rectangle)">
            <summary>
            Gets an image resized using the linear color space with gamma correction adjustments.
            </summary>
            <param name="source">The source image.</param>
            <param name="width">The width to resize to.</param>
            <param name="height">The height to resize to.</param>
            <param name="destination">The destination rectangle.</param>
            <returns>
            The <see cref="T:System.Drawing.Bitmap"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Resizer.ResizeLinear(System.Drawing.Image,System.Int32,System.Int32,System.Drawing.Rectangle,ImageProcessor.Imaging.AnimationProcessMode)">
            <summary>
            Gets an image resized using the linear color space with gamma correction adjustments.
            </summary>
            <param name="source">The source image.</param>
            <param name="width">The width to resize to.</param>
            <param name="height">The height to resize to.</param>
            <param name="destination">The destination rectangle.</param>
            <param name="animationProcessMode">The process mode for frames in animated images.</param>
            <returns>
            The <see cref="T:System.Drawing.Bitmap"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.Resizer.ResizeImage(System.Drawing.Image,System.Int32,System.Int32,System.Int32,System.Int32,System.Collections.Generic.List{System.Drawing.Size},ImageProcessor.Imaging.ResizeMode,ImageProcessor.Imaging.AnchorPosition,System.Boolean,System.Single[],System.Boolean,System.Nullable{System.Drawing.Point})">
            <summary>
            Resizes the given image.
            </summary>
            <param name="source">The source <see cref="T:System.Drawing.Image"/> to resize</param>
            <param name="width">The width to resize the image to.</param>
            <param name="height">The height to resize the image to.</param>
            <param name="maxWidth">The default max width to resize the image to.</param>
            <param name="maxHeight">The default max height to resize the image to.</param>
            <param name="restrictedSizes">A <see cref="T:System.Collections.Generic.List`1"/> containing image resizing restrictions.</param>
            <param name="resizeMode">The mode with which to resize the image.</param>
            <param name="anchorPosition">The anchor position to place the image at.</param>
            <param name="upscale">Whether to allow up-scaling of images. (Default true)</param>
            <param name="centerCoordinates">
            If the resize mode is crop, you can set a specific center coordinate, use as alternative to anchorPosition
            </param>
            <param name="linear">Whether to resize the image using the linear color space.</param>
            <param name="anchorPoint">
            If resize mode is box pad, you can set a specific anchor coordinate, use as alternative to anchorPosition.
            </param>
            <returns>
            The resized <see cref="T:System.Drawing.Image"/>.
            </returns>
        </member>
        <member name="T:ImageProcessor.Imaging.RoundedCornerLayer">
            <summary>
            Encapsulates the properties required to add rounded corners to an image.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.RoundedCornerLayer.#ctor(System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Imaging.RoundedCornerLayer"/> class.
            </summary>
            <param name="radius">
            The radius at which the corner will be rounded.
            </param>
            <param name="topLeft">
            Set if top left is rounded
            </param>
            <param name="topRight">
            Set if top right is rounded
            </param>
            <param name="bottomLeft">
            Set if bottom left is rounded
            </param>
            <param name="bottomRight">
            Set if bottom right is rounded
            </param>
        </member>
        <member name="P:ImageProcessor.Imaging.RoundedCornerLayer.Radius">
            <summary>
            Gets or sets the radius of the corners.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.RoundedCornerLayer.TopLeft">
            <summary>
            Gets or sets a value indicating whether top left corners are to be added.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.RoundedCornerLayer.TopRight">
            <summary>
            Gets or sets a value indicating whether top right corners are to be added.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.RoundedCornerLayer.BottomLeft">
            <summary>
            Gets or sets a value indicating whether bottom left corners are to be added.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.RoundedCornerLayer.BottomRight">
            <summary>
            Gets or sets a value indicating whether bottom right corners are to be added.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.RoundedCornerLayer.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the specified object is an 
            <see cref="T:ImageProcessor.Imaging.RoundedCornerLayer"/> object that is equivalent to 
            this <see cref="T:ImageProcessor.Imaging.RoundedCornerLayer"/> object.
            </summary>
            <param name="obj">
            The object to test.
            </param>
            <returns>
            True if the given object is an <see cref="T:ImageProcessor.Imaging.RoundedCornerLayer"/> object that is equivalent to 
            this <see cref="T:ImageProcessor.Imaging.RoundedCornerLayer"/> object; otherwise, false.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.RoundedCornerLayer.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="T:ImageProcessor.Imaging.TextLayer">
            <summary>
            Encapsulates the properties required to add a layer of text to an image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Imaging.TextLayer.isDisposed">
            <summary>
            A value indicating whether this instance of the given entity has been disposed.
            </summary>
            <value><see langword="true"/> if this instance has been disposed; otherwise, <see langword="false"/>.</value>
            <remarks>
            If the entity is disposed, it must not be disposed a second
            time. The isDisposed field is set the first time the entity
            is disposed. If the isDisposed field is true, then the Dispose()
            method will not dispose again. This help not to prolong the entity's
            life in the Garbage Collector.
            </remarks>
        </member>
        <member name="P:ImageProcessor.Imaging.TextLayer.Text">
            <summary>
            Gets or sets Text.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.TextLayer.FontColor">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Color"/> to render the font.
            <remarks>
            <para>Defaults to black.</para>
            </remarks>
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.TextLayer.FontFamily">
            <summary>
            Gets or sets the name of the font family.
            <remarks>
            <para>Defaults to generic sans-serif font family.</para>
            </remarks>
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.TextLayer.FontSize">
            <summary>
            Gets or sets the size of the font in pixels.
            <remarks>
            <para>Defaults to 48 pixels.</para>
            </remarks>
            </summary>  
        </member>
        <member name="P:ImageProcessor.Imaging.TextLayer.Style">
            <summary>
            Gets or sets the FontStyle of the text layer.
            <remarks>
            <para>Defaults to regular.</para>
            </remarks>
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.TextLayer.Opacity">
            <summary>
            Gets or sets the Opacity of the text layer.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.TextLayer.Position">
            <summary>
            Gets or sets the Position of the text layer.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.TextLayer.DropShadow">
            <summary>
            Gets or sets a value indicating whether a DropShadow should be drawn.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.TextLayer.Vertical">
            <summary>
            Gets or sets a value indicating whether the text should be rendered vertically.
            </summary>
        </member>
        <member name="P:ImageProcessor.Imaging.TextLayer.RightToLeft">
            <summary>
            Gets or sets a value indicating whether the text should be rendered right to left.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.TextLayer.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the specified object is an 
            <see cref="T:ImageProcessor.Imaging.TextLayer"/> object that is equivalent to 
            this <see cref="T:ImageProcessor.Imaging.TextLayer"/> object.
            </summary>
            <param name="obj">
            The object to test.
            </param>
            <returns>
            True if the given object  is an <see cref="T:ImageProcessor.Imaging.TextLayer"/> object that is equivalent to 
            this <see cref="T:ImageProcessor.Imaging.TextLayer"/> object; otherwise, false.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.TextLayer.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="M:ImageProcessor.Imaging.TextLayer.Dispose">
            <summary>
            Disposes the object and frees resources for the Garbage Collector.
            </summary>
        </member>
        <member name="M:ImageProcessor.Imaging.TextLayer.Dispose(System.Boolean)">
            <summary>
            Disposes the object and frees resources for the Garbage Collector.
            </summary>
            <param name="disposing">If true, the object gets disposed.</param>
        </member>
        <member name="T:ImageProcessor.ImageFactory">
            <summary>
            Encapsulates methods for processing image files in a fluent manner.
            </summary>
        </member>
        <member name="F:ImageProcessor.ImageFactory.DefaultQuality">
            <summary>
            The default quality for image files.
            </summary>
        </member>
        <member name="F:ImageProcessor.ImageFactory.backupFormat">
            <summary>
            The backup supported image format.
            </summary>
        </member>
        <member name="F:ImageProcessor.ImageFactory.backupExifPropertyItems">
            <summary>
            The backup collection of property items containing EXIF metadata.
            </summary>
        </member>
        <member name="F:ImageProcessor.ImageFactory.isDisposed">
            <summary>
            A value indicating whether this instance of the given entity has been disposed.
            </summary>
            <value><see langword="true"/> if this instance has been disposed; otherwise, <see langword="false"/>.</value>
            <remarks>
            If the entity is disposed, it must not be disposed a second
            time. The isDisposed field is set the first time the entity
            is disposed. If the isDisposed field is true, then the Dispose()
            method will not dispose again. This help not to prolong the entity's
            life in the Garbage Collector.
            </remarks>
        </member>
        <member name="M:ImageProcessor.ImageFactory.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </summary>
            <param name="preserveExifData">
            Whether to preserve exif metadata. Defaults to false.
            </param>
        </member>
        <member name="M:ImageProcessor.ImageFactory.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </summary>
            <param name="preserveExifData">
            Whether to preserve exif metadata. Defaults to false.
            </param>
            <param name="fixGamma">
            Whether to fix the gamma component of the image. Defaults to true.
            </param>
        </member>
        <member name="M:ImageProcessor.ImageFactory.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:ImageProcessor.ImageFactory">ImageFactory</see> class.
            </summary>
            <remarks>
            Use C# destructor syntax for finalization code.
            This destructor will run only if the Dispose method
            does not get called.
            It gives your base class the opportunity to finalize.
            Do not provide destructors in types derived from this class.
            </remarks>
        </member>
        <member name="P:ImageProcessor.ImageFactory.CurrentBitDepth">
            <summary>
            Gets the color depth in number of bits per pixel to save the image with.
            This can be used to change the bit depth of images that can be saved with different
            bit depths such as TIFF.
            </summary>
        </member>
        <member name="P:ImageProcessor.ImageFactory.ImagePath">
            <summary>
            Gets the path to the local image for manipulation.
            </summary>
        </member>
        <member name="P:ImageProcessor.ImageFactory.ShouldProcess">
            <summary>
            Gets a value indicating whether the image factory should process the file.
            </summary>
        </member>
        <member name="P:ImageProcessor.ImageFactory.CurrentImageFormat">
            <summary>
            Gets the supported image format.
            </summary>
        </member>
        <member name="P:ImageProcessor.ImageFactory.PreserveExifData">
            <summary>
            Gets or sets a value indicating whether to preserve exif metadata.
            </summary>
        </member>
        <member name="P:ImageProcessor.ImageFactory.FixGamma">
            <summary>
            Gets or sets a value indicating whether to fix the gamma component of the current image.
            </summary>
        </member>
        <member name="P:ImageProcessor.ImageFactory.CurrentGamma">
            <summary>
            Gets or the current gamma value.
            </summary>
        </member>
        <member name="P:ImageProcessor.ImageFactory.ExifPropertyItems">
            <summary>
            Gets or sets the collection of property items containing EXIF metadata.
            </summary>
        </member>
        <member name="P:ImageProcessor.ImageFactory.Image">
            <summary>
            Gets or the local image for manipulation.
            </summary>
        </member>
        <member name="P:ImageProcessor.ImageFactory.AnimationProcessMode">
            <summary>
            Gets or sets the process mode for frames in animated images.
            </summary>
        </member>
        <member name="P:ImageProcessor.ImageFactory.InputStream">
            <summary>
            Gets or sets the stream for storing any input stream to prevent disposal.
            </summary>
        </member>
        <member name="M:ImageProcessor.ImageFactory.Load(System.IO.Stream)">
            <summary>
            Loads the image to process. Always call this method first.
            </summary>
            <param name="stream">
            The <see cref="T:System.IO.Stream"/> containing the image information.
            </param>
            <returns>
            The current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="M:ImageProcessor.ImageFactory.Load(System.String)">
            <summary>
            Loads the image to process. Always call this method first.
            </summary>
            <param name="imagePath">The absolute path to the image to load.</param>
            <returns>
            The current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="M:ImageProcessor.ImageFactory.Load(System.Byte[])">
            <summary>
            Loads the image to process from an array of bytes. Always call this method first.
            </summary>
            <param name="bytes">
            The <see cref="T:System.Byte"/> containing the image information.
            </param>
            <returns>
            The current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="M:ImageProcessor.ImageFactory.Load(System.Drawing.Image)">
            <summary>
            Loads the image to process from an array of bytes. Always call this method first.
            </summary>
            <param name="image">
            The <see cref="T:System.Drawing.Image"/> to load.
            The original image is untouched during manipulation as a copy is made. Disposal of the input image is the responsibility of the user.
            </param>
            <returns>
            The current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="M:ImageProcessor.ImageFactory.Reset">
            <summary>
            Resets the current image to its original loaded state.
            </summary>
            <returns>
            The current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="M:ImageProcessor.ImageFactory.Alpha(System.Int32)">
            <summary>
            Changes the opacity of the current image.
            </summary>
            <param name="percentage">
            The percentage by which to alter the images opacity.
            Any integer between 0 and 100.
            </param>
            <returns>
            The current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="M:ImageProcessor.ImageFactory.AutoRotate">
            <summary>
            Performs auto-rotation to ensure that EXIF defined rotation is reflected in
            the final image.
            </summary>
            <returns>
            The current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="M:ImageProcessor.ImageFactory.BitDepth(System.Int64)">
            <summary>
            Alters the bit depth of the current image.
            <remarks>
            This can only be used to change the bit depth of images that can be saved
            by <see cref="N:System.Drawing"/> with different bit depths such as TIFF.
            </remarks>
            </summary>
            <param name="bitDepth">A value over 0.</param>
            <returns>
            The current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="M:ImageProcessor.ImageFactory.Brightness(System.Int32)">
            <summary>
            Changes the brightness of the current image.
            </summary>
            <param name="percentage">
            The percentage by which to alter the images brightness.
            Any integer between -100 and 100.
            </param>
            <returns>
            The current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="M:ImageProcessor.ImageFactory.BackgroundColor(System.Drawing.Color)">
            <summary>
            Changes the background color of the current image.
            </summary>
            <param name="color">
            The <see cref="T:System.Drawing.Color"/> to paint the image with.
            </param>
            <returns>
            The current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="M:ImageProcessor.ImageFactory.Constrain(System.Drawing.Size)">
            <summary>
            Constrains the current image, resizing it to fit within the given dimensions whilst keeping its aspect ratio.
            </summary>
            <param name="size">
            The <see cref="T:System.Drawing.Size"/> containing the maximum width and height to set the image to.
            </param>
            <returns>
            The current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="M:ImageProcessor.ImageFactory.Contrast(System.Int32)">
            <summary>
            Changes the contrast of the current image.
            </summary>
            <param name="percentage">
            The percentage by which to alter the images contrast.
            Any integer between -100 and 100.
            </param>
            <returns>
            The current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="M:ImageProcessor.ImageFactory.Crop(System.Drawing.Rectangle)">
            <summary>
            Crops the current image to the given location and size.
            </summary>
            <param name="rectangle">
            The <see cref="T:System.Drawing.Rectangle"/> containing the coordinates to crop the image to.
            </param>
            <returns>
            The current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="M:ImageProcessor.ImageFactory.Crop(ImageProcessor.Imaging.CropLayer)">
            <summary>
            Crops the current image to the given location and size.
            </summary>
            <param name="cropLayer">
            The <see cref="T:ImageProcessor.Imaging.CropLayer"/> containing the coordinates and mode to crop the image with.
            </param>
            <returns>
            The current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="M:ImageProcessor.ImageFactory.DetectEdges(ImageProcessor.Imaging.Filters.EdgeDetection.IEdgeFilter,System.Boolean)">
            <summary>
            Detects the edges in the current image.
            </summary>
            <param name="filter">
            The <see cref="T:ImageProcessor.Imaging.Filters.EdgeDetection.IEdgeFilter"/> to detect edges with.
            </param>
            <param name="greyscale">
            Whether to convert the image to greyscale first - Defaults to true.
            </param>
            <returns>
            The current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="M:ImageProcessor.ImageFactory.Resolution(System.Int32,System.Int32,ImageProcessor.Imaging.MetaData.PropertyTagResolutionUnit)">
            <summary>
            Sets the resolution of the image.
            <remarks>
            This method sets both the bitmap data and EXIF resolution if available.
            </remarks>
            </summary>
            <param name="horizontal">The horizontal resolution.</param>
            <param name="vertical">The vertical resolution.</param>
            <param name="unit">
            The unit of measure for the horizontal resolution and the vertical resolution.
            Defaults to inches
            </param>
            <returns>
            The <see cref="T:ImageProcessor.ImageFactory"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.ImageFactory.EntropyCrop(System.Byte)">
            <summary>
            Crops an image to the area of greatest entropy.
            </summary>
            <param name="threshold">
            The threshold in bytes to control the entropy.
            </param>
            <returns>
            The current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="M:ImageProcessor.ImageFactory.Filter(ImageProcessor.Imaging.Filters.Photo.IMatrixFilter)">
            <summary>
            Applies a filter to the current image. Use the <see cref="T:ImageProcessor.Imaging.Filters.Photo.MatrixFilters"/> class to
            assign the correct filter.
            </summary>
            <param name="matrixFilter">
            The <see cref="T:ImageProcessor.Imaging.Filters.Photo.IMatrixFilter"/> of the filter to add to the image.
            </param>
            <returns>
            The current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="M:ImageProcessor.ImageFactory.Flip(System.Boolean,System.Boolean)">
            <summary>
            Flips the current image either horizontally or vertically.
            </summary>
            <param name="flipVertically">
            Whether to flip the image vertically.
            </param>
            <param name="flipBoth">
            Whether to flip the image both vertically and horizontally.
            </param>
            <returns>
            The current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="M:ImageProcessor.ImageFactory.Format(ImageProcessor.Imaging.Formats.ISupportedImageFormat)">
            <summary>
            Sets the output format of the current image to the matching <see cref="T:System.Drawing.Imaging.ImageFormat"/>.
            </summary>
            <param name="format">The <see cref="T:ImageProcessor.Imaging.Formats.ISupportedImageFormat"/>. to set the image to.</param>
            <returns>
            The current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="M:ImageProcessor.ImageFactory.Gamma(System.Single)">
            <summary>
            Adjust the gamma (intensity of the light) component of the given image.
            </summary>
            <param name="value">
            The value to adjust the gamma by (typically between .2 and 5).
            </param>
            <returns>
            The current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="M:ImageProcessor.ImageFactory.GaussianBlur(System.Int32)">
            <summary>
            Uses a Gaussian kernel to blur the current image.
            <remarks>
            <para>
            The sigma and threshold values applied to the kernel are
            1.4 and 0 respectively.
            </para>
            </remarks>
            </summary>
            <param name="size">
            The size to set the Gaussian kernel to.
            </param>
            <returns>
            The current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="M:ImageProcessor.ImageFactory.GaussianBlur(ImageProcessor.Imaging.GaussianLayer)">
            <summary>
            Uses a Gaussian kernel to blur the current image.
            </summary>
            <param name="gaussianLayer">
            The <see cref="T:ImageProcessor.Imaging.GaussianLayer"/> for applying sharpening and
            blurring methods to an image.
            </param>
            <returns>
            The current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="M:ImageProcessor.ImageFactory.GaussianSharpen(System.Int32)">
            <summary>
            Uses a Gaussian kernel to sharpen the current image.
            <remarks>
            <para>
            The sigma and threshold values applied to the kernel are
            1.4 and 0 respectively.
            </para>
            </remarks>
            </summary>
            <param name="size">
            The size to set the Gaussian kernel to.
            </param>
            <returns>
            The current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="M:ImageProcessor.ImageFactory.GaussianSharpen(ImageProcessor.Imaging.GaussianLayer)">
            <summary>
            Uses a Gaussian kernel to sharpen the current image.
            </summary>
            <param name="gaussianLayer">
            The <see cref="T:ImageProcessor.Imaging.GaussianLayer"/> for applying sharpening and
            blurring methods to an image.
            </param>
            <returns>
            The current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="M:ImageProcessor.ImageFactory.Hue(System.Int32,System.Boolean)">
            <summary>
            Alters the hue of the current image changing the overall color.
            </summary>
            <param name="degrees">
            The angle by which to alter the images hue.
            Any integer between 0 and 360.
            </param>
            <param name="rotate">
            Whether to rotate the hue of the current image altering each color
            </param>
            <returns>
            The current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="M:ImageProcessor.ImageFactory.Halftone(System.Boolean)">
            <summary>
            Converts the current image to a CMYK halftone representation of that image.
            </summary>
            <param name="comicMode">
            Whether to trace over the current image and add borders to add a comic book effect.
            </param>
            <returns>
            The current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="M:ImageProcessor.ImageFactory.Mask(ImageProcessor.Imaging.ImageLayer)">
            <summary>
            Applies the given image mask to the current image.
            </summary>
            <param name="imageLayer">
            The <see cref="T:ImageProcessor.Imaging.ImageLayer"/> containing the <see cref="P:ImageProcessor.ImageFactory.Image"/>
            and <see cref="T:System.Drawing.Point"/> properties necessary to mask the image.
            <para>
            The point property is used to place the image mask if it not the same dimensions as the original image.
            If no position is set, the mask will be centered within the image.
            </para>
            </param>
            <returns>
            The current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="M:ImageProcessor.ImageFactory.Overlay(ImageProcessor.Imaging.ImageLayer)">
            <summary>
            Adds a image overlay to the current image.
            </summary>
            <param name="imageLayer">
            The <see cref="T:ImageProcessor.Imaging.ImageLayer"/> containing the properties necessary to add
            the image overlay to the image.
            </param>
            <returns>
            The current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="M:ImageProcessor.ImageFactory.Pixelate(System.Int32,System.Nullable{System.Drawing.Rectangle})">
            <summary>
            Pixelates an image with the given size.
            </summary>
            <param name="pixelSize">
            The size of the pixels to create.</param>
            <param name="rectangle">
            The area in which to pixelate the image. If not set, the whole image is pixelated.
            </param>
            <returns>
            The current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="M:ImageProcessor.ImageFactory.Quality(System.Int32)">
            <summary>
            Alters the output quality of the current image.
            <remarks>
            This method will only effect the output quality of jpeg images
            </remarks>
            </summary>
            <param name="percentage">A value between 1 and 100 to set the quality to.</param>
            <returns>
            The current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="M:ImageProcessor.ImageFactory.ReplaceColor(System.Drawing.Color,System.Drawing.Color,System.Int32)">
            <summary>
            Replaces a color within the current image.
            </summary>
            <param name="target">
            The target <see cref="T:System.Drawing.Color"/>.
            </param>
            <param name="replacement">
            The replacement <see cref="T:System.Drawing.Color"/>.
            </param>
            <param name="fuzziness">
            A value between 0 and 128 with which to alter the target detection accuracy.
            </param>
            <returns>
            The <see cref="T:ImageProcessor.ImageFactory"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.ImageFactory.Resize(System.Drawing.Size)">
            <summary>
            Resizes the current image to the given dimensions.
            </summary>
            <param name="size">
            The <see cref="T:System.Drawing.Size"/> containing the width and height to set the image to.
            </param>
            <returns>
            The current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="M:ImageProcessor.ImageFactory.Resize(ImageProcessor.Imaging.ResizeLayer)">
            <summary>
            Resizes the current image to the given dimensions.
            </summary>
            <param name="resizeLayer">
            The <see cref="T:ImageProcessor.Imaging.ResizeLayer"/> containing the properties required to resize the image.
            </param>
            <returns>
            The current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="M:ImageProcessor.ImageFactory.Rotate(System.Single)">
            <summary>
            Rotates the current image by the given angle.
            </summary>
            <param name="degrees">
            The angle at which to rotate the image in degrees.
            </param>
            <returns>
            The current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="M:ImageProcessor.ImageFactory.RotateBounded(System.Single,System.Boolean)">
            <summary>
            Rotates the image without expanding the canvas to fit the image.
            </summary>
            <param name="degrees">
            The angle at which to rotate the image in degrees.
            </param>
            <param name="keepSize">
            Whether to keep the original image dimensions.
            <para>
            If set to true, the image is zoomed to fit the bounding area.
            </para>
            <para>
            If set to false, the area is cropped to fit the rotated image.
            </para>
            </param>
            <returns>
            The current instance of the <see cref="T:ImageProcessor.ImageFactory" /> class.
            </returns>
        </member>
        <member name="M:ImageProcessor.ImageFactory.RoundedCorners(System.Int32)">
            <summary>
            Adds rounded corners to the current image.
            </summary>
            <param name="radius">
            The radius at which the corner will be rounded.
            </param>
            <returns>
            The current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="M:ImageProcessor.ImageFactory.RoundedCorners(ImageProcessor.Imaging.RoundedCornerLayer)">
            <summary>
            Adds rounded corners to the current image.
            </summary>
            <param name="roundedCornerLayer">
            The <see cref="T:ImageProcessor.Imaging.RoundedCornerLayer"/> containing the properties to round corners on the image.
            </param>
            <returns>
            The current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="M:ImageProcessor.ImageFactory.Saturation(System.Int32)">
            <summary>
            Changes the saturation of the current image.
            </summary>
            <param name="percentage">
            The percentage by which to alter the images saturation.
            Any integer between -100 and 100.
            </param>
            <returns>
            The current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="M:ImageProcessor.ImageFactory.Tint(System.Drawing.Color)">
            <summary>
            Tints the current image with the given color.
            </summary>
            <param name="color">
            The <see cref="T:System.Drawing.Color"/> to tint the image with.
            </param>
            <returns>
            The current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="M:ImageProcessor.ImageFactory.Vignette(System.Nullable{System.Drawing.Color})">
            <summary>
            Adds a vignette image effect to the current image.
            </summary>
            <param name="color">
            The <see cref="T:System.Drawing.Color"/> to tint the image with. Defaults to black.
            </param>
            <returns>
            The current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="M:ImageProcessor.ImageFactory.Watermark(ImageProcessor.Imaging.TextLayer)">
            <summary>
            Adds a text based watermark to the current image.
            </summary>
            <param name="textLayer">
            The <see cref="T:ImageProcessor.Imaging.TextLayer"/> containing the properties necessary to add
            the text based watermark to the image.
            </param>
            <returns>
            The current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="M:ImageProcessor.ImageFactory.Save(System.String)">
            <summary>
            Saves the current image to the specified file path. If the extension does not
            match the correct extension for the current format it will be replaced by the
            correct default value.
            </summary>
            <param name="filePath">The path to save the image to.</param>
            <returns>
            The current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="M:ImageProcessor.ImageFactory.Save(System.IO.Stream)">
            <summary>
            Saves the current image to the specified output stream.
            </summary>
            <param name="stream">
            The <see cref="T:System.IO.MemoryStream"/> to save the image information to.
            </param>
            <returns>
            The current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="M:ImageProcessor.ImageFactory.Dispose">
            <summary>
            Disposes the object and frees resources for the Garbage Collector.
            </summary>
        </member>
        <member name="M:ImageProcessor.ImageFactory.Dispose(System.Boolean)">
            <summary>
            Disposes the object and frees resources for the Garbage Collector.
            </summary>
            <param name="disposing">If true, the object gets disposed.</param>
        </member>
        <member name="M:ImageProcessor.ImageFactory.ClearExif(System.Drawing.Image)">
            <summary>
            Clears any EXIF metadata from the image
            </summary>
            <param name="image">The current image.</param>
        </member>
        <member name="T:ImageProcessor.Processors.Background">
            <summary>
            Adds an image background to the current image.
            If the background is larger than the image it will be scaled to match the image.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processors.Background.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Processors.Background"/> class.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Background.DynamicParameter">
            <summary>
            Gets or sets the dynamic parameter.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Background.Settings">
            <summary>
            Gets or sets any additional settings required by the processor.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processors.Background.ProcessImage(ImageProcessor.ImageFactory)">
            <summary>
            Processes the image.
            </summary>
            <param name="factory">
            The current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class containing
            the image to process.
            </param>
            <returns>
            The processed image from the current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="T:ImageProcessor.Processors.Resolution">
            <summary>
            Encapsulates methods to change the resolution of the image.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processors.Resolution.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Processors.Resolution"/> class.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Resolution.DynamicParameter">
            <summary>
            Gets or sets the dynamic parameter.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Resolution.Settings">
            <summary>
            Gets or sets any additional settings required by the processor.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processors.Resolution.ProcessImage(ImageProcessor.ImageFactory)">
            <summary>
            Processes the image.
            </summary>
            <param name="factory">
            The current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class containing
            the image to process.
            </param>
            <returns>
            The processed image from the current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="T:ImageProcessor.Processors.Gamma">
            <summary>
            Encapsulates methods to change the gamma component of the image to effect its luminance.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processors.Gamma.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Processors.Gamma"/> class.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Gamma.DynamicParameter">
            <summary>
            Gets or sets the dynamic parameter.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Gamma.Settings">
            <summary>
            Gets or sets any additional settings required by the processor.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processors.Gamma.ProcessImage(ImageProcessor.ImageFactory)">
            <summary>
            Processes the image.
            </summary>
            <param name="factory">
            The current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class containing
            the image to process.
            </param>
            <returns>
            The processed image from the current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="T:ImageProcessor.Processors.Alpha">
            <summary>
            Encapsulates methods to change the alpha component of the image to effect its transparency.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processors.Alpha.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Processors.Alpha"/> class.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Alpha.DynamicParameter">
            <summary>
            Gets or sets the dynamic parameter.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Alpha.Settings">
            <summary>
            Gets or sets any additional settings required by the processor.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processors.Alpha.ProcessImage(ImageProcessor.ImageFactory)">
            <summary>
            Processes the image.
            </summary>
            <param name="factory">
            The current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class containing
            the image to process.
            </param>
            <returns>
            The processed image from the current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="T:ImageProcessor.Processors.EntropyCrop">
            <summary>
            Performs a crop on an image to the area of greatest entropy.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processors.EntropyCrop.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Processors.EntropyCrop"/> class.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.EntropyCrop.DynamicParameter">
            <summary>
            Gets or sets the dynamic parameter.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.EntropyCrop.Settings">
            <summary>
            Gets or sets any additional settings required by the processor.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processors.EntropyCrop.ProcessImage(ImageProcessor.ImageFactory)">
            <summary>
            Processes the image.
            </summary>
            <param name="factory">
            The current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class containing
            the image to process.
            </param>
            <returns>
            The processed image from the current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="T:ImageProcessor.Processors.BackgroundColor">
            <summary>
            Changes the background color of an image.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processors.BackgroundColor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Processors.BackgroundColor"/> class.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.BackgroundColor.DynamicParameter">
            <summary>
            Gets or sets the DynamicParameter.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.BackgroundColor.Settings">
            <summary>
            Gets or sets any additional settings required by the processor.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processors.BackgroundColor.ProcessImage(ImageProcessor.ImageFactory)">
            <summary>
            Processes the image.
            </summary>
            <param name="factory">The current instance of the 
            <see cref="T:ImageProcessor.ImageFactory" /> class containing
            the image to process.</param>
            <returns>
            The processed image from the current instance of the <see cref="T:ImageProcessor.ImageFactory" /> class.
            </returns>
        </member>
        <member name="T:ImageProcessor.Processors.AutoRotate">
            <summary>
            Performs auto-rotation to ensure that EXIF defined rotation is reflected in 
            the final image.
            <remarks>
            <see href="http://sylvana.net/jpegcrop/exif_orientation.html"/>
            </remarks>
            </summary>
        </member>
        <member name="M:ImageProcessor.Processors.AutoRotate.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Processors.AutoRotate"/> class.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.AutoRotate.DynamicParameter">
            <summary>
            Gets or sets DynamicParameter.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.AutoRotate.Settings">
            <summary>
            Gets or sets any additional settings required by the processor.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processors.AutoRotate.ProcessImage(ImageProcessor.ImageFactory)">
            <summary>
            Processes the image.
            </summary>
            <param name="factory">The current instance of the 
            <see cref="T:ImageProcessor.ImageFactory" /> class containing
            the image to process.</param>
            <returns>
            The processed image from the current instance of the <see cref="T:ImageProcessor.ImageFactory" /> class.
            </returns>
        </member>
        <member name="T:ImageProcessor.Processors.DetectEdges">
            <summary>
            Produces an image with the detected edges highlighted.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processors.DetectEdges.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Processors.DetectEdges"/> class.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.DetectEdges.DynamicParameter">
            <summary>
            Gets or sets the dynamic parameter.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.DetectEdges.Settings">
            <summary>
            Gets or sets any additional settings required by the processor.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processors.DetectEdges.ProcessImage(ImageProcessor.ImageFactory)">
            <summary>
            Processes the image.
            </summary>
            <param name="factory">
            The current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class containing
            the image to process.
            </param>
            <returns>
            The processed image from the current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="T:ImageProcessor.Processors.GaussianBlur">
            <summary>
            Applies a Gaussian blur to the image.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processors.GaussianBlur.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Processors.GaussianBlur"/> class.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.GaussianBlur.DynamicParameter">
            <summary>
            Gets or sets the DynamicParameter.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.GaussianBlur.Settings">
            <summary>
            Gets or sets any additional settings required by the processor.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processors.GaussianBlur.ProcessImage(ImageProcessor.ImageFactory)">
            <summary>
            Processes the image.
            </summary>
            <param name="factory">The current instance of the <see cref="T:ImageProcessor.ImageFactory" /> class containing
            the image to process.</param>
            <returns>
            The processed image from the current instance of the <see cref="T:ImageProcessor.ImageFactory" /> class.
            </returns>
        </member>
        <member name="T:ImageProcessor.Processors.Brightness">
            <summary>
            Encapsulates methods to change the brightness component of the image.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processors.Brightness.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Processors.Brightness"/> class.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Brightness.DynamicParameter">
            <summary>
            Gets or sets DynamicParameter.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Brightness.Settings">
            <summary>
            Gets or sets any additional settings required by the processor.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processors.Brightness.ProcessImage(ImageProcessor.ImageFactory)">
            <summary>
            Processes the image.
            </summary>
            <param name="factory">
            The current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class containing
            the image to process.
            </param>
            <returns>
            The processed image from the current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="T:ImageProcessor.Processors.Contrast">
            <summary>
            Encapsulates methods to change the contrast component of the image.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processors.Contrast.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Processors.Contrast"/> class.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Contrast.DynamicParameter">
            <summary>
            Gets or sets DynamicParameter.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Contrast.Settings">
            <summary>
            Gets or sets any additional settings required by the processor.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processors.Contrast.ProcessImage(ImageProcessor.ImageFactory)">
            <summary>
            Processes the image.
            </summary>
            <param name="factory">
            The current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class containing
            the image to process.
            </param>
            <returns>
            The processed image from the current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="T:ImageProcessor.Processors.GaussianSharpen">
            <summary>
            Applies a Gaussian sharpen to the image.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processors.GaussianSharpen.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Processors.GaussianSharpen"/> class.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.GaussianSharpen.DynamicParameter">
            <summary>
            Gets or sets the DynamicParameter.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.GaussianSharpen.Settings">
            <summary>
            Gets or sets any additional settings required by the processor.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processors.GaussianSharpen.ProcessImage(ImageProcessor.ImageFactory)">
            <summary>
            Processes the image.
            </summary>
            <param name="factory">The current instance of the <see cref="T:ImageProcessor.ImageFactory" /> class containing
            the image to process.</param>
            <returns>
            The processed image from the current instance of the <see cref="T:ImageProcessor.ImageFactory" /> class.
            </returns>
        </member>
        <member name="T:ImageProcessor.Processors.Halftone">
            <summary>
            The halftone processor applies a classical CMYK halftone to the given image.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processors.Halftone.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Processors.Halftone"/> class.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Halftone.DynamicParameter">
            <summary>
            Gets or sets the dynamic parameter.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Halftone.Settings">
            <summary>
            Gets or sets any additional settings required by the processor.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processors.Halftone.ProcessImage(ImageProcessor.ImageFactory)">
            <summary>
            Processes the image.
            </summary>
            <param name="factory">
            The current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class containing
            the image to process.
            </param>
            <returns>
            The processed image from the current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="T:ImageProcessor.Processors.Hue">
            <summary>
            Encapsulates methods to adjust the hue component of an image.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processors.Hue.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Processors.Hue"/> class.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Hue.DynamicParameter">
            <summary>
            Gets or sets the dynamic parameter.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Hue.Settings">
            <summary>
            Gets or sets any additional settings required by the processor.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processors.Hue.ProcessImage(ImageProcessor.ImageFactory)">
            <summary>
            Processes the image.
            </summary>
            <param name="factory">
            The current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class containing
            the image to process.
            </param>
            <returns>
            The processed image from the current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="T:ImageProcessor.Processors.Mask">
            <summary>
            Applies a mask to the given image. If the mask is not the same size as the image
            it will be centered against the image.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processors.Mask.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Processors.Mask"/> class.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Mask.DynamicParameter">
            <summary>
            Gets or sets the dynamic parameter.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Mask.Settings">
            <summary>
            Gets or sets any additional settings required by the processor.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processors.Mask.ProcessImage(ImageProcessor.ImageFactory)">
            <summary>
            Processes the image.
            </summary>
            <param name="factory">
            The current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class containing
            the image to process.
            </param>
            <returns>
            The processed image from the current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="T:ImageProcessor.Processors.Meta">
            <summary>
            Encapsulates methods to control preservation of meta information.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processors.Meta.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Processors.Meta"/> class.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Meta.DynamicParameter">
            <summary>
            Gets or sets DynamicParameter.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Meta.Settings">
            <summary>
            Gets or sets any additional settings required by the processor.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processors.Meta.ProcessImage(ImageProcessor.ImageFactory)">
            <summary>
            Processes the image.
            </summary>
            <param name="factory">
            The current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class containing
            the image to process.
            </param>
            <returns>
            The processed image from the current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="T:ImageProcessor.Processors.Overlay">
            <summary>
            Adds an image overlay to the current image.
            If the overlay is larger than the image it will be scaled to match the image.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processors.Overlay.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Processors.Overlay"/> class.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Overlay.DynamicParameter">
            <summary>
            Gets or sets the dynamic parameter.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Overlay.Settings">
            <summary>
            Gets or sets any additional settings required by the processor.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processors.Overlay.ProcessImage(ImageProcessor.ImageFactory)">
            <summary>
            Processes the image.
            </summary>
            <param name="factory">
            The current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class containing
            the image to process.
            </param>
            <returns>
            The processed image from the current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="T:ImageProcessor.Processors.Pixelate">
            <summary>
            Encapsulates methods to pixelate an image.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processors.Pixelate.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Processors.Pixelate"/> class.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Pixelate.DynamicParameter">
            <summary>
            Gets or sets the dynamic parameter.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Pixelate.Settings">
            <summary>
            Gets or sets any additional settings required by the processor.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processors.Pixelate.ProcessImage(ImageProcessor.ImageFactory)">
            <summary>
            Processes the image.
            </summary>
            <param name="factory">
            The current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class containing
            the image to process.
            </param>
            <returns>
            The processed image from the current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="T:ImageProcessor.Processors.ReplaceColor">
            <summary>
            Encapsulates methods allowing the replacement of a color within an image.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processors.ReplaceColor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Processors.ReplaceColor"/> class.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.ReplaceColor.DynamicParameter">
            <summary>
            Gets or sets the dynamic parameter.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.ReplaceColor.Settings">
            <summary>
            Gets or sets any additional settings required by the processor.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processors.ReplaceColor.ProcessImage(ImageProcessor.ImageFactory)">
            <summary>
            Processes the image.
            </summary>
            <param name="factory">
            The current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class containing
            the image to process.
            </param>
            <returns>
            The processed image from the current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="T:ImageProcessor.Processors.RotateBounded">
            <summary>
            Encapsulates the methods to rotate an image without expanding the canvas.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.RotateBounded.DynamicParameter">
            <summary>
            Gets or sets the DynamicParameter.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.RotateBounded.Settings">
            <summary>
            Gets or sets any additional settings required by the processor.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processors.RotateBounded.ProcessImage(ImageProcessor.ImageFactory)">
            <summary>
            Processes the image.
            </summary>
            <param name="factory">The current instance of the <see cref="T:ImageProcessor.ImageFactory" /> class containing
            the image to process.</param>
            <returns>
            The processed image from the current instance of the <see cref="T:ImageProcessor.ImageFactory" /> class.
            </returns>
            <remarks>
            Based on <see href="http://math.stackexchange.com/questions/1070853/"/>
            </remarks>
        </member>
        <member name="M:ImageProcessor.Processors.RotateBounded.RotateImage(System.Drawing.Image,System.Single,System.Boolean)">
            <summary>
            Rotates the inside of an image to the given angle at the given position.
            </summary>
            <param name="image">
            The image to rotate
            </param>
            <param name="angleInDegrees">
            The angle in degrees.
            </param>
            <param name="keepSize">
            Whether to keep the image dimensions.
            <para>
            If set to true, the image is zoomed to fit the bounding area.
            </para>
            <para>
            If set to false, the area is cropped to fit the rotated image.
            </para>
            </param>
            <remarks>
            Based on the Rotate effect
            </remarks>
            <returns>
            The image rotated to the given angle at the given position.
            </returns>
        </member>
        <member name="T:ImageProcessor.Processors.RoundedCorners">
            <summary>
            Encapsulates methods to add rounded corners to an image.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processors.RoundedCorners.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Processors.RoundedCorners"/> class.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.RoundedCorners.DynamicParameter">
            <summary>
            Gets or sets DynamicParameter.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.RoundedCorners.Settings">
            <summary>
            Gets or sets any additional settings required by the processor.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processors.RoundedCorners.ProcessImage(ImageProcessor.ImageFactory)">
            <summary>
            Processes the image.
            </summary>
            <param name="factory">
            The current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class containing
            the image to process.
            </param>
            <returns>
            The processed image from the current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="M:ImageProcessor.Processors.RoundedCorners.RoundCornerImage(System.Drawing.Image,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Adds rounded corners to the image
            </summary>
            <param name="image">The image to add corners too</param>
            <param name="cornerRadius">The radius of the corners.</param>
            <param name="topLeft">If the top left corner will have a rounded corner?</param>
            <param name="topRight">If the top right corner will have a rounded corner?</param>
            <param name="bottomLeft">If the bottom left corner will have a rounded corner?</param>
            <param name="bottomRight">If the bottom right corner will have a rounded corner?</param>
            <returns>The image with rounded corners.</returns>
        </member>
        <member name="T:ImageProcessor.Processors.Saturation">
            <summary>
            Encapsulates methods to change the saturation component of the image.
            </summary>
            <remarks>
            <see href="http://www.bobpowell.net/imagesaturation.htm"/> 
            </remarks>
        </member>
        <member name="M:ImageProcessor.Processors.Saturation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Processors.Saturation"/> class.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Saturation.DynamicParameter">
            <summary>
            Gets or sets DynamicParameter.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Saturation.Settings">
            <summary>
            Gets or sets any additional settings required by the processor.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processors.Saturation.ProcessImage(ImageProcessor.ImageFactory)">
            <summary>
            Processes the image.
            </summary>
            <param name="factory">
            The current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class containing
            the image to process.
            </param>
            <returns>
            The processed image from the current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="T:ImageProcessor.Processors.Flip">
            <summary>
            Flips an image horizontally or vertically.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processors.Flip.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Processors.Flip"/> class.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Flip.DynamicParameter">
            <summary>
            Gets or sets DynamicParameter.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Flip.Settings">
            <summary>
            Gets or sets any additional settings required by the processor.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processors.Flip.ProcessImage(ImageProcessor.ImageFactory)">
            <summary>
            Processes the image.
            </summary>
            <param name="factory">
            The current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class containing
            the image to process.
            </param>
            <returns>
            The processed image from the current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="T:ImageProcessor.Processors.Rotate">
            <summary>
            Encapsulates methods to rotate an image.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processors.Rotate.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Processors.Rotate"/> class.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Rotate.DynamicParameter">
            <summary>
            Gets or sets DynamicParameter.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Rotate.Settings">
            <summary>
            Gets or sets any additional settings required by the processor.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processors.Rotate.ProcessImage(ImageProcessor.ImageFactory)">
            <summary>
            Processes the image.
            </summary>
            <param name="factory">
            The current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class containing
            the image to process.
            </param>
            <returns>
            The processed image from the current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="M:ImageProcessor.Processors.Rotate.RotateImage(System.Drawing.Image,System.Single,System.Single,System.Single)">
            <summary>
            Rotates an image to the given angle at the given position.
            </summary>
            <param name="image">The image to rotate</param>
            <param name="rotateAtX">The horizontal pixel coordinate at which to rotate the image.</param>
            <param name="rotateAtY">The vertical pixel coordinate at which to rotate the image.</param>
            <param name="angle">The angle in degrees at which to rotate the image.</param>
            <returns>The image rotated to the given angle at the given position.</returns>
            <remarks> 
            Based on <see href="http://www.codeproject.com/Articles/58815/C-Image-PictureBox-Rotations?msg=4155374#xx4155374xx"/> 
            </remarks>
        </member>
        <member name="T:ImageProcessor.Processors.Crop">
            <summary>
            Crops an image to the given directions.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processors.Crop.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Processors.Crop"/> class.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Crop.DynamicParameter">
            <summary>
            Gets or sets DynamicParameter.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Crop.Settings">
            <summary>
            Gets or sets any additional settings required by the processor.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processors.Crop.ProcessImage(ImageProcessor.ImageFactory)">
            <summary>
            Processes the image.
            </summary>
            <param name="factory">
            The current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class containing
            the image to process.
            </param>
            <returns>
            The processed image from the current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="M:ImageProcessor.Processors.Crop.ForwardRotateFlip(System.Int32,System.Drawing.Image@)">
            <summary>
            Performs a forward rotation of an image
            </summary>
            <param name="orientation">The EXIF orientation value.</param>
            <param name="image">The image</param>
        </member>
        <member name="M:ImageProcessor.Processors.Crop.ReverseRotateFlip(System.Int32,System.Drawing.Image@)">
            <summary>
            Performs an inverse rotation of an image 
            </summary>
            <param name="orientation">The EXIF orientation value.</param>
            <param name="image">The image</param>
        </member>
        <member name="T:ImageProcessor.Processors.Filter">
            <summary>
            Encapsulates methods with which to add filters to an image.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processors.Filter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Processors.Filter"/> class.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Filter.DynamicParameter">
            <summary>
            Gets or sets DynamicParameter.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Filter.Settings">
            <summary>
            Gets or sets any additional settings required by the processor.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processors.Filter.ProcessImage(ImageProcessor.ImageFactory)">
            <summary>
            Processes the image.
            </summary>
            <param name="factory">
            The current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class containing
            the image to process.
            </param>
            <returns>
            The processed image from the current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="T:ImageProcessor.Processors.IGraphicsProcessor">
            <summary>
            Defines properties and methods for ImageProcessor Plugins.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.IGraphicsProcessor.DynamicParameter">
            <summary>
            Gets or sets the DynamicParameter.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.IGraphicsProcessor.Settings">
            <summary>
            Gets or sets any additional settings required by the processor.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processors.IGraphicsProcessor.ProcessImage(ImageProcessor.ImageFactory)">
            <summary>
            Processes the image.
            </summary>
            <param name="factory">
            The current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class containing
            the image to process.
            </param>
            <returns>
            The processed image from the current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="T:ImageProcessor.Processors.Quality">
            <summary>
            Encapsulates methods to change the quality component of the image.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processors.Quality.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Processors.Quality"/> class.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Quality.DynamicParameter">
            <summary>
            Gets or sets DynamicParameter.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Quality.Settings">
            <summary>
            Gets or sets any additional settings required by the processor.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processors.Quality.ProcessImage(ImageProcessor.ImageFactory)">
            <summary>
            Processes the image.
            </summary>
            <param name="factory">
            The current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class containing
            the image to process.
            </param>
            <returns>
            The processed image from the current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="T:ImageProcessor.Processors.Resize">
            <summary>
            Resizes an image to the given dimensions.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processors.Resize.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Processors.Resize"/> class.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Resize.DynamicParameter">
            <summary>
            Gets or sets DynamicParameter.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Resize.Settings">
            <summary>
            Gets or sets any additional settings required by the processor.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Resize.RestrictedSizes">
            <summary>
            Gets or sets the list of sizes to restrict resizing methods to.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processors.Resize.ProcessImage(ImageProcessor.ImageFactory)">
            <summary>
            Processes the image.
            </summary>
            <param name="factory">
            The current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class containing
            the image to process.
            </param>
            <returns>
            The processed image from the current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="T:ImageProcessor.Processors.Format">
            <summary>
            Sets the output of the image to a specific format.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processors.Format.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Processors.Format"/> class.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Format.DynamicParameter">
            <summary>
            Gets or sets DynamicParameter.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Format.Settings">
            <summary>
            Gets or sets any additional settings required by the processor.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processors.Format.ProcessImage(ImageProcessor.ImageFactory)">
            <summary>
            Processes the image.
            </summary>
            <param name="factory">
            The current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class containing
            the image to process.
            </param>
            <returns>
            The processed image from the current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="T:ImageProcessor.Processors.Tint">
            <summary>
            Tints an image with the given color.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processors.Tint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Processors.Tint"/> class.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Tint.DynamicParameter">
            <summary>
            Gets or sets DynamicParameter.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Tint.Settings">
            <summary>
            Gets or sets any additional settings required by the processor.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processors.Tint.ProcessImage(ImageProcessor.ImageFactory)">
            <summary>
            Processes the image.
            </summary>
            <param name="factory">
            The current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class containing
            the image to process.
            </param>
            <returns>
            The processed image from the current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="T:ImageProcessor.Processors.Vignette">
            <summary>
            Encapsulates methods with which to add a vignette image effect to an image.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processors.Vignette.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Processors.Vignette"/> class.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Vignette.DynamicParameter">
            <summary>
            Gets or sets DynamicParameter.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Vignette.Settings">
            <summary>
            Gets or sets any additional settings required by the processor.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processors.Vignette.ProcessImage(ImageProcessor.ImageFactory)">
            <summary>
            Processes the image.
            </summary>
            <param name="factory">
            The current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class containing
            the image to process.
            </param>
            <returns>
            The processed image from the current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="T:ImageProcessor.Processors.Watermark">
            <summary>
            Encapsulates methods to add a watermark text overlay to an image.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processors.Watermark.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Processors.Watermark"/> class.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Watermark.DynamicParameter">
            <summary>
            Gets or sets DynamicParameter.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processors.Watermark.Settings">
            <summary>
            Gets or sets any additional settings required by the processor.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processors.Watermark.ProcessImage(ImageProcessor.ImageFactory)">
            <summary>
            Processes the image.
            </summary>
            <param name="factory">
            The current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class containing
            the image to process.
            </param>
            <returns>
            The processed image from the current instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </returns>
        </member>
        <member name="M:ImageProcessor.Processors.Watermark.GetFont(System.Drawing.FontFamily,System.Int32,System.Drawing.FontStyle)">
            <summary>
            Returns the correct <see cref="T:System.Drawing.Font"/> for the given parameters.
            </summary>
            <param name="fontFamily">
            The name of the font.
            </param>
            <param name="fontSize">
            The font size.
            </param>
            <param name="fontStyle">
            The <see cref="T:System.Drawing.FontStyle"/> style.
            </param>
            <returns>
            The correct <see cref="T:System.Drawing.Font"/>
            </returns>
        </member>
        <member name="M:ImageProcessor.Processors.Watermark.GetFlags(ImageProcessor.Imaging.TextLayer)">
            <summary>
            Returns the correct flags for the given text layer.
            </summary>
            <param name="textLayer">
            The <see cref="T:ImageProcessor.Imaging.TextLayer"/> to return the flags for.
            </param>
            <returns>
            The <see cref="T:System.Drawing.StringFormatFlags"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Processors.Watermark.GetRotateFlipType(ImageProcessor.ImageFactory)">
            <summary>
            Gets the correct <see cref="T:System.Nullable`1"/> to ensure that the watermarked image is 
            correct orientation when the watermark is applied.
            </summary>
            <param name="factory">The current <see cref="T:ImageProcessor.ImageFactory"/>.</param>
            <returns>
            The <see cref="T:System.Nullable`1"/>.
            </returns>
        </member>
    </members>
</doc>
